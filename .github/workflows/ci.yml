name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.23'  # Changed from 1.25.0 to available version
  POSTGRES_VERSION: '16'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: loci_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}


    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install Templ
      run: go install github.com/a-h/templ/cmd/templ@latest

    - name: Install dependencies
      run: go mod download


    - name: Generate Templ files
      run: templ generate


    - name: Run tests
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5454
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: loci-dev
        JWT_SECRET_KEY: test-jwt-secret-key-for-ci
        JWT_ISSUER: loci-test
        JWT_AUDIENCE: loci-test-app
        JWT_ACCESS_TOKEN_TTL: 15m
        JWT_REFRESH_TOKEN_TTL: 168h
      run: |
        go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install Templ
      run: go install github.com/a-h/templ/cmd/templ@latest

    - name: Generate Templ files
      run: templ generate

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: v1.59.1  # Fixed version that supports Go 1.23
        args: --config .golangci.yml

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securego/gosec@v2.22.8

#    - name: Upload SARIF file
#      uses: github/codeql-action/upload-sarif@v3
#      with:
#        sarif_file: results.sarif

#    - name: Run Nancy (dependency vulnerability scanner)
#      run: |
#        go install github.com/sonatypecommunity/nancy@latest
#        go list -json -deps ./... | nancy sleuth

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install Templ
      run: go install github.com/a-h/templ/cmd/templ@latest

    - name: Install dependencies
      run: go mod download

    - name: Generate Templ files
      run: templ generate


    - name: Build application
      run: |
        CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: loci-templui
        path: main

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add your staging deployment steps here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your production deployment steps here

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: loci_perf
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: loci-templui

    - name: Make binary executable
      run: chmod +x main

    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run application
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: loci_perf
        JWT_SECRET_KEY: test-jwt-secret-key-for-perf
        SERVER_PORT: 8090
      run: |
        ./main &
        APP_PID=$!
        sleep 5
        echo "APP_PID=$APP_PID" >> $GITHUB_ENV

    - name: Run performance tests
      run: |
        # Create a simple k6 test since the file might not exist
        cat > load-test.js << 'EOF'
        import http from 'k6/http';
        import { check } from 'k6';

        export default function () {
          const response = http.get('http://localhost:8090/');
          check(response, {
            'status is 200': (r) => r.status === 200,
          });
        }
        EOF
        k6 run --vus 10 --duration 30s load-test.js

    - name: Stop application
      run: |
        kill $APP_PID || true

  accessibility-test:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    needs: [build]
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: loci_a11y
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: loci-templui

    - name: Make binary executable
      run: chmod +x main

    - name: Run application
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: loci_a11y
        JWT_SECRET_KEY: test-jwt-secret-key-for-a11y
        SERVER_PORT: 8090
      run: |
        ./main &
        APP_PID=$!
        sleep 5
        echo "APP_PID=$APP_PID" >> $GITHUB_ENV

    - name: Run basic accessibility checks
      run: |
        # Basic smoke tests to ensure pages are accessible
        curl -f http://localhost:8090/auth/signin || exit 1
        curl -f http://localhost:8090/auth/signup || exit 1
        curl -f http://localhost:8090/auth/forgot-password || exit 1
        curl -f http://localhost:8090/ || exit 1
        echo "All pages are accessible (HTTP 200 responses)"

    - name: Stop application
      run: |
        kill $APP_PID || true