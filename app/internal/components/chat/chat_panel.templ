package chat

import (
	"fmt"
)

// ChatPanelProps defines the properties for the chat panel component
type ChatPanelProps struct {
	SessionID   string
	CityName    string
	Domain      string // "restaurants", "hotels", "activities", "itinerary"
	Placeholder string
	ShowByDefault bool
}

// ChatPanel creates a collapsible chat interface with HTMX SSE for continuing sessions
// Note: This component uses Alpine.js showChat variable from parent page scope
templ ChatPanel(props ChatPanelProps) {
	<div x-data="chatPanelState()">
		<!-- Chat Toggle Button (Floating Action Button) -->
		<button
			@click="$parent.showChat = !$parent.showChat"
			x-show="!$parent.showChat"
			class="fixed bottom-6 right-6 z-50 bg-blue-600 hover:bg-blue-700 text-white rounded-full p-4 shadow-lg transition-all duration-200 hover:scale-110"
			title={ fmt.Sprintf("Continue conversation about %s", props.CityName) }
		>
			<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"></path>
			</svg>
			<span class="sr-only">Open chat</span>
		</button>
		<!-- Chat Panel -->
		<div
			x-show="$parent.showChat"
			x-transition:enter="transition ease-out duration-300"
			x-transition:enter-start="opacity-0 transform translate-y-4"
			x-transition:enter-end="opacity-1 transform translate-y-0"
			x-transition:leave="transition ease-in duration-200"
			x-transition:leave-start="opacity-1"
			x-transition:leave-end="opacity-0"
			class="fixed bottom-20 right-6 z-50 bg-white dark:bg-gray-800 rounded-lg shadow-2xl border border-gray-200 dark:border-gray-700 w-96 max-h-[600px] flex flex-col"
			x-cloak
		>
			<!-- Header -->
			<div class="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-t-lg">
				<div class="flex items-center gap-2">
					<div class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
						<svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"></path>
						</svg>
					</div>
					<div>
						<h3 class="font-semibold text-gray-900 dark:text-white text-sm">Continue Planning</h3>
						<p class="text-xs text-gray-600 dark:text-gray-300">{ props.CityName }</p>
					</div>
				</div>
				<button
					@click="$parent.showChat = false"
					class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors"
				>
					<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
					</svg>
					<span class="sr-only">Close chat</span>
				</button>
			</div>

			<!-- Messages Container -->
			<div
				id="chat-messages"
				class="flex-1 overflow-y-auto p-4 space-y-3 min-h-[300px] max-h-[400px]"
			>
				<!-- Messages will be dynamically added here via HTMX SSE -->
				<template x-for="msg in messages" :key="msg.id">
					<div :class="msg.type === 'user' ? 'flex justify-end' : 'flex justify-start'">
						<div
							:class="msg.type === 'user' ? 'bg-blue-600 text-white' : 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white'"
							class="max-w-[80%] rounded-lg px-4 py-2 text-sm"
						>
							<p x-text="msg.content"></p>
							<span class="text-xs opacity-70" x-text="new Date(msg.timestamp).toLocaleTimeString()"></span>
						</div>
					</div>
				</template>

				<!-- Loading Indicator -->
				<div x-show="isLoading" class="flex justify-start">
					<div class="bg-gray-100 dark:bg-gray-700 rounded-lg px-4 py-2">
						<div class="flex gap-1">
							<div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0ms"></div>
							<div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 150ms"></div>
							<div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 300ms"></div>
						</div>
					</div>
				</div>

				<!-- SSE Update Container -->
				<div
					id="sse-updates"
					hx-ext="sse"
					sse-connect={ fmt.Sprintf("/chat/continue/%s", props.SessionID) }
					sse-swap="message"
					hx-target="#chat-messages"
					hx-swap="beforeend"
				></div>
			</div>

			<!-- Input Area -->
			<div class="p-4 border-t border-gray-200 dark:border-gray-700">
				<form
					hx-post={ fmt.Sprintf("/chat/continue/%s", props.SessionID) }
					hx-ext="sse"
					hx-target="#chat-messages"
					hx-swap="beforeend"
					@submit.prevent="
						if (message.trim()) {
							messages.push({
								id: Date.now(),
								type: 'user',
								content: message,
								timestamp: new Date()
							});
							isLoading = true;
							$nextTick(() => {
								const container = document.getElementById('chat-messages');
								container.scrollTop = container.scrollHeight;
							});
						}
					"
					hx-on::after-request="
						message = '';
						isLoading = false;
					"
					class="flex gap-2"
				>
					<input
						type="text"
						name="message"
						x-model="message"
						:placeholder={ fmt.Sprintf("props.Placeholder || 'Ask to add more %s...'", props.Domain) }
						class="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 text-sm"
						required
						@keydown.enter="if (!$event.shiftKey) { $event.target.closest('form').requestSubmit(); }"
					/>
					<button
						type="submit"
						:disabled="!message.trim() || isLoading"
						class="px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white rounded-lg transition-colors text-sm font-medium flex items-center gap-2"
					>
						<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
						</svg>
						<span class="hidden sm:inline">Send</span>
					</button>
				</form>

				<!-- Quick Actions -->
				<div class="mt-2 flex flex-wrap gap-2">
					<button
						@click="message = 'Add more ' + '{ props.Domain }' + ' similar to these'"
						class="text-xs px-3 py-1 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 rounded-full transition-colors"
					>
						‚ú® More like these
					</button>
					<button
						@click="message = 'Find budget-friendly options'"
						class="text-xs px-3 py-1 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 rounded-full transition-colors"
					>
						üí∞ Budget options
					</button>
					<button
						@click="message = 'Show premium options'"
						class="text-xs px-3 py-1 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 rounded-full transition-colors"
					>
						‚≠ê Premium
					</button>
				</div>
			</div>
		</div>

	<!-- Auto-scroll script -->
	<script>
		document.addEventListener('htmx:sseMessage', function(event) {
			const container = document.getElementById('chat-messages');
			if (container) {
				// Auto-scroll to bottom when new message arrives
				setTimeout(() => {
					container.scrollTop = container.scrollHeight;
				}, 100);
			}
		});

		// Chat panel state - provides local state while accessing parent's showChat
		function chatPanelState() {
			return {
				message: '',
				isLoading: false,
				messages: []
			};
		}
	</script>
	</div>
}
