package banner

import (
	"fmt"
)

// BannerType defines the style of the banner
type BannerType string

const (
	BannerSuccess BannerType = "success"
	BannerInfo    BannerType = "info"
	BannerWarning BannerType = "warning"
	BannerError   BannerType = "error"
)

// BannerProps defines properties for the banner component
type BannerProps struct {
	Type        BannerType
	Message     string
	Description string
	Dismissable bool
	ID          string // Unique ID for the banner
	AutoDismiss int    // Auto-dismiss after N seconds (0 = no auto-dismiss)
}

// Banner creates a dismissable banner with color-coded styling
templ Banner(props BannerProps) {
	<div
		id={ props.ID }
		x-data={ fmt.Sprintf("{ show: true, autoDismiss: %d }", props.AutoDismiss) }
		x-show="show"
		x-init={
			fmt.Sprintf(`
				if (autoDismiss > 0) {
					setTimeout(() => {
						show = false;
						setTimeout(() => document.getElementById('%s')?.remove(), 300);
					}, autoDismiss * 1000);
				}
			`, props.ID)
		}
		x-transition:enter="transition ease-out duration-300"
		x-transition:enter-start="opacity-0 transform -translate-y-4"
		x-transition:enter-end="opacity-100 transform translate-y-0"
		x-transition:leave="transition ease-in duration-200"
		x-transition:leave-start="opacity-100"
		x-transition:leave-end="opacity-0"
		class={ getBannerClasses(props.Type) }
		role="alert"
	>
		<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
			<div class="flex items-start gap-3">
				<!-- Icon -->
				<div class="flex-shrink-0 pt-0.5">
					@getBannerIcon(props.Type)
				</div>

				<!-- Content -->
				<div class="flex-1 min-w-0">
					<p class="text-sm font-medium">
						{ props.Message }
					</p>
					if props.Description != "" {
						<p class="mt-1 text-sm opacity-90">
							{ props.Description }
						</p>
					}
				</div>

				<!-- Dismiss Button -->
				if props.Dismissable {
					<button
						@click="show = false; setTimeout(() => document.getElementById($el.closest('[role=alert]').id)?.remove(), 300)"
						class="flex-shrink-0 ml-4 p-1 rounded hover:bg-black/10 transition-colors"
						aria-label="Dismiss"
					>
						<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
						</svg>
					</button>
				}
			</div>
		</div>
	</div>
}

// FixedBanner creates a fixed position banner (top of screen)
templ FixedBanner(props BannerProps) {
	<div
		id={ props.ID }
		x-data={ fmt.Sprintf("{ show: true, autoDismiss: %d }", props.AutoDismiss) }
		x-show="show"
		x-init={
			fmt.Sprintf(`
				if (autoDismiss > 0) {
					setTimeout(() => {
						show = false;
						setTimeout(() => document.getElementById('%s')?.remove(), 300);
					}, autoDismiss * 1000);
				}
			`, props.ID)
		}
		x-transition:enter="transition ease-out duration-300"
		x-transition:enter-start="opacity-0 transform -translate-y-full"
		x-transition:enter-end="opacity-100 transform translate-y-0"
		x-transition:leave="transition ease-in duration-200"
		x-transition:leave-start="opacity-100"
		x-transition:leave-end="opacity-0 transform -translate-y-full"
		class={ "fixed top-0 left-0 right-0 z-50 " + getBannerClasses(props.Type) }
		role="alert"
	>
		<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
			<div class="flex items-start gap-3">
				<!-- Icon -->
				<div class="flex-shrink-0 pt-0.5">
					@getBannerIcon(props.Type)
				</div>

				<!-- Content -->
				<div class="flex-1 min-w-0">
					<p class="text-sm font-medium">
						{ props.Message }
					</p>
					if props.Description != "" {
						<p class="mt-1 text-sm opacity-90">
							{ props.Description }
						</p>
					}
				</div>

				<!-- Dismiss Button -->
				if props.Dismissable {
					<button
						@click="show = false; setTimeout(() => document.getElementById($el.closest('[role=alert]').id)?.remove(), 300)"
						class="flex-shrink-0 ml-4 p-1 rounded hover:bg-black/10 transition-colors"
						aria-label="Dismiss"
					>
						<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
						</svg>
					</button>
				}
			</div>
		</div>
	</div>
}

// ToastBanner creates a toast-style notification (bottom-right corner)
templ ToastBanner(props BannerProps) {
	<div
		id={ props.ID }
		x-data={ fmt.Sprintf("{ show: true, autoDismiss: %d }", props.AutoDismiss) }
		x-show="show"
		x-init={
			fmt.Sprintf(`
				if (autoDismiss > 0) {
					setTimeout(() => {
						show = false;
						setTimeout(() => document.getElementById('%s')?.remove(), 300);
					}, autoDismiss * 1000);
				}
			`, props.ID)
		}
		x-transition:enter="transition ease-out duration-300"
		x-transition:enter-start="opacity-0 transform translate-x-full"
		x-transition:enter-end="opacity-100 transform translate-x-0"
		x-transition:leave="transition ease-in duration-200"
		x-transition:leave-start="opacity-100"
		x-transition:leave-end="opacity-0 transform translate-x-full"
		class={ "fixed bottom-6 right-6 max-w-md shadow-2xl rounded-lg " + getBannerClasses(props.Type) }
		role="alert"
		style="z-index: 9999;"
	>
		<div class="px-4 py-3">
			<div class="flex items-start gap-3">
				<!-- Icon -->
				<div class="flex-shrink-0 pt-0.5">
					@getBannerIcon(props.Type)
				</div>

				<!-- Content -->
				<div class="flex-1 min-w-0">
					<p class="text-sm font-medium">
						{ props.Message }
					</p>
					if props.Description != "" {
						<p class="mt-1 text-sm opacity-90">
							{ props.Description }
						</p>
					}
				</div>

				<!-- Dismiss Button -->
				if props.Dismissable {
					<button
						@click="show = false; setTimeout(() => document.getElementById($el.closest('[role=alert]').id)?.remove(), 300)"
						class="flex-shrink-0 ml-2 p-1 rounded hover:bg-black/10 transition-colors"
						aria-label="Dismiss"
					>
						<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
						</svg>
					</button>
				}
			</div>
		</div>
	</div>
}

// AuthPromoBanner shows authentication promotion for guests
templ AuthPromoBanner() {
	<div
		x-data="{ show: true, text: '', typing: false }"
		x-init={`
			// Check if user is authenticated
			const isAuthenticated = document.cookie.includes('session_token');
			if (isAuthenticated) {
				show = false;
				return;
			}

			// Typing animation
			const messages = [
				'Sign in to save your favorites',
				'Create an account for personalized recommendations',
				'Join now to unlock premium features'
			];
			let currentMessage = 0;

			function typeMessage() {
				if (!show) return;

				typing = true;
				const message = messages[currentMessage];
				let charIndex = 0;
				text = '';

				const typeInterval = setInterval(() => {
					if (charIndex < message.length) {
						text += message[charIndex];
						charIndex++;
					} else {
						clearInterval(typeInterval);
						typing = false;

						// Wait 5 seconds before next message
						setTimeout(() => {
							currentMessage = (currentMessage + 1) % messages.length;
							typeMessage();
						}, 5000);
					}
				}, 50); // 50ms per character
			}

			typeMessage();
		`}
		x-show="show"
		x-transition:enter="transition ease-out duration-300"
		x-transition:enter-start="opacity-0 transform -translate-y-4"
		x-transition:enter-end="opacity-100 transform translate-y-0"
		x-transition:leave="transition ease-in duration-200"
		x-transition:leave-start="opacity-100"
		x-transition:leave-end="opacity-0"
		class="bg-gradient-to-r from-purple-600 to-blue-600 text-white py-3 shadow-lg"
		role="alert"
	>
		<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
			<div class="flex items-center justify-between gap-4">
				<div class="flex items-center gap-3 flex-1 min-w-0">
					<svg class="w-5 h-5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
					</svg>
					<p class="text-sm font-medium" x-text="text"></p>
					<span x-show="typing" class="w-0.5 h-4 bg-white animate-pulse"></span>
				</div>

				<div class="flex items-center gap-2">
					<a
						href="/signin"
						class="px-4 py-1.5 bg-white/20 hover:bg-white/30 rounded-lg text-sm font-medium transition-colors whitespace-nowrap"
					>
						Sign In
					</a>
					<a
						href="/signup"
						class="px-4 py-1.5 bg-white text-purple-600 hover:bg-white/90 rounded-lg text-sm font-medium transition-colors whitespace-nowrap"
					>
						Sign Up
					</a>
					<button
						@click="show = false"
						class="p-1 rounded hover:bg-white/10 transition-colors ml-2"
						aria-label="Dismiss"
					>
						<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
						</svg>
					</button>
				</div>
			</div>
		</div>
	</div>
}

// Helper function to get banner classes based on type
func getBannerClasses(bannerType BannerType) string {
	baseClasses := "py-4"

	switch bannerType {
	case BannerSuccess:
		return baseClasses + " bg-green-50 dark:bg-green-900/20 border-l-4 border-green-500 text-green-800 dark:text-green-200"
	case BannerInfo:
		return baseClasses + " bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500 text-blue-800 dark:text-blue-200"
	case BannerWarning:
		return baseClasses + " bg-yellow-50 dark:bg-yellow-900/20 border-l-4 border-yellow-500 text-yellow-800 dark:text-yellow-200"
	case BannerError:
		return baseClasses + " bg-red-50 dark:bg-red-900/20 border-l-4 border-red-500 text-red-800 dark:text-red-200"
	default:
		return baseClasses + " bg-gray-50 dark:bg-gray-800 border-l-4 border-gray-500 text-gray-800 dark:text-gray-200"
	}
}

// Helper component to render icons based on banner type
templ getBannerIcon(bannerType BannerType) {
	switch bannerType {
		case BannerSuccess:
			<svg class="w-5 h-5 text-green-600 dark:text-green-400" fill="currentColor" viewBox="0 0 20 20">
				<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
			</svg>
		case BannerInfo:
			<svg class="w-5 h-5 text-blue-600 dark:text-blue-400" fill="currentColor" viewBox="0 0 20 20">
				<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
			</svg>
		case BannerWarning:
			<svg class="w-5 h-5 text-yellow-600 dark:text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
				<path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
			</svg>
		case BannerError:
			<svg class="w-5 h-5 text-red-600 dark:text-red-400" fill="currentColor" viewBox="0 0 20 20">
				<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
			</svg>
		default:
			<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
				<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
			</svg>
	}
}
