// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package scripts

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

// ViewModeManagerScript provides view mode persistence and smooth transitions
func ViewModeManagerScript() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script type=\"text/javascript\">\n\t// View Mode Manager - Handles view mode persistence and transitions\n\t(function() {\n\t\tconst VIEW_MODE_KEY = 'loci_view_mode_preference';\n\t\tconst VALID_MODES = ['list', 'map', 'split', 'grid'];\n\t\tconst DEFAULT_MODE = 'list';\n\n\t\tclass ViewModeManager {\n\t\t\tconstructor() {\n\t\t\t\tthis.currentMode = this.loadViewMode();\n\t\t\t\tthis.init();\n\t\t\t}\n\n\t\t\tinit() {\n\t\t\t\t// Expose globally\n\t\t\t\twindow.viewModeManager = this;\n\n\t\t\t\t// Set initial mode if Alpine.js context exists\n\t\t\t\tthis.applyInitialMode();\n\n\t\t\t\t// Listen for view mode changes\n\t\t\t\tdocument.addEventListener('alpine:initialized', () => {\n\t\t\t\t\tconsole.log('Alpine initialized, view mode:', this.currentMode);\n\t\t\t\t});\n\n\t\t\t\tconsole.log('View Mode Manager initialized', { currentMode: this.currentMode });\n\t\t\t}\n\n\t\t\tloadViewMode() {\n\t\t\t\ttry {\n\t\t\t\t\tconst stored = localStorage.getItem(VIEW_MODE_KEY);\n\t\t\t\t\tif (stored && VALID_MODES.includes(stored)) {\n\t\t\t\t\t\treturn stored;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error('Failed to load view mode preference', e);\n\t\t\t\t}\n\t\t\t\treturn DEFAULT_MODE;\n\t\t\t}\n\n\t\t\tsaveViewMode(mode) {\n\t\t\t\tif (!VALID_MODES.includes(mode)) {\n\t\t\t\t\tconsole.warn('Invalid view mode:', mode);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tlocalStorage.setItem(VIEW_MODE_KEY, mode);\n\t\t\t\t\tthis.currentMode = mode;\n\t\t\t\t\tconsole.log('View mode saved:', mode);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error('Failed to save view mode preference', e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgetViewMode() {\n\t\t\t\treturn this.currentMode;\n\t\t\t}\n\n\t\t\tsetViewMode(mode, alpineContext) {\n\t\t\t\tthis.saveViewMode(mode);\n\n\t\t\t\t// Update Alpine context if provided\n\t\t\t\tif (alpineContext && alpineContext.viewMode !== undefined) {\n\t\t\t\t\talpineContext.viewMode = mode;\n\t\t\t\t}\n\n\t\t\t\t// Trigger custom event for other components\n\t\t\t\twindow.dispatchEvent(new CustomEvent('viewModeChanged', {\n\t\t\t\t\tdetail: { mode }\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tapplyInitialMode() {\n\t\t\t\t// Try to set initial mode on page load\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconst alpineData = window.Alpine?.store('results');\n\t\t\t\t\tif (alpineData) {\n\t\t\t\t\t\talpineData.viewMode = this.currentMode;\n\t\t\t\t\t}\n\t\t\t\t}, 100);\n\t\t\t}\n\n\t\t\t// Helper to create view mode toggle with persistence\n\t\t\tcreateViewModeToggle(initialMode) {\n\t\t\t\treturn {\n\t\t\t\t\tviewMode: this.currentMode || initialMode || DEFAULT_MODE,\n\t\t\t\t\tsetMode(mode) {\n\t\t\t\t\t\tthis.viewMode = mode;\n\t\t\t\t\t\twindow.viewModeManager?.saveViewMode(mode);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// Initialize view mode manager\n\t\tnew ViewModeManager();\n\n\t\t// Global helper function for creating view mode data\n\t\twindow.createViewModeData = function(initialMode) {\n\t\t\treturn window.viewModeManager?.createViewModeToggle(initialMode) || {\n\t\t\t\tviewMode: initialMode || DEFAULT_MODE,\n\t\t\t\tsetMode(mode) {\n\t\t\t\t\tthis.viewMode = mode;\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\n\t\t// CSS for smooth transitions (inject if not already present)\n\t\tif (!document.getElementById('view-mode-transitions')) {\n\t\t\tconst style = document.createElement('style');\n\t\t\tstyle.id = 'view-mode-transitions';\n\t\t\tstyle.textContent = `\n\t\t\t\t/* View Mode Transition Styles */\n\t\t\t\t.view-mode-transition {\n\t\t\t\t\ttransition: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);\n\t\t\t\t}\n\n\t\t\t\t.view-mode-fade-enter {\n\t\t\t\t\topacity: 0;\n\t\t\t\t\ttransform: translateY(10px);\n\t\t\t\t}\n\n\t\t\t\t.view-mode-fade-enter-active {\n\t\t\t\t\ttransition: opacity 0.3s ease-out, transform 0.3s ease-out;\n\t\t\t\t}\n\n\t\t\t\t.view-mode-fade-enter-to {\n\t\t\t\t\topacity: 1;\n\t\t\t\t\ttransform: translateY(0);\n\t\t\t\t}\n\n\t\t\t\t.view-mode-fade-leave {\n\t\t\t\t\topacity: 1;\n\t\t\t\t}\n\n\t\t\t\t.view-mode-fade-leave-active {\n\t\t\t\t\ttransition: opacity 0.2s ease-in;\n\t\t\t\t}\n\n\t\t\t\t.view-mode-fade-leave-to {\n\t\t\t\t\topacity: 0;\n\t\t\t\t}\n\n\t\t\t\t/* Split view enhancements */\n\t\t\t\t.split-view-container {\n\t\t\t\t\tdisplay: grid;\n\t\t\t\t\tgrid-template-columns: 1fr;\n\t\t\t\t\tgap: 1rem;\n\t\t\t\t\ttransition: grid-template-columns 0.3s ease;\n\t\t\t\t}\n\n\t\t\t\t@media (min-width: 1024px) {\n\t\t\t\t\t.split-view-container.split-active {\n\t\t\t\t\t\tgrid-template-columns: 1fr 1fr;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/* Map container height transitions */\n\t\t\t\t.map-container {\n\t\t\t\t\ttransition: height 0.3s ease, max-height 0.3s ease;\n\t\t\t\t}\n\n\t\t\t\t.map-container.full-height {\n\t\t\t\t\theight: calc(100vh - 200px);\n\t\t\t\t\tmax-height: none;\n\t\t\t\t}\n\n\t\t\t\t.map-container.split-height {\n\t\t\t\t\theight: 500px;\n\t\t\t\t\tmax-height: 500px;\n\t\t\t\t}\n\n\t\t\t\t/* Button active states */\n\t\t\t\t.view-mode-btn {\n\t\t\t\t\ttransition: all 0.2s ease;\n\t\t\t\t}\n\n\t\t\t\t.view-mode-btn.active {\n\t\t\t\t\tbackground: rgb(59 130 246);\n\t\t\t\t\tcolor: white;\n\t\t\t\t\ttransform: scale(1.05);\n\t\t\t\t}\n\n\t\t\t\t.view-mode-btn:not(.active):hover {\n\t\t\t\t\tbackground: rgba(59, 130, 246, 0.1);\n\t\t\t\t}\n\t\t\t`;\n\t\t\tdocument.head.appendChild(style);\n\t\t}\n\n\t\tconsole.log('View Mode Manager and transitions loaded');\n\t})();\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
