// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package scripts

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

// SessionManagerScript provides session management, URL parameter handling, and deep linking support
func SessionManagerScript() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script type=\"text/javascript\">\n\t// Session Manager - Handles session persistence, URL params, and deep linking\n\t(function() {\n\t\tconst SESSION_STORAGE_KEY = 'loci_session_data';\n\t\tconst SESSION_EXPIRY_HOURS = 24;\n\n\t\t// Session Manager Class\n\t\tclass SessionManager {\n\t\t\tconstructor() {\n\t\t\t\tthis.init();\n\t\t\t}\n\n\t\t\tinit() {\n\t\t\t\t// Extract URL parameters\n\t\t\t\tconst urlParams = this.getURLParams();\n\n\t\t\t\t// Load or create session\n\t\t\t\tlet sessionData = this.loadSession();\n\n\t\t\t\t// Merge URL params into session (URL params take precedence)\n\t\t\t\tif (urlParams.sessionId) {\n\t\t\t\t\tsessionData.sessionId = urlParams.sessionId;\n\t\t\t\t}\n\t\t\t\tif (urlParams.cityName) {\n\t\t\t\t\tsessionData.cityName = urlParams.cityName;\n\t\t\t\t}\n\t\t\t\tif (urlParams.cacheKey) {\n\t\t\t\t\tsessionData.cacheKey = urlParams.cacheKey;\n\t\t\t\t}\n\n\t\t\t\t// Check if session is expired\n\t\t\t\tif (this.isSessionExpired(sessionData)) {\n\t\t\t\t\tconsole.log('Session expired, creating new session');\n\t\t\t\t\tsessionData = this.createNewSession(urlParams);\n\t\t\t\t}\n\n\t\t\t\t// Save updated session\n\t\t\t\tthis.saveSession(sessionData);\n\n\t\t\t\t// Expose session data globally\n\t\t\t\twindow.lociSession = sessionData;\n\n\t\t\t\t// Add URL update helpers\n\t\t\t\twindow.updateSessionURL = this.updateURL.bind(this);\n\t\t\t\twindow.getDeepLink = this.getDeepLink.bind(this);\n\n\t\t\t\tconsole.log('Session Manager initialized', sessionData);\n\t\t\t}\n\n\t\t\tgetURLParams() {\n\t\t\t\tconst params = new URLSearchParams(window.location.search);\n\t\t\t\treturn {\n\t\t\t\t\tsessionId: params.get('sessionId') || params.get('session_id'),\n\t\t\t\t\tcityName: params.get('cityName') || params.get('city'),\n\t\t\t\t\tcacheKey: params.get('cacheKey') || params.get('cache_key'),\n\t\t\t\t\tdomain: params.get('domain'), // restaurants, hotels, activities, itinerary\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tloadSession() {\n\t\t\t\ttry {\n\t\t\t\t\tconst stored = sessionStorage.getItem(SESSION_STORAGE_KEY);\n\t\t\t\t\tif (stored) {\n\t\t\t\t\t\treturn JSON.parse(stored);\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error('Failed to load session from storage', e);\n\t\t\t\t}\n\n\t\t\t\t// Return empty session if nothing stored\n\t\t\t\treturn {\n\t\t\t\t\tsessionId: null,\n\t\t\t\t\tcityName: null,\n\t\t\t\t\tcacheKey: null,\n\t\t\t\t\tcreatedAt: Date.now(),\n\t\t\t\t\texpiresAt: Date.now() + (SESSION_EXPIRY_HOURS * 60 * 60 * 1000),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tsaveSession(sessionData) {\n\t\t\t\ttry {\n\t\t\t\t\tsessionStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(sessionData));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error('Failed to save session to storage', e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcreateNewSession(urlParams = {}) {\n\t\t\t\tconst now = Date.now();\n\t\t\t\treturn {\n\t\t\t\t\tsessionId: urlParams.sessionId || this.generateSessionId(),\n\t\t\t\t\tcityName: urlParams.cityName || null,\n\t\t\t\t\tcacheKey: urlParams.cacheKey || null,\n\t\t\t\t\tcreatedAt: now,\n\t\t\t\t\texpiresAt: now + (SESSION_EXPIRY_HOURS * 60 * 60 * 1000),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tisSessionExpired(sessionData) {\n\t\t\t\tif (!sessionData.expiresAt) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn Date.now() > sessionData.expiresAt;\n\t\t\t}\n\n\t\t\tgenerateSessionId() {\n\t\t\t\t// Generate a simple UUID-like session ID\n\t\t\t\treturn 'sess_' + Date.now() + '_' + Math.random().toString(36).substring(2, 15);\n\t\t\t}\n\n\t\t\tupdateURL(params) {\n\t\t\t\t// Update URL without page reload\n\t\t\t\tconst url = new URL(window.location);\n\n\t\t\t\tObject.keys(params).forEach(key => {\n\t\t\t\t\tif (params[key]) {\n\t\t\t\t\t\turl.searchParams.set(key, params[key]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\turl.searchParams.delete(key);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\twindow.history.pushState({}, '', url);\n\n\t\t\t\t// Update session storage\n\t\t\t\tconst sessionData = this.loadSession();\n\t\t\t\tif (params.sessionId) sessionData.sessionId = params.sessionId;\n\t\t\t\tif (params.cityName) sessionData.cityName = params.cityName;\n\t\t\t\tif (params.cacheKey) sessionData.cacheKey = params.cacheKey;\n\t\t\t\tthis.saveSession(sessionData);\n\t\t\t}\n\n\t\t\tgetDeepLink(domain, params = {}) {\n\t\t\t\t// Generate deep link URL for specific results\n\t\t\t\t// domain: 'restaurants', 'hotels', 'activities', 'itinerary'\n\t\t\t\tconst baseUrl = window.location.origin;\n\t\t\t\tconst sessionData = window.lociSession || this.loadSession();\n\n\t\t\t\tconst url = new URL(`${baseUrl}/${domain}`, window.location);\n\n\t\t\t\t// Add session parameters\n\t\t\t\tif (sessionData.sessionId) {\n\t\t\t\t\turl.searchParams.set('sessionId', sessionData.sessionId);\n\t\t\t\t}\n\t\t\t\tif (sessionData.cityName) {\n\t\t\t\t\turl.searchParams.set('cityName', sessionData.cityName);\n\t\t\t\t}\n\t\t\t\tif (sessionData.cacheKey) {\n\t\t\t\t\turl.searchParams.set('cacheKey', sessionData.cacheKey);\n\t\t\t\t}\n\n\t\t\t\t// Add custom parameters\n\t\t\t\tObject.keys(params).forEach(key => {\n\t\t\t\t\turl.searchParams.set(key, params[key]);\n\t\t\t\t});\n\n\t\t\t\treturn url.toString();\n\t\t\t}\n\n\t\t\tclearSession() {\n\t\t\t\tsessionStorage.removeItem(SESSION_STORAGE_KEY);\n\t\t\t\twindow.lociSession = null;\n\t\t\t}\n\t\t}\n\n\t\t// Initialize session manager\n\t\twindow.sessionManager = new SessionManager();\n\n\t\t// Helper functions for easy access\n\t\twindow.getSessionId = function() {\n\t\t\treturn window.lociSession?.sessionId || null;\n\t\t};\n\n\t\twindow.getCityName = function() {\n\t\t\treturn window.lociSession?.cityName || null;\n\t\t};\n\n\t\twindow.getCacheKey = function() {\n\t\t\treturn window.lociSession?.cacheKey || null;\n\t\t};\n\n\t\t// Share functionality with deep linking\n\t\twindow.shareResults = function(domain) {\n\t\t\tconst deepLink = window.getDeepLink(domain);\n\n\t\t\tif (navigator.share) {\n\t\t\t\tnavigator.share({\n\t\t\t\t\ttitle: `Check out these ${domain} in ${window.getCityName() || 'this city'}!`,\n\t\t\t\t\ttext: `I found some great ${domain} you might like.`,\n\t\t\t\t\turl: deepLink\n\t\t\t\t}).catch(err => {\n\t\t\t\t\tconsole.log('Share cancelled or failed', err);\n\t\t\t\t\tcopyToClipboard(deepLink);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tcopyToClipboard(deepLink);\n\t\t\t}\n\t\t};\n\n\t\tfunction copyToClipboard(text) {\n\t\t\tnavigator.clipboard.writeText(text).then(() => {\n\t\t\t\tshowNotification('Link copied to clipboard!', 'success');\n\t\t\t}).catch(err => {\n\t\t\t\tconsole.error('Failed to copy link', err);\n\t\t\t\tshowNotification('Failed to copy link', 'error');\n\t\t\t});\n\t\t}\n\n\t\tfunction showNotification(message, type = 'info') {\n\t\t\t// Simple notification (you can enhance this with better UI)\n\t\t\tconst notification = document.createElement('div');\n\t\t\tnotification.className = `fixed top-4 right-4 px-4 py-3 rounded-lg shadow-lg z-50 transition-opacity duration-300 ${\n\t\t\t\ttype === 'success' ? 'bg-green-500 text-white' :\n\t\t\t\ttype === 'error' ? 'bg-red-500 text-white' :\n\t\t\t\t'bg-blue-500 text-white'\n\t\t\t}`;\n\t\t\tnotification.textContent = message;\n\t\t\tdocument.body.appendChild(notification);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tnotification.style.opacity = '0';\n\t\t\t\tsetTimeout(() => notification.remove(), 300);\n\t\t\t}, 3000);\n\t\t}\n\n\t\tconsole.log('Session Manager loaded successfully');\n\t})();\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
