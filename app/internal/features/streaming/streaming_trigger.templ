package streaming

// StreamingTriggerPage shows a page that automatically triggers streaming when loaded
templ StreamingTriggerPage(query string, requestType string) {
    <div class="min-h-screen bg-gray-50 dark:bg-gray-900" x-data="streamingTrigger()">
        <div class="max-w-4xl mx-auto px-4 py-8">
            <!-- Header -->
            <div class="text-center mb-8">
                <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-4">
                    { getTriggerTitle(requestType) }
                </h1>
                <p class="text-gray-600 dark:text-gray-300">
                    Starting your search for: <span class="font-semibold text-blue-600 dark:text-blue-400">{ query }</span>
                </p>
            </div>

            <!-- Auto-trigger form (hidden, submits automatically) -->
            <form 
                id="streaming-trigger-form"
                hx-post="/api/generate"
                hx-target="#trigger-container"
                hx-swap="outerHTML"
                hx-ext="json-enc"
                style="display: none;"
            >
                <input type="hidden" name="query" value={ query } />
                <input type="hidden" name="request_type" value={ requestType } />
                <input type="hidden" name="city_name" value={ getCityFromQuery(query) } />
                <!-- Add more fields as needed -->
            </form>

            <!-- Container that will be replaced with streaming placeholder -->
            <div id="trigger-container">
                <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-8">
                    <div class="flex flex-col items-center">
                        <!-- Loading animation -->
                        <div class="relative mb-6">
                            <div class="w-16 h-16 border-4 border-blue-200 rounded-full animate-spin border-t-blue-600"></div>
                            <div class="absolute inset-0 flex items-center justify-center">
                                { getTriggerEmoji(requestType) }
                            </div>
                        </div>
                        
                        <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">
                            Preparing your search...
                        </h2>
                        <p class="text-gray-600 dark:text-gray-300 text-center mb-6">
                            This will only take a moment
                        </p>
                        
                        <!-- Manual trigger button (backup) -->
                        <button 
                            type="button"
                            @click="triggerStream()"
                            class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                        >
                            Start Search
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        function streamingTrigger() {
            return {
                init() {
                    // Auto-trigger after a short delay
                    setTimeout(() => {
                        this.triggerStream();
                    }, 1000);
                },
                
                triggerStream() {
                    // Trigger the HTMX form submission
                    document.getElementById('streaming-trigger-form').dispatchEvent(new Event('submit'));
                }
            };
        }
    </script>
}

// Utility functions
func getTriggerTitle(requestType string) string {
    switch requestType {
    case "itinerary":
        return "Creating Your Itinerary"
    case "hotels":
        return "Finding Hotels"
    case "restaurants":
        return "Searching Restaurants"
    case "activities":
        return "Discovering Activities"
    default:
        return "Processing Request"
    }
}

func getTriggerEmoji(requestType string) string {
    switch requestType {
    case "itinerary":
        return "üó∫Ô∏è"
    case "hotels":
        return "üè®"
    case "restaurants":
        return "üçΩÔ∏è"
    case "activities":
        return "üéØ"
    default:
        return "üîç"
    }
}

func getCityFromQuery(query string) string {
    // Simple extraction logic - you might want to make this more sophisticated
    // For now, just return empty string and let the backend handle it
    return ""
}