package streaming

import (
    "fmt"
    "github.com/FACorreiaa/go-templui/app/internal/models"
)

// StreamingItineraryCard renders a single POI card for itinerary streaming
templ StreamingItineraryCard(poi models.POIDetailedInfo, priority int, sessionID string) {
    <div 
        class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-4 mb-4 animate-slide-down"
        hx-swap-oob="beforeend:#content-area"
    >
        <div class="flex items-start gap-4">
            <!-- Priority Badge -->
            <div class="flex-shrink-0">
                <div class="w-8 h-8 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold">
                    { fmt.Sprintf("%d", priority) }
                </div>
            </div>
            
            <!-- Content -->
            <div class="flex-1">
                <div class="flex items-start justify-between mb-2">
                    <h3 class="font-semibold text-gray-900 dark:text-white text-lg">
                        { poi.Name }
                    </h3>
                    if poi.Rating > 0 {
                        <div class="flex items-center gap-1">
                            <svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                            </svg>
                            <span class="text-sm text-gray-600 dark:text-gray-400">{ fmt.Sprintf("%.1f", poi.Rating) }</span>
                        </div>
                    }
                </div>
                
                if poi.Category != "" {
                    <span class="inline-block px-2 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-xs rounded-full mb-2">
                        { poi.Category }
                    </span>
                }
                
                if poi.Description != "" {
                    <p class="text-gray-600 dark:text-gray-300 text-sm mb-3 line-clamp-3">
                        { poi.Description }
                    </p>
                }
                
                <div class="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
                    <div class="flex items-center gap-4">
                        if poi.TimeToSpend != "" {
                            <div class="flex items-center gap-1">
                                <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                <span>{ poi.TimeToSpend }</span>
                            </div>
                        }
                        if poi.Budget != "" {
                            <div class="flex items-center gap-1">
                                <span>{ poi.Budget }</span>
                            </div>
                        }
                        if poi.Address != "" {
                            <div class="flex items-center gap-1">
                                <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                                </svg>
                                <span class="truncate max-w-40">{ poi.Address }</span>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

// StreamingHotelCard renders a single hotel card for hotel streaming
templ StreamingHotelCard(hotel models.POIDetailedInfo, sessionID string) {
    <div 
        class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden mb-4 animate-slide-down"
        hx-swap-oob="beforeend:#content-area"
    >
        <!-- Hotel Image -->
        if len(hotel.Images) > 0 && hotel.Images[0] != "" {
            <div class="aspect-video w-full">
                <img 
                    src={ hotel.Images[0] }
                    alt={ hotel.Name }
                    class="w-full h-full object-cover"
                    loading="lazy"
                />
            </div>
        } else {
            <div class="aspect-video w-full bg-gradient-to-r from-blue-400 to-purple-500 flex items-center justify-center">
                <svg class="w-12 h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                </svg>
            </div>
        }
        
        <div class="p-6">
            <div class="flex items-start justify-between mb-3">
                <h3 class="font-semibold text-gray-900 dark:text-white text-xl">
                    { hotel.Name }
                </h3>
                if hotel.Rating > 0 {
                    <div class="flex items-center gap-1 bg-green-100 dark:bg-green-900 px-2 py-1 rounded-full">
                        <svg class="w-4 h-4 text-green-600 dark:text-green-400" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                        </svg>
                        <span class="text-sm font-medium text-green-800 dark:text-green-200">{ fmt.Sprintf("%.1f", hotel.Rating) }</span>
                    </div>
                }
            </div>
            
            if hotel.Description != "" {
                <p class="text-gray-600 dark:text-gray-300 mb-4 line-clamp-3">
                    { hotel.Description }
                </p>
            }
            
            <div class="flex flex-wrap gap-2 mb-4">
                for _, tag := range hotel.Tags[:minInt(4, len(hotel.Tags))] {
                    <span class="px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 text-xs rounded-full">
                        { tag }
                    </span>
                }
            </div>
            
            <div class="flex items-center justify-between">
                <div class="flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400">
                    if hotel.Address != "" {
                        <div class="flex items-center gap-1">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                            </svg>
                            <span class="truncate max-w-48">{ hotel.Address }</span>
                        </div>
                    }
                    if hotel.Budget != "" {
                        <div class="flex items-center gap-1">
                            <span class="font-medium">{ hotel.Budget }</span>
                        </div>
                    }
                </div>
                
                <div class="flex gap-2">
                    if hotel.Website != "" {
                        <a 
                            href={ hotel.Website } 
                            target="_blank" 
                            class="px-3 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 transition-colors"
                        >
                            Book Now
                        </a>
                    }
                    <button class="px-3 py-2 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 text-sm rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
                        Save
                    </button>
                </div>
            </div>
        </div>
    </div>
}

// StreamingRestaurantCard renders a single restaurant card for restaurant streaming
templ StreamingRestaurantCard(restaurant models.POIDetailedInfo, sessionID string) {
    <div 
        class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-4 mb-4 animate-slide-down"
        hx-swap-oob="beforeend:#content-area"
    >
        <div class="flex gap-4">
            <!-- Restaurant Image/Icon -->
            <div class="flex-shrink-0">
                if len(restaurant.Images) > 0 && restaurant.Images[0] != "" {
                    <img 
                        src={ restaurant.Images[0] }
                        alt={ restaurant.Name }
                        class="w-16 h-16 rounded-lg object-cover"
                        loading="lazy"
                    />
                } else {
                    <div class="w-16 h-16 bg-gradient-to-r from-orange-400 to-red-500 rounded-lg flex items-center justify-center">
                        <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                    </div>
                }
            </div>
            
            <!-- Content -->
            <div class="flex-1">
                <div class="flex items-start justify-between mb-2">
                    <h3 class="font-semibold text-gray-900 dark:text-white text-lg">
                        { restaurant.Name }
                    </h3>
                    <div class="flex items-center gap-2">
                        if restaurant.Rating > 0 {
                            <div class="flex items-center gap-1">
                                <svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                                </svg>
                                <span class="text-sm font-medium">{ fmt.Sprintf("%.1f", restaurant.Rating) }</span>
                            </div>
                        }
                        if restaurant.Budget != "" {
                            <span class="text-sm font-medium text-green-600 dark:text-green-400">
                                { restaurant.Budget }
                            </span>
                        }
                    </div>
                </div>
                
                if restaurant.Category != "" {
                    <span class="inline-block px-2 py-1 bg-orange-100 dark:bg-orange-900 text-orange-800 dark:text-orange-200 text-xs rounded-full mb-2">
                        { restaurant.Category }
                    </span>
                }
                
                if restaurant.Description != "" {
                    <p class="text-gray-600 dark:text-gray-300 text-sm mb-3 line-clamp-2">
                        { restaurant.Description }
                    </p>
                }
                
                <div class="flex items-center justify-between">
                    <div class="flex items-center gap-4 text-xs text-gray-500 dark:text-gray-400">
                        if restaurant.Address != "" {
                            <div class="flex items-center gap-1">
                                <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                                </svg>
                                <span class="truncate max-w-32">{ restaurant.Address }</span>
                            </div>
                        }
                    </div>
                    
                    <div class="flex gap-2">
                        if restaurant.Website != "" {
                            <a 
                                href={ restaurant.Website } 
                                target="_blank" 
                                class="px-3 py-1.5 bg-orange-600 text-white text-xs rounded-md hover:bg-orange-700 transition-colors"
                            >
                                Menu
                            </a>
                        }
                        <button class="px-3 py-1.5 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 text-xs rounded-md hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
                            Save
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

// StreamingActivityCard renders a single activity card for activities streaming
templ StreamingActivityCard(activity models.POIDetailedInfo, sessionID string) {
    <div 
        class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden mb-4 animate-slide-down"
        hx-swap-oob="beforeend:#content-area"
    >
        <!-- Activity Image -->
        if len(activity.Images) > 0 && activity.Images[0] != "" {
            <div class="aspect-[4/3] w-full">
                <img 
                    src={ activity.Images[0] }
                    alt={ activity.Name }
                    class="w-full h-full object-cover"
                    loading="lazy"
                />
            </div>
        } else {
            <div class="aspect-[4/3] w-full bg-gradient-to-r from-purple-400 to-pink-500 flex items-center justify-center">
                <svg class="w-12 h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                </svg>
            </div>
        }
        
        <div class="p-4">
            <div class="flex items-start justify-between mb-3">
                <h3 class="font-semibold text-gray-900 dark:text-white text-lg">
                    { activity.Name }
                </h3>
                if activity.Rating > 0 {
                    <div class="flex items-center gap-1">
                        <svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                        </svg>
                        <span class="text-sm font-medium">{ fmt.Sprintf("%.1f", activity.Rating) }</span>
                    </div>
                }
            </div>
            
            <div class="flex items-center gap-2 mb-3">
                if activity.Category != "" {
                    <span class="px-2 py-1 bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200 text-xs rounded-full">
                        { activity.Category }
                    </span>
                }
                if activity.TimeToSpend != "" {
                    <span class="px-2 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-xs rounded-full">
                        { activity.TimeToSpend }
                    </span>
                }
                if activity.Budget != "" {
                    <span class="px-2 py-1 bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 text-xs rounded-full">
                        { activity.Budget }
                    </span>
                }
            </div>
            
            if activity.Description != "" {
                <p class="text-gray-600 dark:text-gray-300 text-sm mb-4 line-clamp-3">
                    { activity.Description }
                </p>
            }
            
            <div class="flex items-center justify-between">
                if activity.Address != "" {
                    <div class="flex items-center gap-1 text-xs text-gray-500 dark:text-gray-400">
                        <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                        </svg>
                        <span class="truncate max-w-40">{ activity.Address }</span>
                    </div>
                }
                
                <div class="flex gap-2">
                    <button class="px-3 py-2 bg-purple-600 text-white text-sm rounded-lg hover:bg-purple-700 transition-colors">
                        Add to Plan
                    </button>
                    <button class="px-3 py-2 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 text-sm rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
                        Details
                    </button>
                </div>
            </div>
        </div>
    </div>
}

// StreamingCityInfo renders city information at the start of streaming
templ StreamingCityInfo(cityData models.GeneralCityData, sessionID string) {
    <div 
        class="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-800 dark:to-gray-700 rounded-xl border border-blue-100 dark:border-gray-600 p-6 mb-6 animate-slide-down"
        hx-swap-oob="afterbegin:#content-area"
    >
        <div class="flex items-start gap-4">
            <div class="w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center flex-shrink-0">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                </svg>
            </div>
            <div class="flex-1">
                <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-2">About { cityData.City }</h2>
                if cityData.Description != "" {
                    <p class="text-gray-700 dark:text-gray-300 leading-relaxed mb-4">{ cityData.Description }</p>
                }
                
                <!-- Hide loading indicator when city info arrives -->
                <div hx-swap-oob="true" id="loading-indicator"></div>
                
                <div class="grid grid-cols-2 sm:grid-cols-4 gap-4 text-sm">
                    if cityData.Country != "" {
                        <div class="flex items-center gap-2">
                            <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            <span class="text-gray-600 dark:text-gray-400">{ cityData.Country }</span>
                        </div>
                    }
                    if cityData.Timezone != "" {
                        <div class="flex items-center gap-2">
                            <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            <span class="text-gray-600 dark:text-gray-400">{ cityData.Timezone }</span>
                        </div>
                    }
                    if cityData.Language != "" {
                        <div class="flex items-center gap-2">
                            <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129"></path>
                            </svg>
                            <span class="text-gray-600 dark:text-gray-400">{ cityData.Language }</span>
                        </div>
                    }
                    if cityData.Population != "" {
                        <div class="flex items-center gap-2">
                            <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
                            </svg>
                            <span class="text-gray-600 dark:text-gray-400">Pop: { cityData.Population }</span>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

// Helper function
func minInt(a, b int) int {
    if a < b {
        return a
    }
    return b
}