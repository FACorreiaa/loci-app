package results

import (
	"fmt"
)

// FilterBadges displays active filter badges with removal functionality
templ FilterBadges(domain string, cacheKey string, sessionID string) {
	<div
		id="filter-badges-container"
		class="flex flex-wrap gap-2 pt-4 border-t border-gray-200 dark:border-gray-700 min-h-[40px]"
		x-data="filterBadges()"
		x-init="init()"
	>
		<template x-if="activeFilters.length > 0">
			<div class="flex flex-wrap gap-2 w-full">
				<template x-for="filter in activeFilters" :key="filter.id">
					<div class="inline-flex items-center gap-2 px-3 py-1.5 bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 rounded-full text-sm font-medium border border-blue-200 dark:border-blue-800">
						<span x-text="filter.label"></span>
						<button
							type="button"
							@click={ fmt.Sprintf("removeFilter('%s', '%s', '%s', filter)", domain, cacheKey, sessionID) }
							class="hover:text-blue-900 dark:hover:text-blue-100 transition-colors"
						>
							<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
							</svg>
						</button>
					</div>
				</template>

				<!-- Clear All button when filters are active -->
				<button
					type="button"
					@click={ fmt.Sprintf("clearAllFilters('%s', '%s', '%s')", domain, cacheKey, sessionID) }
					class="inline-flex items-center gap-1 px-3 py-1.5 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 text-sm font-medium transition-colors"
				>
					<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
					</svg>
					Clear all
				</button>
			</div>
		</template>

		<template x-if="activeFilters.length === 0">
			<div class="text-sm text-gray-500 dark:text-gray-400 italic">
				No filters applied
			</div>
		</template>
	</div>
}

script FilterBadgesScript() {
	function filterBadges() {
		return {
			activeFilters: [],

			init() {
				// Listen for form changes to update badges
				this.updateBadges();

				// Listen for filter changes
				document.addEventListener('change', (e) => {
					if (e.target.closest('form[hx-get*="/api/filter/"]')) {
						setTimeout(() => this.updateBadges(), 100);
					}
				});

				// Listen for filter clears
				document.addEventListener('htmx:afterSwap', (e) => {
					if (e.detail.target.id === 'results-list-container') {
						setTimeout(() => this.updateBadges(), 100);
					}
				});
			},

			updateBadges() {
				const form = document.querySelector('form[hx-get*="/api/filter/"]');
				if (!form) return;

				const filters = [];

				// Category filters
				const categoryCheckboxes = form.querySelectorAll('input[name="categories[]"]:checked');
				categoryCheckboxes.forEach(cb => {
					filters.push({
						id: 'category-' + cb.value,
						type: 'category',
						value: cb.value,
						label: this.getLabelForCheckbox(cb)
					});
				});

				// Price range filters
				const priceCheckboxes = form.querySelectorAll('input[name="priceRange[]"]:checked');
				priceCheckboxes.forEach(cb => {
					filters.push({
						id: 'price-' + cb.value,
						type: 'price',
						value: cb.value,
						label: this.getLabelForCheckbox(cb)
					});
				});

				// Rating filter
				const ratingSelect = form.querySelector('select[name="rating"]');
				if (ratingSelect && ratingSelect.value) {
					filters.push({
						id: 'rating-' + ratingSelect.value,
						type: 'rating',
						value: ratingSelect.value,
						label: ratingSelect.options[ratingSelect.selectedIndex].text
					});
				}

				// Feature filters
				const featureCheckboxes = form.querySelectorAll('input[name="features[]"]:checked');
				featureCheckboxes.forEach(cb => {
					filters.push({
						id: 'feature-' + cb.value,
						type: 'feature',
						value: cb.value,
						label: this.getLabelForCheckbox(cb)
					});
				});

				this.activeFilters = filters;
			},

			getLabelForCheckbox(checkbox) {
				const label = checkbox.closest('label');
				if (label) {
					const labelText = label.querySelector('span');
					return labelText ? labelText.textContent.trim() : checkbox.value;
				}
				return checkbox.value;
			},

			removeFilter(domain, cacheKey, sessionID, filter) {
				const form = document.querySelector('form[hx-get*="/api/filter/"]');
				if (!form) return;

				// Uncheck the corresponding input
				if (filter.type === 'category') {
					const checkbox = form.querySelector(`input[name="categories[]"][value="${filter.value}"]`);
					if (checkbox) checkbox.checked = false;
				} else if (filter.type === 'price') {
					const checkbox = form.querySelector(`input[name="priceRange[]"][value="${filter.value}"]`);
					if (checkbox) checkbox.checked = false;
				} else if (filter.type === 'rating') {
					const select = form.querySelector('select[name="rating"]');
					if (select) select.value = '';
				} else if (filter.type === 'feature') {
					const checkbox = form.querySelector(`input[name="features[]"][value="${filter.value}"]`);
					if (checkbox) checkbox.checked = false;
				}

				// Trigger form submission
				htmx.trigger(form, 'change');
			},

			clearAllFilters(domain, cacheKey, sessionID) {
				const form = document.querySelector('form[hx-get*="/api/filter/"]');
				if (!form) return;

				// Uncheck all checkboxes
				form.querySelectorAll('input[type="checkbox"]:checked').forEach(cb => {
					cb.checked = false;
				});

				// Reset rating select
				const ratingSelect = form.querySelector('select[name="rating"]');
				if (ratingSelect) ratingSelect.value = '';

				// Trigger clear via HTMX
				htmx.ajax('GET', `/api/filter/${domain}/clear?cacheKey=${cacheKey}&sessionId=${sessionID}`, {
					target: '#results-list-container',
					swap: 'innerHTML'
				});
			}
		};
	}

	// Make function globally accessible
	window.filterBadges = filterBadges;
}
