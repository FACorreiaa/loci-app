package results

import (
	"fmt"
	"github.com/FACorreiaa/go-templui/app/internal/models"
)

templ ActivitiesResults(cityData models.GeneralCityData, activities []models.POIDetailedInfo, compact bool, showToggle bool, initialLimit int, favorites []string) {
	<div class="min-h-screen bg-gray-50 dark:bg-gray-900 activities-results" id="activities-container" x-data="activitiesPage()">
		<!-- Mobile-First Enhanced Header -->
		<div class="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 sticky top-0 z-30">
			<div class="px-4 py-3 sm:px-6">
				<!-- Main Header Content -->
				<div class="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
					<div class="flex-1 min-w-0">
						<div class="flex items-center gap-3">
							<div class="w-10 h-10 bg-gradient-to-br from-purple-500 to-blue-600 rounded-lg flex items-center justify-center text-white text-xl flex-shrink-0">
								ðŸŽ¯
							</div>
							<div class="flex-1 min-w-0">
								<h1 class="text-lg font-bold text-gray-900 dark:text-white sm:text-xl truncate">
									Activities in { cityData.City }
								</h1>
								<!-- City Location Info -->
								if cityData.City != "" {
									<div class="flex items-center gap-2 text-sm text-gray-700 dark:text-gray-300 mt-1 mb-2">
										<svg class="w-4 h-4 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
										</svg>
										<span class="font-medium">{ cityData.City }{ getActivityStateProvince(cityData.StateProvince) }, { cityData.Country }</span>
										if cityData.Population != "" {
											<span class="text-xs bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded-full">
												Pop: { cityData.Population }
											</span>
										}
									</div>
								}
								<div class="flex flex-wrap items-center gap-2 text-xs text-gray-600 dark:text-gray-300 mt-1">
									<div class="flex items-center gap-1">
										<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10l-2 1m0 0l-2-1m2 1v2.5M20 7l-2 1m2-1l-2-1m2 1v2.5M14 4l-2-1-2 1M4 7l2-1M4 7l2 1M4 7v2.5M12 21l-2-1m2 1l2-1m-2 1v-2.5M6 18l-2-1v-2.5M18 18l2-1v-2.5"></path>
										</svg>
										<span>{ fmt.Sprintf("%d", len(activities)) } activities found</span>
									</div>
								</div>
							</div>
						</div>
					</div>

					<!-- Desktop Actions -->
					<div class="hidden sm:flex items-center gap-2">
						<button @click="showChat = true"
								class="flex items-center gap-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors text-sm font-medium">
							<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-3.582 8-8 8a8.013 8.013 0 01-7.93-6.94c-.42-.51-.92-.92-1.43-1.25-.63-.41-.63-1.33 0-1.74.51-.33 1.01-.74 1.43-1.25A8.013 8.013 0 0113 4c4.418 0 8 3.582 8 8z"></path>
							</svg>
							Find More Activities
						</button>
						<button @click="shareResults()"
								class="p-2 text-gray-700 hover:bg-gray-100 rounded-lg transition-colors">
							<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
							</svg>
						</button>
					</div>
				</div>

				<!-- View Mode Toggle -->
				<div class="mt-3 pt-3 border-t border-gray-200 dark:border-gray-700">
					<div class="flex bg-gray-100 dark:bg-gray-700 rounded-lg p-1">
						<button @click="viewMode = 'list'"
								:class="viewMode === 'list' ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm' : 'text-gray-600 dark:text-gray-300'"
								class="flex-1 px-3 py-2 rounded text-sm font-medium transition-colors">
							<div class="flex items-center justify-center gap-1">
								<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
								</svg>
								<span class="hidden sm:inline">List</span>
							</div>
						</button>
						<button @click="viewMode = 'map'"
								:class="viewMode === 'map' ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm' : 'text-gray-600 dark:text-gray-300'"
								class="flex-1 px-3 py-2 rounded text-sm font-medium transition-colors">
							<div class="flex items-center justify-center gap-1">
								<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7"></path>
								</svg>
								<span class="hidden sm:inline">Map</span>
							</div>
						</button>
						<button @click="viewMode = 'grid'"
								:class="viewMode === 'grid' ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm' : 'text-gray-600 dark:text-gray-300'"
								class="flex-1 px-3 py-2 rounded text-sm font-medium transition-colors">
							<div class="flex items-center justify-center gap-1">
								<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 5a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM14 5a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1V5zM4 15a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1H5a1 1 0 01-1-1v-4zM14 15a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1v-4z"></path>
								</svg>
								<span class="hidden sm:inline">Grid</span>
							</div>
						</button>
					</div>
				</div>
			</div>
		</div>

		<!-- Main Content Area -->
		<div class="px-4 py-4 sm:px-6">
			<!-- List View Layout -->
			<div x-show="viewMode === 'list'" class="flex gap-6">
				<!-- Main Content (Left) -->
				<div class="flex-1">
					<!-- About Section -->
					if cityData.City != "" && cityData.Description != "" {
						<section class="mb-8">
							<h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">About { cityData.City }</h2>
							<div class="bg-white dark:bg-gray-800 rounded-lg p-6">
								<p class="text-gray-700 dark:text-gray-300 leading-relaxed mb-6">{ cityData.Description }</p>
								<div class="grid grid-cols-2 gap-6 text-sm">
									<div>
										if cityData.Population != "" {
											<div class="mb-3">
												<span class="font-medium text-gray-900 dark:text-white">Population:</span>
												<br/>
												<span class="text-gray-600 dark:text-gray-300">{ cityData.Population }</span>
											</div>
										}
										if cityData.Language != "" {
											<div class="mb-3">
												<span class="font-medium text-gray-900 dark:text-white">Language:</span>
												<br/>
												<span class="text-gray-600 dark:text-gray-300">{ cityData.Language }</span>
											</div>
										}
									</div>
									<div>
										if cityData.Timezone != "" {
											<div class="mb-3">
												<span class="font-medium text-gray-900 dark:text-white">Timezone:</span>
												<br/>
												<span class="text-gray-600 dark:text-gray-300">{ cityData.Timezone }</span>
											</div>
										}
										if cityData.Area != "" {
											<div class="mb-3">
												<span class="font-medium text-gray-900 dark:text-white">Climate:</span>
												<br/>
												<span class="text-gray-600 dark:text-gray-300">{ cityData.Area }</span>
											</div>
										}
									</div>
								</div>
							</div>
						</section>
					}

					<!-- All Activities Section -->
					if len(activities) > 0 {
						<section class="mb-8">
							<h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">All Activities in { cityData.City }</h2>
							<div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4">
								for _, activity := range activities {
									@ActivityListCard(activity)
								}
							</div>
							if len(activities) > 6 {
								<div class="text-center mt-4">
									<button class="text-gray-600 hover:text-gray-800 text-sm">
										And { fmt.Sprintf("%d", len(activities) - 6) } more activities to discover...
									</button>
								</div>
							}
						</section>
					}
				</div>

				<!-- Quick Info Sidebar (Right) -->
				<div class="w-64 flex-shrink-0">
					<div class="bg-white dark:bg-gray-800 rounded-lg p-4 sticky top-4">
						<h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Quick Info</h3>
						<div class="space-y-3 text-sm">
							<div class="flex justify-between">
								<span class="text-gray-600 dark:text-gray-300">Total Activities:</span>
								<span class="font-medium text-gray-900 dark:text-white">{ len(activities) }</span>
							</div>
							<div class="flex justify-between">
								<span class="text-gray-600 dark:text-gray-300">Categories:</span>
								<span class="font-medium text-gray-900 dark:text-white">{ getUniqueActivityCategories(activities) }</span>
							</div>
							if cityData.Area != "" {
								<div class="flex justify-between">
									<span class="text-gray-600 dark:text-gray-300">Climate:</span>
									<span class="font-medium text-gray-900 dark:text-white text-right text-xs">{ cityData.Area }</span>
								</div>
							}
						</div>
					</div>
				</div>
			</div>

			<!-- Grid View Layout -->
			<div x-show="viewMode === 'grid'" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
				for _, activity := range activities {
					@ActivityGridCard(activity)
				}
			</div>

			<!-- Map View (Full screen map) -->
			<div x-show="viewMode === 'map'">
				<div class="h-[calc(100vh-200px)]">
					@ActivitiesMapContainer(activities, &cityData, "session-placeholder")
				</div>
			</div>
		</div>
	</div>

	<script>
		function activitiesPage() {
			return {
				viewMode: 'list',
				showChat: false,
				selectedActivity: null,
				searchQuery: '',
				selectedCategory: '',
				sortBy: 'name',

				init() {
					// Initialize the component
				},

				setViewMode(mode) {
					this.viewMode = mode;
				},

				selectActivity(activity) {
					this.selectedActivity = activity;
				},

				closeModal() {
					this.selectedActivity = null;
				}
			}
		}

		// Make function available globally
		window.activitiesPage = activitiesPage;
	</script>
}

// ActivityListCard for the list view section
templ ActivityListCard(activity models.POIDetailedInfo) {
	<div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4 hover:shadow-md transition-shadow">
		<div class="flex items-start justify-between mb-3">
			<h4 class="font-semibold text-gray-900 dark:text-white line-clamp-1">{ activity.Name }</h4>
			if activity.Rating > 0 {
				<div class="flex items-center gap-1 flex-shrink-0">
					<svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
						<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
					</svg>
					<span class="text-sm font-medium text-gray-700 dark:text-gray-300">{ formatActivityRating(activity.Rating) }</span>
				</div>
			}
		</div>
		if activity.Category != "" {
			<span class="inline-block px-2 py-1 text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300 rounded-full mb-2">
				{ activity.Category }
			</span>
		}
		<p class="text-sm text-gray-600 dark:text-gray-300 line-clamp-3 mb-3">{ activity.Description }</p>
		<div class="flex items-center justify-between">
			<div class="flex items-center gap-4 text-xs text-gray-500 dark:text-gray-400">
				if activity.Address != "" {
					<span>{ activity.Address }</span>
				}
				if activity.PriceLevel != "" {
					<span class="text-purple-600 dark:text-purple-400">{ activity.PriceLevel }</span>
				}
			</div>
			<button class="text-purple-600 hover:text-purple-700 text-sm font-medium">
				View Details
			</button>
		</div>
	</div>
}

// ActivityGridCard for the grid view
templ ActivityGridCard(activity models.POIDetailedInfo) {
	<div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden hover:shadow-lg transition-shadow">
		<div class="p-4">
			<div class="flex items-start justify-between mb-3">
				<h4 class="font-semibold text-gray-900 dark:text-white line-clamp-1">{ activity.Name }</h4>
				if activity.Rating > 0 {
					<div class="flex items-center gap-1 flex-shrink-0">
						<svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
							<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
						</svg>
						<span class="text-sm font-medium text-gray-700 dark:text-gray-300">{ formatActivityRating(activity.Rating) }</span>
					</div>
				}
			</div>
			if activity.Category != "" {
				<span class="inline-block px-2 py-1 text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300 rounded-full mb-2">
					{ activity.Category }
				</span>
			}
			<p class="text-sm text-gray-600 dark:text-gray-300 line-clamp-2 mb-3">{ activity.Description }</p>
			<div class="flex items-center justify-between mt-auto">
				if activity.PriceLevel != "" {
					<span class="text-xs text-purple-600 dark:text-purple-400">{ activity.PriceLevel }</span>
				}
				<div class="flex gap-2">
					<button class="text-purple-600 hover:text-purple-700 text-sm font-medium">
						View Details
					</button>
				</div>
			</div>
		</div>
	</div>
}

// ActivitiesMapContainer for map view
templ ActivitiesMapContainer(activities []models.POIDetailedInfo, cityData *models.GeneralCityData, sessionId string) {
	<div class="w-full h-full bg-gray-100 dark:bg-gray-800 rounded-lg flex items-center justify-center">
		<div class="text-center">
			<svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7"></path>
			</svg>
			<p class="text-gray-500 dark:text-gray-400">Activity map view coming soon</p>
			if cityData != nil {
				<p class="text-sm text-gray-400 dark:text-gray-500 mt-2">Showing { fmt.Sprintf("%d", len(activities)) } activities in { cityData.City }</p>
			} else {
				<p class="text-sm text-gray-400 dark:text-gray-500 mt-2">Showing { fmt.Sprintf("%d", len(activities)) } activities in this area</p>
			}
		</div>
	</div>
}

// Utility functions
func formatActivityRating(rating float64) string {
	if rating == float64(int(rating)) {
		return fmt.Sprintf("%.0f", rating)
	}
	return fmt.Sprintf("%.1f", rating)
}

func getActivityStateProvince(province string) string {
	if province != "" {
		return ", " + province
	}
	return ""
}

func getUniqueActivityCategories(activities []models.POIDetailedInfo) string {
	categoryMap := make(map[string]bool)
	for _, activity := range activities {
		if activity.Category != "" {
			categoryMap[activity.Category] = true
		}
	}
	return fmt.Sprintf("%d", len(categoryMap))
}

func activitiesPage() interface{} {
	// This would be implemented in a separate Alpine.js state file
	return map[string]interface{}{
		"viewMode": "list",
		"showChat": false,
	}
}
