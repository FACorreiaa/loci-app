package results

// StreamingData represents the parsed streaming data from SSE
type StreamingData struct {
	CityData          *CityData        `json:"general_city_data,omitempty"`
	PointsOfInterest  []POIStreamData  `json:"points_of_interest,omitempty"`
	ItineraryResponse *ItineraryStream `json:"itinerary_response,omitempty"`
	SessionID         string           `json:"session_id,omitempty"`
}

// CityData represents city information from streaming data
type CityData struct {
	City            string  `json:"city"`
	Country         string  `json:"country"`
	StateProvince   string  `json:"state_province"`
	Description     string  `json:"description"`
	CenterLatitude  float64 `json:"center_latitude"`
	CenterLongitude float64 `json:"center_longitude"`
	Population      string  `json:"population"`
	Area            string  `json:"area"`
	Timezone        string  `json:"timezone"`
	Language        string  `json:"language"`
	Weather         string  `json:"weather"`
	Attractions     string  `json:"attractions"`
	History         string  `json:"history"`
}

// POIStreamData represents POI data from streaming
type POIStreamData struct {
	ID             string  `json:"id,omitempty"`
	Name           string  `json:"name"`
	Latitude       float64 `json:"latitude"`
	Longitude      float64 `json:"longitude"`
	Category       string  `json:"category"`
	DescriptionPOI string  `json:"description_poi"`
	Address        string  `json:"address"`
	Website        string  `json:"website"`
	OpeningHours   string  `json:"opening_hours"`
	Distance       float64 `json:"distance,omitempty"`
}

// ItineraryStream represents the itinerary response part
type ItineraryStream struct {
	ItineraryName      string          `json:"itinerary_name"`
	OverallDescription string          `json:"overall_description"`
	PointsOfInterest   []POIStreamData `json:"points_of_interest"`
}

templ ItineraryResultsStream(sessionID, cityName, originalQuery string) {
	<div class="min-h-screen bg-gray-50 dark:bg-gray-900" id="itinerary-results-container">
		<!-- Header -->
		<div class="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 py-3 sm:px-6 sm:py-4">
			<div class="max-w-7xl mx-auto">
				<div class="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
					<div>
						<h1 class="text-xl font-bold text-gray-900 dark:text-white sm:text-2xl" id="itinerary-title">
							Planning your { cityName } adventure...
						</h1>
						<p class="text-sm text-gray-600 dark:text-gray-300 mt-1 sm:text-base" id="itinerary-description">
							AI is creating your personalized itinerary
						</p>
					</div>
					<div class="flex flex-col gap-2 sm:flex-row sm:items-center sm:gap-3">
						<!-- View Mode Toggle - Initially Hidden -->
						<div id="view-mode-controls" class="hidden flex bg-gray-100 rounded-lg p-1 w-full sm:w-auto">
							<button id="view-mode-map" class="flex-1 px-3 py-1 rounded text-sm font-medium transition-colors sm:flex-initial text-gray-600 hover:bg-white" onclick="setViewMode('map')" title="Show only map">
								Map
							</button>
							<button id="view-mode-split" class="flex-1 px-3 py-1 rounded text-sm font-medium transition-colors sm:flex-initial bg-white text-gray-900 shadow-sm" onclick="setViewMode('split')" title="Split view: Map + Cards">
								Split
							</button>
							<button id="view-mode-list" class="flex-1 px-3 py-1 rounded text-sm font-medium transition-colors sm:flex-initial text-gray-600 hover:bg-white" onclick="setViewMode('list')" title="Show only cards">
								List
							</button>
						</div>
						<!-- Action Buttons - Initially Hidden -->
						<div id="action-buttons" class="hidden flex flex-col gap-2 sm:flex-row sm:gap-3">
							<button id="continue-planning-btn" class="hidden flex items-center justify-center gap-2 px-4 py-2 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-lg hover:from-blue-700 hover:to-blue-800 transition-all shadow-sm text-sm font-medium">
								<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-3.582 8-8 8a8.025 8.025 0 01-2.287-.32c-1.183.45-2.477.32-3.563-.207a3.892 3.892 0 01-2.563-3.563c-.527-1.086-.657-2.38-.207-3.563A8.025 8.025 0 014 12C4 7.582 7.582 4 12 4s8 3.582 8 8z"></path>
								</svg>
								Continue Planning
							</button>
						</div>
					</div>
				</div>
			</div>
		</div>
		<!-- Streaming Status -->
		<div id="streaming-status" class="bg-gradient-to-r from-blue-50 to-purple-50 dark:from-gray-800 dark:to-gray-700 border-b border-blue-200 dark:border-gray-600">
			<div class="max-w-7xl mx-auto px-4 py-6 sm:px-6">
				<div class="flex items-center gap-4">
					<div class="w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg flex items-center justify-center">
						<svg class="w-5 h-5 text-white animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"></path>
						</svg>
					</div>
					<div class="flex-1">
						<h3 class="font-semibold text-blue-800 dark:text-blue-200 mb-2">AI is creating your personalized itinerary...</h3>
						<div class="space-y-2">
							<div class="flex items-center gap-3 text-blue-700 dark:text-blue-300">
								<div id="loading-spinner" class="w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
								<span id="status-text" class="text-sm">Processing your request...</span>
							</div>
							<div id="streaming-progress" class="text-sm text-blue-600 dark:text-blue-400 space-y-1">
								<div class="text-xs opacity-75">Starting AI analysis...</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<!-- City Information - Initially Hidden -->
		<div id="city-info-section" class="hidden bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
			<div class="max-w-7xl mx-auto px-4 py-6 sm:px-6">
				<div class="grid gap-6 lg:grid-cols-3">
					<!-- City Information -->
					<div class="lg:col-span-2">
						<div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
							<h2 id="city-title" class="text-xl font-bold text-gray-900 dark:text-white mb-3 flex items-center gap-2">
								<svg class="w-5 h-5 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
								</svg>
								About { cityName }
							</h2>
							<p id="city-description" class="text-gray-700 dark:text-gray-300 text-sm leading-relaxed mb-6">
								Loading city information...
							</p>
							<div id="city-details" class="grid grid-cols-1 sm:grid-cols-2 gap-4">
								<!-- City details will be populated here -->
							</div>
						</div>
					</div>
					<!-- Quick Stats -->
					<div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
						<h3 class="font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
							<svg class="w-4 h-4 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"></path>
							</svg>
							Quick Stats
						</h3>
						<div id="quick-stats" class="space-y-4">
							<div class="flex items-center justify-between p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
								<span class="text-sm text-gray-700 dark:text-gray-300">Places to explore</span>
								<span id="poi-count" class="font-semibold text-blue-600 dark:text-blue-400">Loading...</span>
							</div>
							<div class="flex items-center justify-between p-3 bg-green-50 dark:bg-green-900/20 rounded-lg">
								<span class="text-sm text-gray-700 dark:text-gray-300">In your itinerary</span>
								<span id="itinerary-count" class="font-semibold text-green-600 dark:text-green-400">Loading...</span>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<!-- Main Content -->
		<div class="max-w-7xl mx-auto px-4 py-4 sm:px-6 sm:py-6">
			<!-- Map Container - Initially Hidden -->
			<div id="map-container" class="hidden w-full h-[400px] sm:h-[500px] mb-6">
				<div class="w-full h-full bg-gray-100 rounded-lg flex items-center justify-center">
					<div class="text-center">
						<svg class="w-8 h-8 animate-spin mx-auto mb-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
						</svg>
						<p class="text-sm text-gray-600">Loading map...</p>
					</div>
				</div>
			</div>
			<!-- Results Container -->
			<div id="results-container" class="space-y-6">
				<!-- Loading State -->
				<div id="loading-cards" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
					for i := 0; i < 6; i++ {
						<div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4 animate-pulse">
							<div class="flex items-start gap-3">
								<div class="w-12 h-12 bg-gray-300 dark:bg-gray-600 rounded-full"></div>
								<div class="flex-1 space-y-2">
									<div class="h-4 bg-gray-300 dark:bg-gray-600 rounded w-3/4"></div>
									<div class="h-3 bg-gray-300 dark:bg-gray-600 rounded w-1/2"></div>
									<div class="h-3 bg-gray-300 dark:bg-gray-600 rounded w-full"></div>
								</div>
							</div>
						</div>
					}
				</div>
				<!-- Actual Results - Initially Hidden -->
				<div id="itinerary-results" class="hidden">
					<div class="flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between mb-6">
						<div>
							<div class="flex items-center gap-2">
								<h2 class="text-lg font-semibold text-gray-900 dark:text-white">Your Curated Itinerary</h2>
								<div id="updating-indicator" class="hidden flex items-center gap-2 text-sm text-blue-600 dark:text-blue-400">
									<svg class="w-4 h-4 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
									</svg>
									<span>Updating...</span>
								</div>
							</div>
							<p class="text-sm text-gray-600 dark:text-gray-300">Personalized places to visit based on your preferences</p>
						</div>
					</div>
					<div id="poi-cards-container" class="space-y-4">
						<!-- POI cards will be generated here -->
					</div>
				</div>
			</div>
		</div>
	</div>
	<script type="text/javascript">
	document.addEventListener('DOMContentLoaded', function() {
		// Initialize streaming data
		var streamingData = {
			cityData: null,
			pointsOfInterest: [],
			itineraryResponse: null,
			sessionId: '{ sessionID }'
		};
		
		var currentViewMode = 'split';
		var isStreamingComplete = false;
		var chunkAccumulator = {
			city_data: '',
			general_pois: '',
			itinerary: ''
		};
		
		// Set up SSE connection
		function setupSSEConnection() {
			var eventSource = new EventSource('/chat/stream?session_id={ sessionID }&dashboard-search={ originalQuery }');
			var isNavigationHandled = false;
			
			eventSource.onmessage = function(event) {
				try {
					var eventData = JSON.parse(event.data);
					console.log('SSE Event:', eventData);
					
					handleStreamEvent(eventData);
					
					// Handle navigation on completion
					if (eventData.type === 'complete' && eventData.navigation && !isNavigationHandled) {
						isNavigationHandled = true;
						handleStreamComplete(eventData);
					}
				} catch (error) {
					console.error('Error parsing SSE event:', error);
				}
			};
			
			eventSource.onerror = function(error) {
				console.error('SSE Error:', error);
				eventSource.close();
				handleStreamError();
			};
			
			// Close connection when page unloads
			window.addEventListener('beforeunload', function() {
				eventSource.close();
			});
			
			return eventSource;
		}
		
		// Handle individual stream events
		function handleStreamEvent(event) {
			var statusText = document.getElementById('status-text');
			var streamingProgress = document.getElementById('streaming-progress');
			
			switch (event.type) {
				case 'start':
					if (statusText) statusText.textContent = 'AI analysis started...';
					break;
					
				case 'chunk':
					if (event.data && event.data.part) {
						updateStreamingProgress(event.data.part, event.data.chunk);
						parseChunkData(event.data);
					}
					break;
					
				case 'complete':
					handleStreamComplete(event);
					break;
					
				case 'error':
					console.error('Stream error:', event.message);
					handleStreamError(event.message);
					break;
			}
		}
		
		// Update streaming progress indicator
		function updateStreamingProgress(part, chunk) {
			var streamingProgress = document.getElementById('streaming-progress');
			var statusText = document.getElementById('status-text');
			
			if (!streamingProgress || !statusText) return;
			
			// Update status based on part
			switch (part) {
				case 'city_data':
					statusText.textContent = 'Gathering city information...';
					break;
				case 'general_pois':
					statusText.textContent = 'Finding points of interest...';
					break;
				case 'itinerary':
					statusText.textContent = 'Creating your personalized itinerary...';
					break;
			}
			
			// Add progress updates
			var progressDiv = document.createElement('div');
			progressDiv.className = 'text-xs opacity-75';
			progressDiv.textContent = 'Processing ' + part + '...';
			streamingProgress.appendChild(progressDiv);
			
			// Keep only last 5 progress updates
			var progressItems = streamingProgress.children;
			if (progressItems.length > 5) {
				streamingProgress.removeChild(progressItems[0]);
			}
		}
		
		// Parse chunk data and accumulate
		function parseChunkData(data) {
			if (!data.chunk || !data.part) return;
			
			// Accumulate chunks by part
			chunkAccumulator[data.part] += data.chunk;
			
			// Try to parse accumulated JSON
			tryParseAccumulatedData(data.part);
		}
		
		// Try to parse accumulated chunk data
		function tryParseAccumulatedData(part) {
			var accumulated = chunkAccumulator[part];
			
			// Look for complete JSON objects
			var jsonStart = accumulated.indexOf('{');
			var jsonEnd = accumulated.lastIndexOf('}');
			
			if (jsonStart !== -1 && jsonEnd !== -1 && jsonEnd > jsonStart) {
				var jsonStr = accumulated.slice(jsonStart, jsonEnd + 1);
				
				// Remove markdown code blocks if present
				jsonStr = jsonStr.replace(/```json\n?/g, '').replace(/```\n?/g, '');
				
				try {
					var parsed = JSON.parse(jsonStr);
					
					switch (part) {
						case 'city_data':
							if (parsed.city) {
								streamingData.cityData = parsed;
								updateCityInfo(parsed);
							}
							break;
							
						case 'general_pois':
							if (parsed.points_of_interest && Array.isArray(parsed.points_of_interest)) {
								streamingData.pointsOfInterest = parsed.points_of_interest;
								updateQuickStats();
							}
							break;
							
						case 'itinerary':
							if (parsed.itinerary_name || parsed.points_of_interest) {
								streamingData.itineraryResponse = parsed;
								updateItineraryInfo(parsed);
							}
							break;
					}
				} catch (error) {
					console.warn('Could not parse ' + part + ' JSON:', error);
				}
			}
		}
		
		// Update city information display
		function updateCityInfo(cityData) {
			var cityTitle = document.getElementById('city-title');
			var cityDescription = document.getElementById('city-description');
			var cityDetails = document.getElementById('city-details');
			var cityInfoSection = document.getElementById('city-info-section');
			
			if (cityTitle && cityData.city) {
				cityTitle.innerHTML = '<svg class="w-5 h-5 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>About ' + cityData.city;
			}
			
			if (cityDescription && cityData.description) {
				cityDescription.textContent = cityData.description;
			}
			
			if (cityInfoSection) {
				cityInfoSection.classList.remove('hidden');
			}
		}
		
		// Update itinerary information
		function updateItineraryInfo(itineraryData) {
			var itineraryTitle = document.getElementById('itinerary-title');
			var itineraryDescription = document.getElementById('itinerary-description');
			
			// Parse itinerary name if it's JSON
			var parsedName = itineraryData.itinerary_name;
			if (typeof parsedName === 'string' && parsedName.indexOf('{') === 0) {
				try {
					var parsed = JSON.parse(parsedName);
					parsedName = parsed.itinerary_name || parsed.name || parsedName;
				} catch (e) {
					// Keep original if parsing fails
				}
			}
			
			if (itineraryTitle && parsedName) {
				itineraryTitle.textContent = parsedName;
			}
			
			if (itineraryDescription && itineraryData.overall_description) {
				var cityInfo = streamingData.cityData;
				var cityName = cityInfo ? cityInfo.city : '{ cityName }';
				var countryName = cityInfo ? cityInfo.country : '';
				itineraryDescription.textContent = cityName + (countryName ? ', ' + countryName : '') + ' • Personalized itinerary';
			}
			
			// Generate POI cards if we have them
			if (itineraryData.points_of_interest && Array.isArray(itineraryData.points_of_interest)) {
				generatePOICards(itineraryData.points_of_interest);
			}
		}
		
		// Update quick stats
		function updateQuickStats() {
			var poiCount = document.getElementById('poi-count');
			var itineraryCount = document.getElementById('itinerary-count');
			
			if (poiCount) {
				var generalPOIs = streamingData.pointsOfInterest.length;
				poiCount.textContent = generalPOIs.toString();
			}
			
			if (itineraryCount) {
				var itineraryPOIs = streamingData.itineraryResponse && streamingData.itineraryResponse.points_of_interest ? streamingData.itineraryResponse.points_of_interest.length : 0;
				itineraryCount.textContent = itineraryPOIs.toString();
			}
		}
		
		// Generate POI cards
		function generatePOICards(pois) {
			var container = document.getElementById('poi-cards-container');
			var resultsContainer = document.getElementById('itinerary-results');
			
			if (!container || !pois.length) return;
			
			container.innerHTML = '';
			
			for (var i = 0; i < pois.length; i++) {
				var poi = pois[i];
				var card = createPOICard(poi, i + 1);
				container.appendChild(card);
			}
			
			// Show results container
			if (resultsContainer) {
				resultsContainer.classList.remove('hidden');
			}
		}
		
		// Create POI card element
		function createPOICard(poi, priority) {
			var card = document.createElement('div');
			card.className = 'bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4 hover:shadow-md transition-all cursor-pointer';
			
			// Generate category emoji and color
			var categoryInfo = getCategoryInfo(poi.category);
			var hasValidCoordinates = poi.latitude && poi.longitude && !isNaN(poi.latitude) && !isNaN(poi.longitude);
			
			card.innerHTML = '<div class="flex items-start gap-3">' +
				'<div class="flex-shrink-0">' +
				'<div class="w-12 h-12 rounded-full ' + categoryInfo.color + ' flex items-center justify-center text-white font-bold text-lg">' +
				categoryInfo.emoji +
				'</div>' +
				'</div>' +
				'<div class="flex-1 min-w-0">' +
				'<div class="flex items-start justify-between mb-2">' +
				'<div class="flex-1">' +
				'<h4 class="font-semibold text-lg text-gray-900 dark:text-white mb-1 cursor-pointer hover:text-blue-600 transition-colors">' +
				poi.name +
				'</h4>' +
				'<div class="flex flex-wrap items-center gap-2 mb-2">' +
				'<span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium">📍 ' + poi.category + '</span>' +
				(!hasValidCoordinates ? '<span class="px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs">📍 Location TBD</span>' : '') +
				'<span class="px-2 py-1 bg-purple-100 text-purple-700 rounded-full text-xs">🕒 1-2 hours</span>' +
				'<span class="px-2 py-1 bg-green-100 text-green-700 rounded-full text-xs">💶 Moderate</span>' +
				'</div>' +
				(poi.address ? '<p class="text-sm text-gray-600 dark:text-gray-300 flex items-center mb-1"><svg class="w-4 h-4 mr-1 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>' + poi.address + '</p>' : '') +
				'</div>' +
				'<div class="flex items-center gap-1 bg-yellow-50 px-2 py-1 rounded-full border border-yellow-200 ml-2">' +
				'<svg class="w-3 h-3 text-yellow-500 fill-current" viewBox="0 0 24 24"><path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/></svg>' +
				'<span class="text-yellow-800 font-medium text-xs">4.5</span>' +
				'</div>' +
				'</div>' +
				(poi.description_poi ? '<p class="text-sm text-gray-600 dark:text-gray-300 mb-3">' + poi.description_poi + '</p>' : '') +
				'</div>' +
				'</div>';
			
			return card;
		}
		
		// Get category information
		function getCategoryInfo(category) {
			var categoryLower = (category || '').toLowerCase();
			
			if (categoryLower.indexOf('museum') !== -1 || categoryLower.indexOf('cultural') !== -1) {
				return { emoji: '🏛️', color: 'bg-purple-500' };
			}
			if (categoryLower.indexOf('park') !== -1 || categoryLower.indexOf('garden') !== -1) {
				return { emoji: '🌳', color: 'bg-green-500' };
			}
			if (categoryLower.indexOf('restaurant') !== -1 || categoryLower.indexOf('food') !== -1) {
				return { emoji: '🍽️', color: 'bg-orange-500' };
			}
			if (categoryLower.indexOf('hotel') !== -1 || categoryLower.indexOf('accommodation') !== -1) {
				return { emoji: '🏨', color: 'bg-blue-500' };
			}
			if (categoryLower.indexOf('religious') !== -1 || categoryLower.indexOf('church') !== -1) {
				return { emoji: '⛪', color: 'bg-indigo-500' };
			}
			if (categoryLower.indexOf('landmark') !== -1 || categoryLower.indexOf('architecture') !== -1) {
				return { emoji: '🏛️', color: 'bg-gray-500' };
			}
			
			return { emoji: '📍', color: 'bg-blue-500' };
		}
		
		// Handle stream completion
		function handleStreamComplete(event) {
			isStreamingComplete = true;
			
			// Hide streaming status
			var streamingStatus = document.getElementById('streaming-status');
			var loadingCards = document.getElementById('loading-cards');
			
			if (streamingStatus) {
				streamingStatus.style.display = 'none';
			}
			
			if (loadingCards) {
				loadingCards.style.display = 'none';
			}
			
			// Show completed UI elements
			showCompletedUI();
			
			// Handle navigation if provided
			if (event.navigation && event.navigation.url) {
				// Update URL without reload
				window.history.replaceState({}, '', event.navigation.url);
			}
		}
		
		// Handle stream error
		function handleStreamError(message) {
			if (!message) message = 'An error occurred while processing your request';
			
			var streamingStatus = document.getElementById('streaming-status');
			var statusText = document.getElementById('status-text');
			var loadingSpinner = document.getElementById('loading-spinner');
			
			if (streamingStatus) {
				streamingStatus.className = 'bg-gradient-to-r from-red-50 to-pink-50 dark:from-red-900/20 dark:to-pink-900/20 border-b border-red-200 dark:border-red-600';
			}
			
			if (statusText) {
				statusText.textContent = message;
				statusText.className = 'text-sm text-red-600 dark:text-red-400';
			}
			
			if (loadingSpinner) {
				loadingSpinner.style.display = 'none';
			}
		}
		
		// Show completed UI elements
		function showCompletedUI() {
			var viewModeControls = document.getElementById('view-mode-controls');
			var actionButtons = document.getElementById('action-buttons');
			var mapContainer = document.getElementById('map-container');
			var continuePlanningBtn = document.getElementById('continue-planning-btn');
			
			if (viewModeControls) viewModeControls.classList.remove('hidden');
			if (actionButtons) actionButtons.classList.remove('hidden');
			if (continuePlanningBtn) continuePlanningBtn.classList.remove('hidden');
			
			// Show map in split or map mode
			if (currentViewMode === 'split' || currentViewMode === 'map') {
				if (mapContainer) {
					mapContainer.classList.remove('hidden');
					initializeMap();
				}
			}
		}
		
		// View mode functions
		window.setViewMode = function(mode) {
			currentViewMode = mode;
			var mapContainer = document.getElementById('map-container');
			var resultsContainer = document.getElementById('results-container');
			
			// Update button states
			var viewModeButtons = document.querySelectorAll('[id^="view-mode-"]');
			for (var i = 0; i < viewModeButtons.length; i++) {
				viewModeButtons[i].className = 'flex-1 px-3 py-1 rounded text-sm font-medium transition-colors sm:flex-initial text-gray-600 hover:bg-white';
			}
			var activeButton = document.getElementById('view-mode-' + mode);
			if (activeButton) {
				activeButton.className = 'flex-1 px-3 py-1 rounded text-sm font-medium transition-colors sm:flex-initial bg-white text-gray-900 shadow-sm';
			}
			
			// Show/hide containers based on mode
			switch (mode) {
				case 'map':
					if (mapContainer) mapContainer.classList.remove('hidden');
					if (resultsContainer) resultsContainer.style.display = 'none';
					break;
				case 'list':
					if (mapContainer) mapContainer.classList.add('hidden');
					if (resultsContainer) resultsContainer.style.display = 'block';
					break;
				case 'split':
					if (mapContainer) mapContainer.classList.remove('hidden');
					if (resultsContainer) resultsContainer.style.display = 'block';
					break;
			}
			
			// Initialize map if needed
			if ((mode === 'map' || mode === 'split') && isStreamingComplete) {
				initializeMap();
			}
		};
		
		// Initialize map (placeholder - replace with actual map implementation)
		function initializeMap() {
			var mapContainer = document.getElementById('map-container');
			if (!mapContainer || !streamingData.cityData) return;
			
			// Replace with actual map implementation
			mapContainer.innerHTML = '<div class="w-full h-full bg-gray-100 rounded-lg flex items-center justify-center">' +
				'<div class="text-center">' +
				'<svg class="w-8 h-8 mx-auto mb-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">' +
				'<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>' +
				'<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>' +
				'</svg>' +
				'<p class="text-sm text-gray-600">Map for ' + streamingData.cityData.city + '</p>' +
				'<p class="text-xs text-gray-500">Center: ' + streamingData.cityData.center_latitude + ', ' + streamingData.cityData.center_longitude + '</p>' +
				'</div>' +
				'</div>';
		}
		
		// Initialize page
		console.log('Initializing streaming itinerary page');
		setupSSEConnection();
	});
	</script>
}
