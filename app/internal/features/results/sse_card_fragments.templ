package results

import (
	"fmt"
	"github.com/FACorreiaa/go-templui/app/internal/models"
)

// SSE-specific card fragments for dynamic insertion via chat continue
// These templates render single cards with HTMX OOB swaps for adding/removing items

// SingleRestaurantCard renders a single restaurant card for SSE insertion
// Use with HTMX hx-swap-oob="beforeend:#results-list" to append to list
templ SingleRestaurantCard(restaurant models.RestaurantDetailedInfo, index int) {
	<div
		id={ fmt.Sprintf("restaurant-%d", index) }
		class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4 hover:shadow-lg transition-shadow relative animate-fade-in"
		data-poi-lat={ fmt.Sprintf("%f", restaurant.Latitude) }
		data-poi-lng={ fmt.Sprintf("%f", restaurant.Longitude) }
		data-poi-name={ restaurant.Name }
		data-poi-category={ restaurant.Category }
	>
		<!-- Index Badge -->
		<div class="absolute top-4 right-4 w-8 h-8 bg-orange-600 text-white rounded-full flex items-center justify-center font-bold text-sm">
			{ fmt.Sprintf("%d", index) }
		</div>

		<div class="pr-12">
			<h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">
				{ restaurant.Name }
			</h3>

			if restaurant.CuisineType != nil {
				<p class="text-sm text-orange-600 dark:text-orange-400 mb-2">
					{ *restaurant.CuisineType }
				</p>
			}

			<p class="text-sm text-gray-600 dark:text-gray-300 mb-3">
				{ restaurant.Description }
			</p>

			<div class="flex flex-wrap items-center gap-3 text-sm">
				if restaurant.Rating > 0 {
					<div class="flex items-center gap-1">
						<svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
							<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
						</svg>
						<span>{ fmt.Sprintf("%.1f", restaurant.Rating) }</span>
					</div>
				}

				if restaurant.PriceLevel != nil {
					<div class="flex items-center gap-1">
						<svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
						</svg>
						<span>{ *restaurant.PriceLevel }</span>
					</div>
				}
			</div>

			if len(restaurant.Tags) > 0 {
				<div class="flex flex-wrap gap-2 mt-3">
					for _, tag := range restaurant.Tags {
						<span class="px-2 py-1 text-xs bg-orange-50 dark:bg-orange-900/20 text-orange-700 dark:text-orange-300 rounded-full">
							{ tag }
						</span>
					}
				</div>
			}
		</div>
	</div>
}

// SingleHotelCard renders a single hotel card for SSE insertion
templ SingleHotelCard(hotel models.HotelDetailedInfo, index int) {
	<div
		id={ fmt.Sprintf("hotel-%d", index) }
		class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4 hover:shadow-lg transition-shadow relative animate-fade-in"
		data-poi-lat={ fmt.Sprintf("%f", hotel.Latitude) }
		data-poi-lng={ fmt.Sprintf("%f", hotel.Longitude) }
		data-poi-name={ hotel.Name }
		data-poi-category={ hotel.Category }
	>
		<!-- Index Badge -->
		<div class="absolute top-4 right-4 w-8 h-8 bg-green-600 text-white rounded-full flex items-center justify-center font-bold text-sm">
			{ fmt.Sprintf("%d", index) }
		</div>

		<div class="pr-12">
			<h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">
				{ hotel.Name }
			</h3>

			<p class="text-sm text-green-600 dark:text-green-400 mb-2">
				{ hotel.Category }
			</p>

			<p class="text-sm text-gray-600 dark:text-gray-300 mb-3">
				{ hotel.Description }
			</p>

			<div class="flex flex-wrap items-center gap-3 text-sm">
				if hotel.Rating > 0 {
					<div class="flex items-center gap-1">
						<svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
							<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
						</svg>
						<span>{ fmt.Sprintf("%.1f", hotel.Rating) }</span>
					</div>
				}

				if hotel.PriceRange != nil {
					<div class="flex items-center gap-1">
						<svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
						</svg>
						<span>{ *hotel.PriceRange }</span>
					</div>
				}
			</div>

			if len(hotel.Tags) > 0 {
				<div class="flex flex-wrap gap-2 mt-3">
					for _, tag := range hotel.Tags {
						<span class="px-2 py-1 text-xs bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-300 rounded-full">
							{ tag }
						</span>
					}
				</div>
			}
		</div>
	</div>
}

// SingleActivityCard renders a single activity card for SSE insertion
templ SingleActivityCard(activity models.POIDetailedInfo, index int) {
	<div
		id={ fmt.Sprintf("activity-%d", index) }
		class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4 hover:shadow-lg transition-shadow relative animate-fade-in"
		data-poi-lat={ fmt.Sprintf("%f", activity.Latitude) }
		data-poi-lng={ fmt.Sprintf("%f", activity.Longitude) }
		data-poi-name={ activity.Name }
		data-poi-category={ activity.Category }
	>
		<!-- Index Badge -->
		<div class="absolute top-4 right-4 w-8 h-8 bg-purple-600 text-white rounded-full flex items-center justify-center font-bold text-sm">
			{ fmt.Sprintf("%d", index) }
		</div>

		<div class="pr-12">
			<h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">
				{ activity.Name }
			</h3>

			<p class="text-sm text-purple-600 dark:text-purple-400 mb-2">
				{ activity.Category }
			</p>

			<p class="text-sm text-gray-600 dark:text-gray-300 mb-3">
				{ activity.Description }
			</p>

			<div class="flex flex-wrap items-center gap-3 text-sm">
				if activity.Rating > 0 {
					<div class="flex items-center gap-1">
						<svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
							<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
						</svg>
						<span>{ fmt.Sprintf("%.1f", activity.Rating) }</span>
					</div>
				}

				if activity.PriceRange != "" {
					<div class="flex items-center gap-1">
						<svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
						</svg>
						<span>{ activity.PriceRange }</span>
					</div>
				}
			</div>

			if len(activity.Tags) > 0 {
				<div class="flex flex-wrap gap-2 mt-3">
					for _, tag := range activity.Tags {
						<span class="px-2 py-1 text-xs bg-purple-50 dark:bg-purple-900/20 text-purple-700 dark:text-purple-300 rounded-full">
							{ tag }
						</span>
					}
				</div>
			}
		</div>
	</div>
}

// SinglePOICard renders a single POI card for itinerary SSE insertion
templ SinglePOICard(poi models.POIDetailedInfo, index int) {
	<div
		id={ fmt.Sprintf("poi-%d", index) }
		class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4 hover:shadow-lg transition-shadow relative animate-fade-in"
		data-poi-lat={ fmt.Sprintf("%f", poi.Latitude) }
		data-poi-lng={ fmt.Sprintf("%f", poi.Longitude) }
		data-poi-name={ poi.Name }
		data-poi-category={ poi.Category }
	>
		<!-- Index Badge -->
		<div class="absolute top-4 right-4 w-8 h-8 bg-blue-600 text-white rounded-full flex items-center justify-center font-bold text-sm">
			{ fmt.Sprintf("%d", index) }
		</div>

		<div class="pr-12">
			<h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">
				{ poi.Name }
			</h3>

			<p class="text-sm text-blue-600 dark:text-blue-400 mb-2">
				{ poi.Category }
			</p>

			<p class="text-sm text-gray-600 dark:text-gray-300 mb-3">
				{ poi.Description }
			</p>

			<div class="flex flex-wrap items-center gap-3 text-sm">
				if poi.Rating > 0 {
					<div class="flex items-center gap-1">
						<svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
							<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
						</svg>
						<span>{ fmt.Sprintf("%.1f", poi.Rating) }</span>
					</div>
				}

				if poi.PriceRange != "" {
					<div class="flex items-center gap-1">
						<svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
						</svg>
						<span>{ poi.PriceRange }</span>
					</div>
				}
			</div>

			if len(poi.Tags) > 0 {
				<div class="flex flex-wrap gap-2 mt-3">
					for _, tag := range poi.Tags {
						<span class="px-2 py-1 text-xs bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 rounded-full">
							{ tag }
						</span>
					}
				</div>
			}
		</div>
	</div>
}

// ChatProcessingIndicator shows visual feedback during chat processing
templ ChatProcessingIndicator(domain string) {
	<div id="chat-processing" class="fixed bottom-24 right-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg p-4 border border-gray-200 dark:border-gray-700 animate-fade-in">
		<div class="flex items-center gap-3">
			<div class="flex gap-1">
				<div class="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style="animation-delay: 0ms"></div>
				<div class="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style="animation-delay: 150ms"></div>
				<div class="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style="animation-delay: 300ms"></div>
			</div>
			<span class="text-sm text-gray-700 dark:text-gray-300">
				Processing your request...
			</span>
		</div>
	</div>
}

// ChatSuccessMessage shows success feedback after adding/removing items
templ ChatSuccessMessage(action string, itemName string) {
	<div id="chat-success" class="fixed bottom-24 right-6 bg-green-50 dark:bg-green-900/20 rounded-lg shadow-lg p-4 border border-green-200 dark:border-green-700 animate-fade-in">
		<div class="flex items-center gap-3">
			<svg class="w-5 h-5 text-green-600 dark:text-green-400" fill="currentColor" viewBox="0 0 20 20">
				<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
			</svg>
			<span class="text-sm text-green-800 dark:text-green-200">
				{ action } { itemName }
			</span>
		</div>
	</div>
}

// ChatErrorMessage shows error feedback when operation fails
templ ChatErrorMessage(message string) {
	<div id="chat-error" class="fixed bottom-24 right-6 bg-red-50 dark:bg-red-900/20 rounded-lg shadow-lg p-4 border border-red-200 dark:border-red-700 animate-fade-in">
		<div class="flex items-center gap-3">
			<svg class="w-5 h-5 text-red-600 dark:text-red-400" fill="currentColor" viewBox="0 0 20 20">
				<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
			</svg>
			<span class="text-sm text-red-800 dark:text-red-200">
				{ message }
			</span>
		</div>
	</div>
}
