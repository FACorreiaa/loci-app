package results

import (
	"fmt"
	"github.com/FACorreiaa/go-templui/app/internal/models"
	"strings"
)

templ HotelsResults(cityData models.GeneralCityData, hotels []models.HotelDetailedInfo, compact bool, showToggle bool, initialLimit int, favorites []string) {
	<div class="min-h-screen bg-gray-50 dark:bg-gray-900 hotels-results" id="hotels-container" x-data="hotelsPage()">
		<!-- Mobile-First Enhanced Header -->
		<div class="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 sticky top-0 z-30">
			<div class="px-4 py-3 sm:px-6">
				<!-- Main Header Content -->
				<div class="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
					<div class="flex-1 min-w-0">
						<div class="flex items-center gap-3">
							<div class="w-10 h-10 bg-gradient-to-br from-green-500 to-emerald-600 rounded-lg flex items-center justify-center text-white text-xl flex-shrink-0">
								üè®
							</div>
							<div class="flex-1 min-w-0">
								<h1 class="text-lg font-bold text-gray-900 dark:text-white sm:text-xl truncate">
									if cityData.City != "" {
										Hotels in { cityData.City }
									} else {
										Hotels
									}
								</h1>
								<!-- City Location Info -->
								if cityData.City != "" {
									<div class="flex items-center gap-2 text-sm text-gray-700 dark:text-gray-300 mt-1 mb-2">
										<svg class="w-4 h-4 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 616 0z"></path>
										</svg>
										<span class="font-medium">{ cityData.City }{ getHotelStateProvince(cityData.StateProvince) }, { cityData.Country }</span>
										if cityData.Population != "" {
											<span class="text-xs bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded-full">
												Pop: { cityData.Population }
											</span>
										}
									</div>
								}
								<div class="flex flex-wrap items-center gap-2 text-xs text-gray-600 dark:text-gray-300 mt-1">
									<div class="flex items-center gap-1">
										<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
										</svg>
										<span>{ fmt.Sprintf("%d", len(hotels)) } hotels found</span>
									</div>
								</div>
							</div>
						</div>
					</div>

					<!-- Desktop Actions -->
					<div class="hidden sm:flex items-center gap-2">
						<button @click="showChat = true"
								class="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-sm font-medium">
							<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-3.582 8-8 8a8.013 8.013 0 01-7.93-6.94c-.42-.51-.92-.92-1.43-1.25-.63-.41-.63-1.33 0-1.74.51-.33 1.01-.74 1.43-1.25A8.013 8.013 0 0113 4c4.418 0 8 3.582 8 8z"></path>
							</svg>
							Find More Hotels
						</button>
						<button @click="shareResults()"
								class="p-2 text-gray-700 hover:bg-gray-100 rounded-lg transition-colors">
							<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
							</svg>
						</button>
					</div>
				</div>

				<!-- View Mode Toggle -->
				<div class="mt-3 pt-3 border-t border-gray-200 dark:border-gray-700">
					<div class="flex bg-gray-100 dark:bg-gray-700 rounded-lg p-1">
						<button @click="viewMode = 'list'"
								:class="viewMode === 'list' ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm' : 'text-gray-600 dark:text-gray-300'"
								class="flex-1 px-3 py-2 rounded text-sm font-medium transition-colors">
							<div class="flex items-center justify-center gap-1">
								<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
								</svg>
								<span class="hidden sm:inline">List</span>
							</div>
						</button>
						<button @click="viewMode = 'map'"
								:class="viewMode === 'map' ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm' : 'text-gray-600 dark:text-gray-300'"
								class="flex-1 px-3 py-2 rounded text-sm font-medium transition-colors">
							<div class="flex items-center justify-center gap-1">
								<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7"></path>
								</svg>
								<span class="hidden sm:inline">Map</span>
							</div>
						</button>
						<button @click="viewMode = 'split'"
								:class="viewMode === 'split' ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm' : 'text-gray-600 dark:text-gray-300'"
								class="flex-1 px-3 py-2 rounded text-sm font-medium transition-colors">
							<div class="flex items-center justify-center gap-1">
								<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2h-2a2 2 0 00-2 2"></path>
								</svg>
								<span class="hidden sm:inline">Split</span>
							</div>
						</button>
						<button @click="viewMode = 'grid'"
								:class="viewMode === 'grid' ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm' : 'text-gray-600 dark:text-gray-300'"
								class="flex-1 px-3 py-2 rounded text-sm font-medium transition-colors">
							<div class="flex items-center justify-center gap-1">
								<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 5a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM14 5a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1V5zM4 15a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1H5a1 1 0 01-1-1v-4zM14 15a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1v-4z"></path>
								</svg>
								<span class="hidden sm:inline">Grid</span>
							</div>
						</button>
					</div>
				</div>
			</div>
		</div>

		<!-- Main Content Area -->
		<div class="flex-1 min-h-0">
			<!-- Map Container (shown in map and split views) -->
			<div
				x-show="viewMode === 'map' || viewMode === 'split'"
				x-transition:enter="transition ease-out duration-300"
				x-transition:enter-start="opacity-0"
				x-transition:enter-end="opacity-100"
				class="relative"
			>
				<div
					:class="viewMode === 'map' ? 'h-[calc(100vh-200px)] md:h-[600px]' : viewMode === 'split' ? 'h-[300px] md:h-[400px] lg:h-[500px]' : 'h-[400px]'"
					class="w-full"
				>
					@HotelsMapContainer(hotels, &cityData, "session-placeholder")
				</div>
			</div>

			<!-- Content Layout for List/Split/Grid View -->
			<div class="px-4 py-4 sm:px-6">
				<!-- List View -->
				<div
					x-show="viewMode === 'list' || viewMode === 'split'"
					class="w-full"
				>
					<!-- City Information Section -->
					if cityData.City != "" && cityData.Description != "" {
						<div class="bg-gradient-to-r from-green-50 to-emerald-50 dark:from-gray-800 dark:to-gray-700 rounded-xl p-6 mb-6 border border-green-100 dark:border-gray-600">
							<div class="flex items-start gap-4">
								<div class="w-12 h-12 bg-green-500 rounded-xl flex items-center justify-center flex-shrink-0">
									<svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
									</svg>
								</div>
								<div class="flex-1">
									<h3 class="text-xl font-bold text-gray-900 dark:text-white mb-2">About { cityData.City }</h3>
									<p class="text-gray-700 dark:text-gray-300 leading-relaxed mb-4">{ cityData.Description }</p>
									<div class="grid grid-cols-2 sm:grid-cols-4 gap-4 text-sm">
										if cityData.Area != "" {
											<div class="flex items-center gap-2">
												<svg class="w-4 h-4 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
													<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
												</svg>
												<span class="text-gray-600 dark:text-gray-400">Area: { cityData.Area }</span>
											</div>
										}
										if cityData.Timezone != "" {
											<div class="flex items-center gap-2">
												<svg class="w-4 h-4 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
													<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
												</svg>
												<span class="text-gray-600 dark:text-gray-400">{ cityData.Timezone }</span>
											</div>
										}
										if cityData.Language != "" {
											<div class="flex items-center gap-2">
												<svg class="w-4 h-4 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
													<path stroke-linecap="round" stroke-linejoin="round" d="m10.5 21 5.25-11.25L21 21m-9-3h7.5M3 5.621a48.474 48.474 0 0 1 6-.371m0 0c1.12 0 2.233.038 3.334.114M9 5.25V3m3.334 2.364C11.176 10.658 7.69 15.08 3 17.502m9.334-12.138c.896.061 1.785.147 2.666.257m-4.589 8.495a18.023 18.023 0 0 1-3.827-5.802" />
												</svg>
												<span class="text-gray-600 dark:text-gray-400">Language: { cityData.Language }</span>
											</div>
										}
										if cityData.Population != "" {
											<div class="flex items-center gap-2">
												<svg class="w-4 h-4 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
													<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
												</svg>
												<span class="text-gray-600 dark:text-gray-400">Population: { cityData.Population }</span>
											</div>
										}
									</div>
								</div>
							</div>
						</div>
					}

					<!-- Hotel List -->
					<div class="space-y-4">
						for i, hotel := range hotels {
							@HotelListCard(hotel, i+1)
						}
					</div>
				</div>

				<!-- Grid View -->
				<div x-show="viewMode === 'grid'" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
					for i, hotel := range hotels {
						@HotelGridCard(hotel, i+1)
					}
				</div>
			</div>
		</div>
	</div>

	<script>
		function hotelsPage() {
			return {
				viewMode: 'list',
				showChat: false,
				selectedHotel: null,
				searchQuery: '',
				selectedCategory: '',
				sortBy: 'name',

				init() {
					// Initialize the component
				},

				setViewMode(mode) {
					this.viewMode = mode;
				},

				selectHotel(hotel) {
					this.selectedHotel = hotel;
				},

				closeModal() {
					this.selectedHotel = null;
				}
			}
		}

		// Make function available globally
		window.hotelsPage = hotelsPage;
	</script>
}

// HotelListCard for the list view section
templ HotelListCard(hotel models.HotelDetailedInfo, index int) {
	<div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4 hover:shadow-md transition-shadow relative">
		<!-- Index Badge -->
		<div class="absolute top-2 right-2 w-8 h-8 bg-green-500 text-white rounded-full flex items-center justify-center font-bold text-sm shadow-lg z-10">
			{ fmt.Sprintf("%d", index) }
		</div>

		<div class="flex items-start justify-between mb-2 pr-10">
			<div class="flex-1 min-w-0">
				<h4 class="font-semibold text-gray-900 dark:text-white truncate">
					{ hotel.Name }
				</h4>
				if hotel.Category != "" {
					<p class="text-xs text-gray-500 dark:text-gray-400">
						{ hotel.Category }
					</p>
				}
			</div>

			<div class="flex items-center gap-2 ml-2 flex-shrink-0">
				if hotel.Rating > 0 {
					<div class="flex items-center gap-1">
						<svg class={ "w-3.5 h-3.5 fill-current " + getHotelRatingColorClass(hotel.Rating) } viewBox="0 0 20 20">
							<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
						</svg>
						<span class={ "text-xs font-medium " + getHotelRatingColorClass(hotel.Rating) }>
							{ formatHotelRating(hotel.Rating) }
						</span>
					</div>
				}

				if hotel.PriceRange != nil && *hotel.PriceRange != "" {
					<span class={ "text-xs font-medium px-2 py-0.5 rounded " + getHotelPriceBadgeColor(*hotel.PriceRange) }>
						{ *hotel.PriceRange }
					</span>
				}
			</div>
		</div>

		<p class="text-sm text-gray-600 dark:text-gray-300 line-clamp-2 mb-3">{ hotel.Description }</p>

		<!-- Metadata Footer -->
		<div class="flex items-center gap-4 text-xs text-gray-500 dark:text-gray-400 flex-wrap mb-3">
			if hotel.Address != "" {
				<div class="flex items-center gap-1">
					<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
					</svg>
					<span class="truncate">{ hotel.Address }</span>
				</div>
			}
		</div>

		<!-- Amenities with Icons -->
		if len(hotel.Tags) > 0 {
			<div class="flex items-center gap-2 flex-wrap mb-3">
				for i, tag := range hotel.Tags {
					if i < 4 {
						<div class="flex items-center gap-1 text-xs bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-300 px-2 py-1 rounded">
							@getAmenityIcon(tag)
							<span>{ tag }</span>
						</div>
					}
				}
				if len(hotel.Tags) > 4 {
					<span class="text-xs text-gray-500 dark:text-gray-400">
						+{ fmt.Sprintf("%d", len(hotel.Tags)-4) } more
					</span>
				}
			</div>
		}

		<!-- Actions -->
		<div class="flex items-center justify-between pt-3 border-t border-gray-100 dark:border-gray-700">
			<div class="flex items-center gap-2">
				if hotel.Website != nil {
					<a
						href={ templ.URL(*hotel.Website) }
						target="_blank"
						rel="noopener noreferrer"
						class="text-xs text-green-600 dark:text-green-400 hover:underline font-medium"
					>
						View Details ‚Üí
					</a>
				}
			</div>
			<div class="flex items-center gap-2">
				<!-- Favorite Button Placeholder -->
				<button class="p-1.5 rounded-lg text-gray-400 hover:text-red-600 dark:hover:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 transition-colors">
					<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
					</svg>
				</button>
			</div>
		</div>
	</div>
}

// HotelGridCard for the grid view
templ HotelGridCard(hotel models.HotelDetailedInfo, index int) {
	<div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden hover:shadow-lg transition-shadow relative">
		<!-- Index Badge -->
		<div class="absolute top-2 right-2 w-8 h-8 bg-green-500 text-white rounded-full flex items-center justify-center font-bold text-sm shadow-lg z-10">
			{ fmt.Sprintf("%d", index) }
		</div>
		<div class="p-4">
			<div class="flex items-start justify-between mb-3 pr-10">
				<h4 class="font-semibold text-gray-900 dark:text-white line-clamp-1">{ hotel.Name }</h4>
				if hotel.Rating > 0 {
					<div class="flex items-center gap-1 flex-shrink-0">
						<svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
							<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
						</svg>
						<span class="text-sm font-medium text-gray-700 dark:text-gray-300">{ formatHotelRating(hotel.Rating) }</span>
					</div>
				}
			</div>
			if hotel.Category != "" {
				<span class="inline-block px-2 py-1 text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300 rounded-full mb-2">
					{ hotel.Category }
				</span>
			}
			<p class="text-sm text-gray-600 dark:text-gray-300 line-clamp-2 mb-3">{ hotel.Description }</p>
			<div class="flex items-center justify-between mt-auto">
				if hotel.PriceRange != nil && *hotel.PriceRange != "" {
					<span class={ getHotelPriceColor(*hotel.PriceRange) }>{ *hotel.PriceRange }</span>
				}
				<div class="flex gap-2">
					<button class="text-green-600 hover:text-green-700 text-sm font-medium">
						View Details
					</button>
				</div>
			</div>
		</div>
	</div>
}

// HotelsMapContainer for map view
templ HotelsMapContainer(hotels []models.HotelDetailedInfo, cityData *models.GeneralCityData, sessionId string) {
	<div class="relative w-full h-full min-h-[500px]">
		@MapContainer(hotelsToPOIs(hotels), cityData, sessionId, true, true, "green", "hotels")
	</div>
}

// Helper function to convert hotels to POIs for map display
func hotelsToPOIs(hotels []models.HotelDetailedInfo) []models.POIDetailedInfo {
	var pois []models.POIDetailedInfo
	for _, h := range hotels {
		poi := models.POIDetailedInfo{
			Name:        h.Name,
			Description: h.Description,
			Category:    h.Category,
			Latitude:    h.Latitude,
			Longitude:   h.Longitude,
			City:        h.City,
			Address:     h.Address,
			Images:      h.Images,
		}
		pois = append(pois, poi)
	}
	return pois
}

// Utility functions
func formatHotelRating(rating float64) string {
	if rating == float64(int(rating)) {
		return fmt.Sprintf("%.0f", rating)
	}
	return fmt.Sprintf("%.1f", rating)
}

func getHotelPriceColor(priceRange string) string {
	switch strings.ToLower(priceRange) {
	case "free", "$", "‚Ç¨":
		return "text-green-600"
	case "budget", "$$", "‚Ç¨‚Ç¨":
		return "text-blue-600"
	case "moderate", "$$$", "‚Ç¨‚Ç¨‚Ç¨":
		return "text-orange-600"
	case "expensive", "$$$$", "‚Ç¨‚Ç¨‚Ç¨‚Ç¨":
		return "text-red-600"
	default:
		return "text-gray-600"
	}
}

func getHotelStateProvince(province string) string {
	if province != "" {
		return ", " + province
	}
	return ""
}

func getUniqueHotelCategories(hotels []models.HotelDetailedInfo) string {
	categoryMap := make(map[string]bool)
	for _, hotel := range hotels {
		if hotel.Category != "" {
			categoryMap[hotel.Category] = true
		}
	}
	return fmt.Sprintf("%d", len(categoryMap))
}

func hotelsPage() interface{} {
	// This would be implemented in a separate Alpine.js state file
	return map[string]interface{}{
		"viewMode": "list",
		"showChat": false,
	}
}

// getHotelRatingColorClass returns Tailwind color classes based on rating value
func getHotelRatingColorClass(rating float64) string {
	if rating >= 4.5 {
		return "text-green-600 dark:text-green-400"
	}
	if rating >= 4.0 {
		return "text-blue-600 dark:text-blue-400"
	}
	if rating >= 3.5 {
		return "text-yellow-600 dark:text-yellow-400"
	}
	return "text-gray-600 dark:text-gray-400"
}

// getHotelPriceBadgeColor returns badge colors for price ranges
func getHotelPriceBadgeColor(priceRange string) string {
	switch strings.ToLower(priceRange) {
	case "free", "$", "‚Ç¨":
		return "bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300"
	case "budget", "$$", "‚Ç¨‚Ç¨":
		return "bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300"
	case "moderate", "$$$", "‚Ç¨‚Ç¨‚Ç¨":
		return "bg-orange-100 dark:bg-orange-900/30 text-orange-700 dark:text-orange-300"
	case "expensive", "$$$$", "‚Ç¨‚Ç¨‚Ç¨‚Ç¨":
		return "bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-300"
	default:
		return "bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300"
	}
}

// getAmenityIcon returns an SVG icon component for hotel amenities
templ getAmenityIcon(amenity string) {
	if strings.Contains(strings.ToLower(amenity), "wifi") || strings.Contains(strings.ToLower(amenity), "internet") {
		<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.111 16.404a5.5 5.5 0 017.778 0M12 20h.01m-7.08-7.071c3.904-3.905 10.236-3.905 14.141 0M1.394 9.393c5.857-5.857 15.355-5.857 21.213 0"></path>
		</svg>
	} else if strings.Contains(strings.ToLower(amenity), "parking") || strings.Contains(strings.ToLower(amenity), "car") {
		<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4"></path>
		</svg>
	} else if strings.Contains(strings.ToLower(amenity), "breakfast") || strings.Contains(strings.ToLower(amenity), "coffee") {
		<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7h-4m0 10v1a3 3 0 01-3 3H7a3 3 0 01-3-3V7a3 3 0 013-3h6a3 3 0 013 3v1"></path>
		</svg>
	} else if strings.Contains(strings.ToLower(amenity), "restaurant") || strings.Contains(strings.ToLower(amenity), "dining") {
		<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"></path>
		</svg>
	} else if strings.Contains(strings.ToLower(amenity), "pool") || strings.Contains(strings.ToLower(amenity), "swim") {
		<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V5a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905 0 .714-.211 1.412-.608 2.006L7 11v9m7-10h-2M7 20H5a2 2 0 01-2-2v-6a2 2 0 012-2h2.5"></path>
		</svg>
	} else if strings.Contains(strings.ToLower(amenity), "spa") || strings.Contains(strings.ToLower(amenity), "wellness") {
		<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
		</svg>
	} else if strings.Contains(strings.ToLower(amenity), "gym") || strings.Contains(strings.ToLower(amenity), "fitness") {
		<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
		</svg>
	}
}
