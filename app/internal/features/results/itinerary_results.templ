package results

import (
	"fmt"
	"time"
	"github.com/FACorreiaa/go-templui/app/internal/models"
	"github.com/FACorreiaa/go-templui/app/internal/features/components"
	"github.com/FACorreiaa/go-templui/app/internal/components/chat"
	"github.com/FACorreiaa/go-templui/app/internal/components/banner"
	"strings"
)

templ ItineraryResults(cityData models.GeneralCityData, generalPOIs []models.POIDetailedInfo, itinerary models.AIItineraryResponse, compact bool, showToggle bool, initialLimit int, favorites []string, sessionID string) {
	<div class="min-h-screen bg-gray-50 dark:bg-gray-900 itinerary-results" id="itinerary-container" x-data="itineraryPage()">
		<!-- Mobile-First Enhanced Header -->
		<div class="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 sticky top-0 z-30">
			<div class="px-4 py-3 sm:px-6">
				<!-- Main Header Content -->
				<div class="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
					<div class="flex-1 min-w-0">
						<div class="flex items-center gap-3">
							<div class="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center text-white text-xl flex-shrink-0">
								üó∫Ô∏è
							</div>
							<div class="flex-1 min-w-0">
								<h1 class="text-lg font-bold text-gray-900 dark:text-white sm:text-xl truncate">
									{ getItineraryName(itinerary.ItineraryName) }
								</h1>
								<!-- Basic City Location Info -->
								if cityData.City != "" {
									<div class="flex items-center gap-2 text-sm text-gray-700 dark:text-gray-300 mt-1">
										<svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
										</svg>
										<span class="font-medium">{ cityData.City }{ getCityProvince(cityData.StateProvince) }, { cityData.Country }</span>
									</div>
								}
								<div class="flex flex-wrap items-center gap-2 text-xs text-gray-600 dark:text-gray-300 mt-1">
									<div class="flex items-center gap-1">
										<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
										</svg>
										<span>{ fmt.Sprintf("%d", len(itinerary.PointsOfInterest)) } personalized places</span>
									</div>
									if len(generalPOIs) > 0 {
										<div class="flex items-center gap-1">
											<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
											</svg>
											<span>{ fmt.Sprintf("%d", len(generalPOIs)) } city highlights</span>
										</div>
									}
									if len(itinerary.Restaurants) > 0 {
										<div class="flex items-center gap-1">
											<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v13m0-13V6a2 2 0 112 2h-2zm0 0V5.5A2.5 2.5 0 109.5 8H12zm-7 4h14M5 12a2 2 0 110-4h14a2 2 0 110 4M5 12v7a2 2 0 002 2h10a2 2 0 002-2v-7"></path>
											</svg>
											<span>{ fmt.Sprintf("%d", len(itinerary.Restaurants)) } restaurants</span>
										</div>
									}
									if len(itinerary.Bars) > 0 {
										<div class="flex items-center gap-1">
											<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
											</svg>
											<span>{ fmt.Sprintf("%d", len(itinerary.Bars)) } bars</span>
										</div>
									}
								</div>
							</div>
						</div>
					</div>
					<!-- Mobile Action Button -->
					<div class="flex sm:hidden">
						<button
							@click="showMobileMenu = !showMobileMenu"
							class="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors"
						>
							<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"></path>
							</svg>
						</button>
					</div>
					<!-- Desktop Actions -->
					<div class="hidden sm:flex items-center gap-2">
						<button
							@click="showChat = true"
							class="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium"
						>
							<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-3.582 8-8 8a8.013 8.013 0 01-7.93-6.94c-.42-.51-.92-.92-1.43-1.25-.63-.41-.63-1.33 0-1.74.51-.33 1.01-.74 1.43-1.25A8.013 8.013 0 0113 4c4.418 0 8 3.582 8 8z"></path>
							</svg>
							Continue Session
						</button>
						<button
							@click="toggleBookmark()"
							:class="isBookmarked ? 'text-red-600 bg-red-50 hover:bg-red-100' : 'text-gray-700 hover:bg-gray-100'"
							class="p-2 rounded-lg transition-colors"
						>
							<svg class="w-4 h-4" :class="isBookmarked ? 'fill-current' : ''" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
							</svg>
						</button>
						<button
							@click="shareItinerary()"
							class="p-2 text-gray-700 hover:bg-gray-100 rounded-lg transition-colors"
						>
							<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
							</svg>
						</button>
					</div>
				</div>
				<!-- View Mode Toggle (Mobile-First) -->
				<div class="mt-3 pt-3 border-t border-gray-200 dark:border-gray-700">
					<div class="flex bg-gray-100 dark:bg-gray-700 rounded-lg p-1">
						<button
							@click="viewMode = 'list'"
							:class="viewMode === 'list' ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm' : 'text-gray-600 dark:text-gray-300'"
							class="flex-1 px-3 py-2 rounded text-sm font-medium transition-colors"
						>
							<div class="flex items-center justify-center gap-1">
								<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
								</svg>
								<span class="hidden sm:inline">List</span>
							</div>
						</button>
						<button
							@click="viewMode = 'map'"
							:class="viewMode === 'map' ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm' : 'text-gray-600 dark:text-gray-300'"
							class="flex-1 px-3 py-2 rounded text-sm font-medium transition-colors"
						>
							<div class="flex items-center justify-center gap-1">
								<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7"></path>
								</svg>
								<span class="hidden sm:inline">Map</span>
							</div>
						</button>
						<button
							@click="viewMode = 'split'"
							:class="viewMode === 'split' ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm' : 'text-gray-600 dark:text-gray-300'"
							class="flex-1 px-3 py-2 rounded text-sm font-medium transition-colors"
						>
							<div class="flex items-center justify-center gap-1">
								<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2h-2a2 2 0 00-2 2"></path>
								</svg>
								<span class="hidden sm:inline">Split</span>
							</div>
						</button>
					</div>
				</div>
			</div>
			<!-- Mobile Menu -->
			<div
				x-show="showMobileMenu"
				x-transition:enter="transition ease-out duration-200"
				x-transition:enter-start="opacity-0 transform -translate-y-2"
				x-transition:enter-end="opacity-100 transform translate-y-0"
				x-transition:leave="transition ease-in duration-150"
				x-transition:leave-start="opacity-100 transform translate-y-0"
				x-transition:leave-end="opacity-0 transform -translate-y-2"
				class="sm:hidden border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-900"
				style="display: none;"
			>
				<div class="px-4 py-3 space-y-2">
					<button
						@click="showChat = true; showMobileMenu = false"
						class="w-full flex items-center gap-3 px-3 py-2 text-left text-gray-900 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
					>
						<svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-3.582 8-8 8a8.013 8.013 0 01-7.93-6.94c-.42-.51-.92-.92-1.43-1.25-.63-.41-.63-1.33 0-1.74.51-.33 1.01-.74 1.43-1.25A8.013 8.013 0 0113 4c4.418 0 8 3.582 8 8z"></path>
						</svg>
						<span class="font-medium">Continue Session</span>
					</button>
					<button
						@click="toggleBookmark(); showMobileMenu = false"
						class="w-full flex items-center gap-3 px-3 py-2 text-left text-gray-900 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
					>
						<svg class="w-5 h-5" :class="isBookmarked ? 'text-red-600 fill-current' : 'text-gray-600'" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
						</svg>
						<span x-text="isBookmarked ? 'Remove from Saved' : 'Save Itinerary'"></span>
					</button>
					<button
						@click="shareItinerary(); showMobileMenu = false"
						class="w-full flex items-center gap-3 px-3 py-2 text-left text-gray-900 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
					>
						<svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
						</svg>
						<span>Share Itinerary</span>
					</button>
					<button
						@click="exportItinerary(); showMobileMenu = false"
						class="w-full flex items-center gap-3 px-3 py-2 text-left text-gray-900 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
					>
						<svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
						</svg>
						<span>Export</span>
					</button>
				</div>
			</div>
		</div>
		<!-- Authentication Promotion Banner for Guests -->
		@banner.AuthPromoBanner()
		<!-- Main Content Area with Enhanced Mobile Layout -->
		<div class="flex-1 min-h-0">
			<!-- Map Container (Mobile-First) -->
			<div
				x-show="viewMode === 'map' || viewMode === 'split'"
				x-transition:enter="transition ease-out duration-300"
				x-transition:enter-start="opacity-0"
				x-transition:enter-end="opacity-100"
				class="relative"
			>
				<div
					:class="viewMode === 'map' ? 'h-[calc(100vh-200px)] md:h-[600px]' : viewMode === 'split' ? 'h-[300px] md:h-[400px] lg:h-[500px]' : 'h-[400px]'"
					class="w-full"
				>
					@MapContainer(itinerary.PointsOfInterest, nil, "session-placeholder", true, true, "blue", "itinerary")
				</div>
			</div>
			<!-- Content Layout for List/Split View -->
			<div class="px-4 py-4 sm:px-6">
				<div :class="viewMode === 'split' ? 'lg:grid lg:grid-cols-2 lg:gap-8' : ''" class="w-full">
					<!-- Left Column: City Info & All POIs -->
					<div
						x-show="viewMode === 'list' || viewMode === 'split'"
						class="w-full"
						:class="viewMode === 'split' ? 'lg:col-span-1' : ''"
					>
						<!-- City Information Section -->
						if cityData.City != "" && cityData.Description != "" {
							<div class="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-800 dark:to-gray-700 rounded-xl p-6 mb-6 border border-blue-100 dark:border-gray-600">
								<div class="flex items-start gap-4">
									<div class="w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center flex-shrink-0">
										<svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
										</svg>
									</div>
									<div class="flex-1">
										<h3 class="text-xl font-bold text-gray-900 dark:text-white mb-2">About { cityData.City }</h3>
										<p class="text-gray-700 dark:text-gray-300 leading-relaxed mb-4">{ cityData.Description }</p>
										<div class="grid grid-cols-2 sm:grid-cols-4 gap-4 text-sm">
											if cityData.Area != "" {
												<div class="flex items-center gap-2">
													<svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
														<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
													</svg>
													<span class="text-gray-600 dark:text-gray-400">Area: { cityData.Area }</span>
												</div>
											}
											if cityData.Timezone != "" {
												<div class="flex items-center gap-2">
													<svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
														<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
													</svg>
													<span class="text-gray-600 dark:text-gray-400">{ cityData.Timezone }</span>
												</div>
											}
											if cityData.Language != "" {
												<div class="flex items-center gap-2">
													<svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
														<path stroke-linecap="round" stroke-linejoin="round" d="m10.5 21 5.25-11.25L21 21m-9-3h7.5M3 5.621a48.474 48.474 0 0 1 6-.371m0 0c1.12 0 2.233.038 3.334.114M9 5.25V3m3.334 2.364C11.176 10.658 7.69 15.08 3 17.502m9.334-12.138c.896.061 1.785.147 2.666.257m-4.589 8.495a18.023 18.023 0 0 1-3.827-5.802" />
													</svg>
													<span class="text-gray-600 dark:text-gray-400">Language: { cityData.Language }</span>
												</div>
											}
											if cityData.Population != "" {
												<div class="flex items-center gap-2">
													<svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
														<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
													</svg>
													<span class="text-gray-600 dark:text-gray-400">Population: { cityData.Population }</span>
												</div>
											}
										</div>
									</div>
								</div>
							</div>
						}
						<!-- All Points of Interest Section -->
						if len(generalPOIs) > 0 {
							<div class="mb-8" x-data="{ expanded: false, initialLimit: 6 }">
								<div class="flex items-center justify-between mb-4">
									<div class="flex items-center gap-3">
										<h3 class="text-xl font-bold text-gray-900 dark:text-white">
											All Points of Interest in { cityData.City }
										</h3>
										<span class="bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 px-3 py-1 rounded-full text-sm font-medium">
											{ fmt.Sprintf("%d", len(generalPOIs)) } places
										</span>
									</div>
									if len(generalPOIs) > 6 {
										<button
											@click="expanded = !expanded"
											class="text-sm font-medium text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 flex items-center gap-2 transition-colors"
										>
											<span x-text="expanded ? 'Show less' : `Show all ${ len(generalPOIs) } places`">Show all { fmt.Sprintf("%d", len(generalPOIs)) } places</span>
											<svg
												class="w-4 h-4 transition-transform duration-200"
												:class="expanded ? 'rotate-180' : ''"
												fill="none"
												stroke="currentColor"
												viewBox="0 0 24 24"
											>
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
											</svg>
										</button>
									}
								</div>
								<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
									for i, poi := range generalPOIs {
										<div
											x-show={ fmt.Sprintf("expanded || %d < initialLimit", i) }
											x-transition:enter="transition ease-out duration-300"
											x-transition:enter-start="opacity-0 transform scale-95"
											x-transition:enter-end="opacity-100 transform scale-100"
											x-transition:leave="transition ease-in duration-200"
											x-transition:leave-start="opacity-100 transform scale-100"
											x-transition:leave-end="opacity-0 transform scale-95"
										>
											@AllPOICard(poi)
										</div>
									}
								</div>
							</div>
						} else {
							<!-- Placeholder when points_of_interest is null -->
							<div class="mb-8">
								<div class="bg-gray-50 dark:bg-gray-800 rounded-xl p-8 text-center border-2 border-dashed border-gray-300 dark:border-gray-600">
									<svg class="w-12 h-12 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
									</svg>
									<h4 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Points of Interest Coming Soon</h4>
									<p class="text-gray-600 dark:text-gray-400 mb-4">We're working on gathering detailed information about the best places to visit in { cityData.City }.</p>
									<button 
										@click="showChat = true"
										class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium"
									>
										<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-3.582 8-8 8a8.013 8.013 0 01-7.93-6.94c-.42-.51-.92-.92-1.43-1.25-.63-.41-.63-1.33 0-1.74.51-.33 1.01-.74 1.43-1.25A8.013 8.013 0 0113 4c4.418 0 8 3.582 8 8z"></path>
										</svg>
										Ask for Recommendations
									</button>
								</div>
							</div>
						}
					</div>

					<!-- Right Column: Curated Itinerary -->
					<div
						x-show="viewMode === 'list' || viewMode === 'split'"
						class="w-full"
						:class="viewMode === 'split' ? 'lg:col-span-1' : ''"
					>
						<!-- Curated Itinerary Section -->
						<div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4">
							<div class="flex items-center justify-between mb-4">
								<h3 class="text-lg font-bold text-gray-900 dark:text-white">Your Curated Itinerary</h3>
								<button 
									@click="showChat = true"
									class="text-sm font-medium text-blue-600 hover:underline"
								>
									Customize Order
								</button>
							</div>
							if len(itinerary.PointsOfInterest) > 0 {
								<div id="curated-itinerary-list" class="space-y-3">
									for i, poi := range itinerary.PointsOfInterest {
										@CuratedItineraryCard(poi, i+1)
									}
								</div>
							} else {
								<!-- Enhanced Placeholder for Curated Itinerary -->
								<div class="text-center py-8">
									<div class="w-16 h-16 bg-blue-100 dark:bg-blue-900/20 rounded-full flex items-center justify-center mx-auto mb-4">
										<svg class="w-8 h-8 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
										</svg>
									</div>
									<h4 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Your Personalized Itinerary</h4>
									<p class="text-gray-600 dark:text-gray-400 mb-2 text-sm leading-relaxed max-w-md mx-auto">
										{ itinerary.OverallDescription }
									</p>
									<p class="text-gray-500 dark:text-gray-400 text-xs mb-6">
										Click "Continue Session" to start building your personalized travel plan
									</p>
									<button 
										@click="showChat = true"
										class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all duration-200 text-sm font-medium shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
									>
										<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-3.582 8-8 8a8.013 8.013 0 01-7.93-6.94c-.42-.51-.92-.92-1.43-1.25-.63-.41-.63-1.33 0-1.74.51-.33 1.01-.74 1.43-1.25A8.013 8.013 0 0113 4c4.418 0 8 3.582 8 8z"></path>
										</svg>
										Continue Session
									</button>
								</div>
							}
						</div>
					</div>
				</div>
			</div>
		</div>
		<!-- Restaurants -->
		if len(itinerary.Restaurants) > 0 {
			<div class="mb-8">
				<h3 class="text-xl font-bold text-foreground mb-4 flex items-center gap-2">
					<i class="fas fa-utensils text-orange-600"></i>
					Recommended Restaurants
				</h3>
				<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
					for _, restaurant := range itinerary.Restaurants {
						@ItineraryRestaurantCard(restaurant, contains(favorites, restaurant.ID.String()))
					}
				</div>
			</div>
		}
		<!-- Bars & Nightlife -->
		if len(itinerary.Bars) > 0 {
			<div class="mb-8">
				<h3 class="text-xl font-bold text-foreground mb-4 flex items-center gap-2">
					<i class="fas fa-glass-cheers text-purple-600"></i>
					Bars & Nightlife
				</h3>
				<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
					for _, bar := range itinerary.Bars {
						@ItineraryBarCard(bar, contains(favorites, bar.ID.String()))
					}
				</div>
			</div>
		}
		if showToggle && len(itinerary.PointsOfInterest) > initialLimit {
			<div class="text-center mt-6">
				<button
					id="toggle-poi-btn"
					class="px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors"
					onclick="togglePOIs()"
				>
					<i class="fas fa-chevron-down mr-2"></i>
					<span id="toggle-poi-text">Show { fmt.Sprintf("%d", len(itinerary.PointsOfInterest) - initialLimit) } more places</span>
				</button>
			</div>
		}
	</div>
	<script>
		let poisExpanded = false;

		function togglePOIs() {
			const hiddenPOIs = document.querySelectorAll('.poi-card.hidden');
			const btn = document.getElementById('toggle-poi-btn');
			const toggleText = document.getElementById('toggle-poi-text');
			const chevron = btn.querySelector('i');

			if (!poisExpanded) {
				hiddenPOIs.forEach(card => card.classList.remove('hidden'));
				toggleText.textContent = 'Show fewer places';
				chevron.classList.remove('fa-chevron-down');
				chevron.classList.add('fa-chevron-up');
				poisExpanded = true;
			} else {
				hiddenPOIs.forEach(card => card.classList.add('hidden'));
				toggleText.textContent = `Show ${hiddenPOIs.length} more places`;
				chevron.classList.remove('fa-chevron-up');
				chevron.classList.add('fa-chevron-down');
				poisExpanded = false;
			}
		}

		function addToItinerary(poiId) {
			htmx.ajax('POST', `/itinerary/add/${poiId}`, {
				target: 'body',
				swap: 'none'
			});
			showNotification('Added to your itinerary!', 'success');
		}

		function togglePOIFavorite(poiId) {
			htmx.ajax('POST', `/favorites/poi/${poiId}`, {
				target: `#favorite-btn-${poiId}`,
				swap: 'outerHTML'
			});
		}
	</script>
	<!-- Chat Interface will be included at the bottom -->
	<!-- POI Details Modal -->
	<div
		x-show="selectedPOI"
		x-transition:enter="transition ease-out duration-300"
		x-transition:enter-start="opacity-0"
		x-transition:enter-end="opacity-100"
		x-transition:leave="transition ease-in duration-200"
		x-transition:leave-start="opacity-100"
		x-transition:leave-end="opacity-0"
		class="fixed inset-0 bg-black bg-opacity-50 flex items-end sm:items-center justify-center p-0 sm:p-4 z-50"
		style="display: none;"
		@click="selectedPOI = null"
	>
		@POIDetailsModal()
	</div>
	<!-- Mobile Chat FAB (Floating Action Button) -->
	<button
		x-show="!showChat && viewMode !== 'map'"
		@click="showChat = true"
		class="fixed bottom-6 right-6 w-14 h-14 bg-blue-600 hover:bg-blue-700 text-white rounded-full shadow-lg flex items-center justify-center z-40 sm:hidden"
	>
		<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-3.582 8-8 8a8.013 8.013 0 01-7.93-6.94c-.42-.51-.92-.92-1.43-1.25-.63-.41-.63-1.33 0-1.74.51-.33 1.01-.74 1.43-1.25A8.013 8.013 0 0113 4c4.418 0 8 3.582 8 8z"></path>
		</svg>
	</button>

	<!-- Inline Chat Interface to share Alpine.js context -->
	<!-- Chat Panel Overlay -->
	<div
		x-show="showChat"
		x-cloak
		x-transition:enter="transition ease-out duration-300"
		x-transition:enter-start="opacity-0"
		x-transition:enter-end="opacity-100"
		x-transition:leave="transition ease-in duration-200"
		x-transition:leave-start="opacity-100"
		x-transition:leave-end="opacity-0"
		class="fixed inset-0 bg-black bg-opacity-50 z-40"
		@click="showChat = false"
	></div>
	<!-- Chat Panel -->
	<div
		x-show="showChat"
		x-cloak
		x-transition:enter="transition ease-out duration-300"
		x-transition:enter-start="opacity-0 transform translate-x-full"
		x-transition:enter-end="opacity-100 transform translate-x-0"
		x-transition:leave="transition ease-in duration-200"
		x-transition:leave-start="opacity-100 transform translate-x-0"
		x-transition:leave-end="opacity-0 transform translate-x-full"
		class="fixed right-0 top-0 h-full w-full sm:w-96 bg-white dark:bg-gray-800 shadow-xl z-50 flex flex-col"
		@click.stop
	>
		<!-- Chat Header -->
		<div class="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700 bg-gradient-to-r from-blue-600 to-blue-700">
			<div class="flex items-center gap-3">
				<div class="w-8 h-8 bg-white bg-opacity-20 rounded-lg flex items-center justify-center">
					<svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-3.582 8-8 8a8.013 8.013 0 01-7.93-6.94c-.42-.51-.92-.92-1.43-1.25-.63-.41-.63-1.33 0-1.74.51-.33 1.01-.74 1.43-1.25A8.013 8.013 0 0113 4c4.418 0 8 3.582 8 8z"></path>
					</svg>
				</div>
				<div>
					<h2 class="text-lg font-semibold text-white">Continue Planning</h2>
					<p class="text-xs text-blue-100">Refine your itinerary with AI</p>
				</div>
			</div>
			<button
				@click="showChat = false"
				class="p-2 text-white hover:bg-white hover:bg-opacity-20 rounded-lg transition-colors"
			>
				<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
				</svg>
			</button>
		</div>
		<!-- Chat Messages Area -->
		<div class="flex-1 overflow-y-auto p-4 space-y-4" x-ref="chatMessages">
			<!-- Welcome Message -->
			<div class="flex gap-3">
				<div class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0">
					<svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09z"></path>
					</svg>
				</div>
				<div class="flex-1">
					<div class="bg-gray-100 dark:bg-gray-700 rounded-lg p-3">
						<p class="text-sm text-gray-800 dark:text-gray-200">
							Hi! I'm here to help you refine your itinerary. You can ask me to:
						</p>
						<ul class="text-xs text-gray-600 dark:text-gray-300 mt-2 space-y-1">
							<li>‚Ä¢ Add more places to visit</li>
							<li>‚Ä¢ Remove or replace locations</li>
							<li>‚Ä¢ Get recommendations for specific activities</li>
							<li>‚Ä¢ Optimize your route</li>
							<li>‚Ä¢ Find places to eat nearby</li>
						</ul>
					</div>
				</div>
			</div>
			<!-- Chat Messages Container -->
			<div id="chat-messages-container" class="space-y-4">
				<!-- Messages will be dynamically added here -->
			</div>
			<!-- Loading Message -->
			<div x-show="chatLoading" x-cloak class="flex gap-3">
				<div class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0">
					<div class="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
				</div>
				<div class="flex-1">
					<div class="bg-gray-100 dark:bg-gray-700 rounded-lg p-3">
						<div class="flex items-center gap-2">
							<div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
							<div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.1s"></div>
							<div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<!-- Chat Input -->
		<div class="border-t border-gray-200 dark:border-gray-700 p-4 bg-gray-50 dark:bg-gray-900">
			<form @submit.prevent="sendChatMessage()" class="flex gap-2">
				<div class="flex-1 relative">
					<textarea
						x-model="chatMessage"
						x-ref="chatInput"
						@keydown.enter.prevent="if(!$event.shiftKey) sendChatMessage()"
						placeholder="Ask me to refine your itinerary..."
						rows="2"
						class="block w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500 text-sm resize-none dark:bg-gray-800 dark:border-gray-600 dark:text-white dark:placeholder-gray-400"
						:disabled="chatLoading"
					></textarea>
					<div class="absolute bottom-2 right-2 text-xs text-gray-400">
						Press Enter to send
					</div>
				</div>
				<button
					type="submit"
					:disabled="!chatMessage.trim() || chatLoading"
					class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex-shrink-0"
				>
					<svg x-show="!chatLoading" class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
					</svg>
					<div x-show="chatLoading" x-cloak class="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
				</button>
			</form>
			<!-- Quick Actions -->
			<div class="flex flex-wrap gap-2 mt-3">
				<button
					@click="setChatMessage('Add more restaurants to my itinerary')"
					class="px-3 py-1 text-xs bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-full hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
				>
					üçΩÔ∏è Add restaurants
				</button>
				<button
					@click="setChatMessage('Find activities for the evening')"
					class="px-3 py-1 text-xs bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-full hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
				>
					üåô Evening activities
				</button>
				<button
					@click="setChatMessage('Optimize the route between places')"
					class="px-3 py-1 text-xs bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-full hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
				>
					üó∫Ô∏è Optimize route
				</button>
				<button
					@click="setChatMessage('Remove expensive activities')"
					class="px-3 py-1 text-xs bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-full hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
				>
					üí∞ Budget-friendly
				</button>
			</div>
		</div>

		<!-- Chat Panel for continuing conversation -->
		if sessionID != "" {
			@chat.ChatPanel(chat.ChatPanelProps{
				SessionID:   sessionID,
				CityName:    cityData.City,
				Domain:      "itinerary",
				Placeholder: "Ask to modify your itinerary...",
				ShowByDefault: false,
			})
		}
	</div>
	@components.LocationRequestBanner(true)
	@components.FloatingLocationButton()
	@ItineraryStateScript()
	@components.LocationScript()
}

// Enhanced POI Card with Mobile-First Design
templ EnhancedPOICard(poi models.POIDetailedInfo, priority int, isFavorite bool, isHidden bool) {
	<div
		class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden hover:shadow-lg transition-all duration-300"
		x-show="shouldShowPOI({name: '{ poi.Name }', category: '{ poi.Category }', description: '{ poi.Description }'})"
	>
		<div class="flex flex-col sm:flex-row">
			<!-- POI Image (Mobile-First) -->
			<div class="relative flex-shrink-0">
				if len(poi.Images) > 0 && poi.Images[0] != "" {
					<img
						class="h-48 w-full sm:h-32 sm:w-48 object-cover"
						src={ poi.Images[0] }
						alt={ poi.Name }
						loading="lazy"
					/>
				} else {
					<div class="h-48 w-full sm:h-32 sm:w-48 bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center">
						<div class="text-center text-white">
							<svg class="w-12 h-12 mx-auto mb-2 opacity-80" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
							</svg>
							<span class="text-xs opacity-80">{ getCategoryEmoji(poi.Category) }</span>
						</div>
					</div>
				}
				<!-- Priority Badge -->
				<div class="absolute top-3 left-3 w-8 h-8 bg-white dark:bg-gray-800 rounded-full flex items-center justify-center shadow-lg">
					<span class="text-sm font-bold text-gray-900 dark:text-white">{ fmt.Sprintf("%d", priority) }</span>
				</div>
				<!-- Favorite Button -->
				<button
					@click.stop="togglePOIFavorite('{ poi.ID.String() }')"
					class="absolute top-3 right-3 w-8 h-8 bg-white dark:bg-gray-800 rounded-full flex items-center justify-center shadow-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
				>
					<svg class="w-4 h-4" :class="{ fmt.Sprintf(`'text-red-500 fill-current': %t`, isFavorite) }" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
					</svg>
				</button>
			</div>
			<!-- POI Content -->
			<div class="flex-1 p-4">
				<div class="flex flex-col h-full">
					<!-- Header -->
					<div class="flex items-start justify-between mb-3">
						<div class="flex-1 min-w-0">
							<h3
								class="text-lg font-semibold text-gray-900 dark:text-white mb-1 line-clamp-2 cursor-pointer hover:text-blue-600 transition-colors"
								@click={ fmt.Sprintf("selectPOI({name: '%s', description: '%s', category: '%s', address: '%s', rating: %.1f})",
									strings.ReplaceAll(poi.Name, "'", "\\'"),
									strings.ReplaceAll(poi.Description, "'", "\\'"),
									poi.Category,
									strings.ReplaceAll(poi.Address, "'", "\\'"),
									poi.Rating) }
							>
								{ poi.Name }
							</h3>
							<div class="flex items-center gap-2 mb-2">
								if poi.Category != "" {
									<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300">
										<span class="mr-1">{ getCategoryEmoji(poi.Category) }</span>
										{ poi.Category }
									</span>
								}
								if poi.Rating > 0 {
									<div class="flex items-center gap-1">
										<svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
											<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
										</svg>
										<span class="text-sm font-medium text-gray-700 dark:text-gray-300">
											{ fmt.Sprintf("%.1f", poi.Rating) }
										</span>
									</div>
								}
							</div>
						</div>
					</div>
					<!-- Description -->
					if poi.Description != "" {
						<p class="text-sm text-gray-600 dark:text-gray-300 mb-4 line-clamp-3">
							{ poi.Description }
						</p>
					}
					<!-- Tags/Features (Mobile-Optimized) -->
					if len(poi.Tags) > 0 {
						<div class="flex flex-wrap gap-2 mb-4">
							for _, tag := range poi.Tags[:min(4, len(poi.Tags))] {
								<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300">
									{ tag }
								</span>
							}
							if len(poi.Tags) > 4 {
								<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-500 dark:bg-gray-700 dark:text-gray-400">
									+{ fmt.Sprintf("%d", len(poi.Tags)-4) } more
								</span>
							}
						</div>
					}
					<!-- Footer Information -->
					<div class="mt-auto">
						<div class="flex items-center justify-between">
							<div class="flex flex-col gap-1 text-xs text-gray-500 dark:text-gray-400">
								if poi.Address != "" {
									<div class="flex items-center gap-1">
										<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
										</svg>
										<span class="line-clamp-1">{ poi.Address }</span>
									</div>
								}
								<div class="flex items-center gap-3">
									if poi.TimeToSpend != "" {
										<div class="flex items-center gap-1">
											<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
											</svg>
											<span>{ poi.TimeToSpend }</span>
										</div>
									}
									if poi.Budget != "" {
										<div class="flex items-center gap-1">
											<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
											</svg>
											<span class={ getBudgetColor(poi.Budget) }>{ poi.Budget }</span>
										</div>
									}
								</div>
							</div>
							<!-- Action Buttons (Mobile-First) -->
							<div class="flex flex-col sm:flex-row gap-2">
								<button
									@click.stop={ fmt.Sprintf("selectPOI({name: '%s', description: '%s', category: '%s', address: '%s', rating: %.1f})",
									strings.ReplaceAll(poi.Name, "'", "\\'"),
									strings.ReplaceAll(poi.Description, "'", "\\'"),
									poi.Category,
									strings.ReplaceAll(poi.Address, "'", "\\'"),
									poi.Rating) }
									class="px-3 py-2 text-xs font-medium text-blue-600 bg-blue-50 hover:bg-blue-100 dark:bg-blue-900/20 dark:hover:bg-blue-900/30 rounded-lg transition-colors"
								>
									View Details
								</button>
								if poi.Website != "" {
									<a
										href={ poi.Website }
										target="_blank"
										rel="noopener noreferrer"
										class="px-3 py-2 text-xs font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 rounded-lg transition-colors text-center"
									>
										Website
									</a>
								}
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ ItineraryPOICard(poi models.POIDetailedInfo, priority int, isFavorite bool) {
	<div class="poi-card bg-card rounded-xl shadow-sm border p-4 hover:shadow-md transition-all duration-300">
		<div class="flex items-start gap-4">
			<div class="flex-shrink-0">
				<div
					class={ "w-12 h-12 rounded-full flex items-center justify-center text-white font-bold text-lg",
					getPriorityColor(priority) }
				>
					{ fmt.Sprintf("%d", priority) }
				</div>
			</div>
			<div class="flex-1 min-w-0">
				<div class="flex items-start justify-between mb-2">
					<div class="flex-1">
						<h4 class="font-semibold text-lg text-foreground mb-1 cursor-pointer hover:text-primary transition-colors">
							{ poi.Name }
						</h4>
						if poi.Category != "" {
							<p class="text-sm text-blue-600 dark:text-blue-400 font-medium mb-1 flex items-center gap-1">
								<span>{ getCategoryEmoji(poi.Category) }</span>
								{ poi.Category }
							</p>
						}
						if poi.Address != "" {
							<p class="text-sm text-muted-foreground flex items-center mb-1">
								<i class="fas fa-map-marker-alt mr-1"></i>
								{ poi.Address }
							</p>
						}
					</div>
					<div class="flex items-center gap-2 ml-4">
						if poi.Rating > 0 {
							<div class="flex items-center gap-1">
								<i class="fas fa-star text-yellow-500"></i>
								<span class="text-sm font-medium text-yellow-600">
									{ fmt.Sprintf("%.1f", poi.Rating) }
								</span>
							</div>
						}
						<button
							id={ fmt.Sprintf("favorite-btn-%s", poi.ID.String()) }
							class={ "p-2 rounded-full hover:bg-accent transition-colors",
								templ.KV("text-yellow-500", isFavorite), templ.KV("text-muted-foreground", !isFavorite) }
							onclick="togglePOIFavorite('{ poi.ID.String() }')"
							if isFavorite {
								title="Remove from favorites"
							} else {
								title="Add to favorites"
							}
						>
							<i class={ "fas", templ.KV("fa-star", isFavorite), templ.KV("fa-star-o", !isFavorite) }></i>
						</button>
					</div>
				</div>
				if poi.Description != "" {
					<p class="text-sm text-muted-foreground mb-3 line-clamp-2">
						{ poi.Description }
					</p>
				}
				<div class="flex flex-wrap gap-2 mb-4">
					for _, tag := range poi.Tags {
						<span class="px-2 py-1 bg-accent text-accent-foreground text-xs rounded-full">
							{ tag }
						</span>
					}
				</div>
				<div class="flex items-center justify-between">
					<div class="flex items-center gap-4 text-sm text-muted-foreground">
						if poi.TimeToSpend != "" {
							<div class="flex items-center gap-1">
								<i class="fas fa-clock"></i>
								<span>{ poi.TimeToSpend }</span>
							</div>
						}
						if poi.Budget != "" {
							<div class="flex items-center gap-1">
								<i class="fas fa-euro-sign"></i>
								<span class={ getBudgetColor(poi.Budget) }>{ poi.Budget }</span>
							</div>
						}
					</div>
					<div class="flex gap-2">
						<button
							class="px-3 py-2 bg-secondary text-secondary-foreground rounded-lg text-sm hover:bg-secondary/80 transition-colors"
							onclick="addToItinerary('{ poi.ID.String() }')"
						>
							<i class="fas fa-plus mr-1"></i>
							Add to Trip
						</button>
						if poi.Website != "" {
							<a
								href="{ poi.Website }"
								target="_blank"
								rel="noopener noreferrer"
								class="px-3 py-2 bg-primary text-primary-foreground rounded-lg text-sm hover:bg-primary/90 transition-colors"
							>
								<i class="fas fa-external-link-alt mr-1"></i>
								Details
							</a>
						}
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ ItineraryRestaurantCard(restaurant models.POIDetailedInfo, isFavorite bool) {
	<div class="bg-card rounded-lg shadow-sm border p-4 hover:shadow-md transition-all duration-300">
		<div class="flex items-start gap-3">
			<div class="w-12 h-12 bg-gradient-to-br from-orange-400 to-red-500 rounded-lg flex items-center justify-center">
				<i class="fas fa-utensils text-white"></i>
			</div>
			<div class="flex-1 min-w-0">
				<div class="flex items-start justify-between mb-2">
					<h4 class="font-semibold text-foreground">{ restaurant.Name }</h4>
					if restaurant.Rating > 0 {
						<div class="flex items-center gap-1">
							<i class="fas fa-star text-yellow-500"></i>
							<span class="text-sm font-medium">{ fmt.Sprintf("%.1f", restaurant.Rating) }</span>
						</div>
					}
				</div>
				if restaurant.Description != "" {
					<p class="text-sm text-muted-foreground mb-2 line-clamp-2">{ restaurant.Description }</p>
				}
				if restaurant.Address != "" {
					<p class="text-xs text-muted-foreground mb-2">{ restaurant.Address }</p>
				}
				<div class="flex justify-between items-center">
					if restaurant.Budget != "" {
						<span class={ "text-sm font-medium", getBudgetColor(restaurant.Budget) }>
							{ restaurant.Budget }
						</span>
					}
					<button class="text-xs px-2 py-1 bg-primary text-primary-foreground rounded">
						View Menu
					</button>
				</div>
			</div>
		</div>
	</div>
}

templ ItineraryBarCard(bar models.POIDetailedInfo, isFavorite bool) {
	<div class="bg-card rounded-lg shadow-sm border p-4 hover:shadow-md transition-all duration-300">
		<div class="flex items-start gap-3">
			<div class="w-12 h-12 bg-gradient-to-br from-purple-400 to-pink-500 rounded-lg flex items-center justify-center">
				<i class="fas fa-glass-cheers text-white"></i>
			</div>
			<div class="flex-1 min-w-0">
				<div class="flex items-start justify-between mb-2">
					<h4 class="font-semibold text-foreground">{ bar.Name }</h4>
					if bar.Rating > 0 {
						<div class="flex items-center gap-1">
							<i class="fas fa-star text-yellow-500"></i>
							<span class="text-sm font-medium">{ fmt.Sprintf("%.1f", bar.Rating) }</span>
						</div>
					}
				</div>
				if bar.Description != "" {
					<p class="text-sm text-muted-foreground mb-2 line-clamp-2">{ bar.Description }</p>
				}
				if bar.Address != "" {
					<p class="text-xs text-muted-foreground mb-2">{ bar.Address }</p>
				}
				<div class="flex justify-between items-center">
					if bar.Budget != "" {
						<span class={ "text-sm font-medium", getBudgetColor(bar.Budget) }>
							{ bar.Budget }
						</span>
					}
					<button class="text-xs px-2 py-1 bg-primary text-primary-foreground rounded">
						More Info
					</button>
				</div>
			</div>
		</div>
	</div>
}

// Utility functions for itinerary
func getItineraryName(name string) string {
	if name == "" {
		return "Your Personalized Itinerary"
	}
	// Handle JSON string format if needed
	if strings.HasPrefix(name, "{") && strings.HasSuffix(name, "}") {
		return "Personalized Travel Plan"
	}
	return name
}

func getPriorityColor(priority int) string {
	switch {
	case priority == 1:
		return "bg-green-500"
	case priority <= 3:
		return "bg-blue-500"
	case priority <= 5:
		return "bg-yellow-500"
	case priority <= 7:
		return "bg-orange-500"
	default:
		return "bg-gray-500"
	}
}

func getItineraryCategoryEmoji(category string) string {
	categoryEmojis := map[string]string{
		"museum":        "üèõÔ∏è",
		"park":          "üå≥",
		"restaurant":    "üçΩÔ∏è",
		"bar":           "üç∏",
		"attraction":    "üéØ",
		"historical":    "üèõÔ∏è",
		"cultural":      "üé≠",
		"entertainment": "üé™",
		"shopping":      "üõçÔ∏è",
		"beach":         "üèñÔ∏è",
		"monument":      "üóø",
		"church":        "‚õ™",
		"cathedral":     "üè∞",
		"palace":        "üè∞",
		"castle":        "üè∞",
		"tower":         "üóº",
		"bridge":        "üåâ",
		"gallery":       "üñºÔ∏è",
		"theater":       "üé≠",
		"market":        "üõçÔ∏è",
		"viewpoint":     "üëÄ",
		"garden":        "üå∫",
	}

	if emoji, exists := categoryEmojis[strings.ToLower(category)]; exists {
		return emoji
	}
	return "üìç"
}

func getBudgetColor(budget string) string {
	switch strings.ToLower(budget) {
	case "free", "‚Ç¨":
		return "text-green-600"
	case "budget", "‚Ç¨‚Ç¨":
		return "text-blue-600"
	case "moderate", "‚Ç¨‚Ç¨‚Ç¨":
		return "text-orange-600"
	case "expensive", "‚Ç¨‚Ç¨‚Ç¨‚Ç¨":
		return "text-red-600"
	default:
		return "text-gray-600"
	}
}

// Helper function to get today's opening hours from the map
func getTodayOpeningHours(openingHours map[string]string) string {
	if len(openingHours) == 0 {
		return ""
	}

	// Get current day of week
	now := time.Now()
	dayName := now.Format("Monday")

	// Try to find today's hours
	if hours, ok := openingHours[dayName]; ok && hours != "" {
		return hours
	}

	// Try lowercase version
	if hours, ok := openingHours[strings.ToLower(dayName)]; ok && hours != "" {
		return hours
	}

	// Try abbreviated version (Mon, Tue, etc.)
	shortDay := dayName[:3]
	if hours, ok := openingHours[shortDay]; ok && hours != "" {
		return hours
	}

	// Try lowercase abbreviated
	if hours, ok := openingHours[strings.ToLower(shortDay)]; ok && hours != "" {
		return hours
	}

	// If no specific day found, return first available hours
	for _, hours := range openingHours {
		if hours != "" {
			return hours
		}
	}

	return "Hours vary"
}

// Helper function for min
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

// Helper function to check if item exists in slice
func contains(slice []string, item string) bool {
	for _, s := range slice {
		if s == item {
			return true
		}
	}
	return false
}

func getCityProvince(province string) string {
	if province != "" {
		return ", " + province
	}
	return ""
}

script ItineraryStateScript() {
    function itineraryPage() {
        return {
            viewMode: 'list',
            showChat: false,
            showMobileMenu: false,
            isBookmarked: false,
            selectedPOI: null,
            chatMessage: '',
            chatLoading: false,

            init() {
                // Set up SSE event listeners for dynamic item management
                document.addEventListener('htmx:sseMessage', (event) => {
                    const sseEvent = event.detail;

                    // Parse the SSE data
                    let eventData;
                    try {
                        eventData = typeof sseEvent.data === 'string' ? JSON.parse(sseEvent.data) : sseEvent.data;
                    } catch (e) {
                        console.log('Non-JSON SSE event:', sseEvent);
                        return;
                    }

                    console.log('SSE Event received:', eventData);

                    // Handle item_added events
                    if (eventData.type === 'item_added' && eventData.domain === 'itinerary') {
                        this.handleItemAdded(eventData);
                    }

                    // Handle item_removed events
                    if (eventData.type === 'item_removed' && eventData.domain === 'itinerary') {
                        this.handleItemRemoved(eventData);
                    }

                    // Handle item_updated events
                    if (eventData.type === 'item_updated' && eventData.domain === 'itinerary') {
                        this.handleItemUpdated(eventData);
                    }
                });

                console.log('Itinerary SSE listeners initialized');
            },

            handleItemAdded(eventData) {
                console.log('Adding item to itinerary:', eventData);

                // Get the itinerary list container
                const container = document.getElementById('curated-itinerary-list');
                if (!container) {
                    console.warn('Itinerary list container not found');
                    return;
                }

                // Create temporary div to parse HTML
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = eventData.html;
                const newElement = tempDiv.firstElementChild;

                if (newElement) {
                    // Append the new POI card to the list
                    container.appendChild(newElement);

                    // Add marker to map if coordinates are valid
                    if (eventData.item_data && eventData.item_data.latitude && eventData.item_data.longitude) {
                        this.addMarkerToMap(eventData.item_data);
                    }

                    // Show success message
                    console.log('Item added successfully:', eventData.message);
                    // TODO: Show toast notification
                }
            },

            handleItemRemoved(eventData) {
                console.log('Removing item from itinerary:', eventData);

                // Find and remove the POI card by ID
                const element = document.getElementById(`poi-${eventData.item_id}`);
                if (element) {
                    element.remove();

                    // Remove marker from map
                    this.removeMarkerFromMap(eventData.item_id);

                    // Show success message
                    console.log('Item removed successfully:', eventData.message);
                    // TODO: Show toast notification
                } else {
                    console.warn('Item not found for removal:', eventData.item_id);
                }
            },

            handleItemUpdated(eventData) {
                console.log('Updating item in itinerary:', eventData);

                // Find the existing POI card
                const element = document.getElementById(`poi-${eventData.item_id}`);
                if (element && eventData.html) {
                    // Create temporary div to parse HTML
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = eventData.html;
                    const newElement = tempDiv.firstElementChild;

                    if (newElement) {
                        // Replace the old element with the new one
                        element.replaceWith(newElement);

                        // Update marker on map if coordinates changed
                        if (eventData.item_data && eventData.item_data.latitude && eventData.item_data.longitude) {
                            this.removeMarkerFromMap(eventData.item_id);
                            this.addMarkerToMap(eventData.item_data);
                        }

                        // Show success message
                        console.log('Item updated successfully:', eventData.message);
                        // TODO: Show toast notification
                    }
                } else {
                    console.warn('Item not found for update:', eventData.item_id);
                }
            },

            addMarkerToMap(itemData) {
                // Check if map and mapbox are available
                if (!window.map || !window.mapboxgl) {
                    console.warn('Map not available for adding marker');
                    return;
                }

                const { latitude, longitude, name, category, index } = itemData;

                // Validate coordinates
                if (!latitude || !longitude || latitude === 0 && longitude === 0) {
                    console.warn('Invalid coordinates for marker:', itemData);
                    return;
                }

                // Create marker element with numbered styling (blue for itinerary)
                const markerEl = document.createElement('div');
                markerEl.className = 'poi-marker';
                markerEl.style.cssText = `
                    width: 32px;
                    height: 32px;
                    background-color: white;
                    border: 3px solid #2563eb;
                    border-radius: 50%;
                    cursor: pointer;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    font-weight: bold;
                    font-size: 14px;
                    color: #2563eb;
                `;
                markerEl.textContent = index ? index.toString() : '‚óè';
                markerEl.dataset.itemId = itemData.item_id || name;

                // Create popup
                const popup = new mapboxgl.Popup({
                    offset: 25,
                    closeButton: true,
                    closeOnClick: false
                }).setHTML(`
                    <div class="p-2 max-w-xs">
                        <h3 class="font-medium text-gray-900 mb-1">${name}</h3>
                        <div class="flex items-center gap-1 text-xs text-gray-500">
                            <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
                            </svg>
                            ${category || 'Point of Interest'}
                        </div>
                    </div>
                `);

                // Add marker to map
                const marker = new mapboxgl.Marker(markerEl)
                    .setLngLat([longitude, latitude])
                    .setPopup(popup)
                    .addTo(window.map);

                // Store marker reference for later removal
                if (!window.itineraryMarkers) {
                    window.itineraryMarkers = new Map();
                }
                window.itineraryMarkers.set(itemData.item_id || name, marker);

                // Recalculate map bounds to include new marker
                this.recalculateMapBounds();

                console.log('Marker added to map:', name);
            },

            removeMarkerFromMap(itemId) {
                if (!window.itineraryMarkers || !window.itineraryMarkers.has(itemId)) {
                    console.warn('Marker not found for removal:', itemId);
                    return;
                }

                const marker = window.itineraryMarkers.get(itemId);
                marker.remove();
                window.itineraryMarkers.delete(itemId);

                // Recalculate map bounds after removal
                this.recalculateMapBounds();

                console.log('Marker removed from map:', itemId);
            },

            recalculateMapBounds() {
                if (!window.map || !window.mapboxgl) return;

                // Get all current markers
                const markers = window.itineraryMarkers ? Array.from(window.itineraryMarkers.values()) : [];

                if (markers.length === 0) return;

                // Create bounds object
                const bounds = new mapboxgl.LngLatBounds();

                // Extend bounds for each marker
                markers.forEach(marker => {
                    const lngLat = marker.getLngLat();
                    bounds.extend(lngLat);
                });

                // Calculate responsive padding
                const padding = {
                    top: window.innerWidth < 640 ? 40 : 60,
                    bottom: window.innerWidth < 640 ? 40 : 80,
                    left: window.innerWidth < 640 ? 20 : 60,
                    right: window.innerWidth < 640 ? 20 : 60
                };

                // Fit map to bounds
                window.map.fitBounds(bounds, {
                    padding: padding,
                    maxZoom: 15,
                    duration: 1000
                });

                console.log('Map bounds recalculated');
            },

            toggleBookmark() {
                this.isBookmarked = !this.isBookmarked;
                console.log('Bookmark toggled:', this.isBookmarked);
            },

            shareItinerary() {
                if (navigator.share) {
                    navigator.share({
                        title: 'My Travel Itinerary',
                        text: 'Check out my personalized travel itinerary!',
                        url: window.location.href
                    });
                } else {
                    navigator.clipboard.writeText(window.location.href).then(() => {
                        alert('Link copied to clipboard!');
                    });
                }
            },

            shouldShowPOI(poi) {
                return true;
            },

            togglePOIFavorite(poiId) {
                console.log('Toggle favorite for POI:', poiId);
            },

            setViewMode(mode) {
                this.viewMode = mode;
            },

            setChatMessage(message) {
                this.chatMessage = message;
                this.$refs.chatInput?.focus();
            },

            sendChatMessage() {
                const message = this.chatMessage.trim();
                if (!message || this.chatLoading) return;

                // Add user message to chat
                this.addChatMessage(message, 'user');
                
                // Clear input
                this.chatMessage = '';
                
                // Set loading state
                this.chatLoading = true;

                // Get user location if available
                let userLocation = null;
                if (window.locationManager) {
                    const locationInstance = window.locationManager();
                    userLocation = locationInstance.getUserLocationForAPI();
                }
                
                const requestBody = {
                    message: message,
                    session_id: 'session-placeholder',
                    context: 'itinerary_refinement'
                };
                
                // Include location data if available
                if (userLocation) {
                    requestBody.user_location = userLocation;
                }
                
                fetch('/api/chat/unified', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestBody)
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    
                    // Handle streaming response
                    const reader = response.body.getReader();
                    const decoder = new TextDecoder();
                    let assistantMessage = '';

                    const readStream = () => {
                        return reader.read().then(({ done, value }) => {
                            if (done) {
                                this.chatLoading = false;
                                return;
                            }

                            const chunk = decoder.decode(value);
                            const lines = chunk.split('\\n');

                            for (const line of lines) {
                                if (line.startsWith('data: ')) {
                                    try {
                                        const data = JSON.parse(line.slice(6));
                                        if (data.content) {
                                            assistantMessage += data.content;
                                            this.updateChatMessage(assistantMessage, 'assistant');
                                        }
                                        if (data.done) {
                                            this.chatLoading = false;
                                            return;
                                        }
                                    } catch (e) {
                                        console.log('Non-JSON line:', line);
                                    }
                                }
                            }

                            return readStream();
                        });
                    };

                    // Start reading the stream
                    this.addChatMessage('', 'assistant');
                    return readStream();
                })
                .catch(error => {
                    console.error('Chat error:', error);
                    this.addChatMessage('Sorry, I encountered an error. Please try again.', 'assistant');
                    this.chatLoading = false;
                });
            },

            addChatMessage(message, sender) {
                const container = document.getElementById('chat-messages-container');
                if (!container) return;
                
                const messageId = 'msg-' + Date.now();
                const messageDiv = document.createElement('div');
                messageDiv.id = messageId;
                messageDiv.className = 'flex gap-3';
                
                const isUser = sender === 'user';
                messageDiv.innerHTML = `
                    <div class="w-8 h-8 ${isUser ? 'bg-gray-600' : 'bg-blue-600'} rounded-full flex items-center justify-center flex-shrink-0">
                        ${isUser ? 
                            '<svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path></svg>' :
                            '<svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09z"></path></svg>'
                        }
                    </div>
                    <div class="flex-1">
                        <div class="bg-${isUser ? 'blue-600 text-white' : 'gray-100 dark:bg-gray-700'} rounded-lg p-3">
                            <p class="text-sm ${isUser ? 'text-white' : 'text-gray-800 dark:text-gray-200'}" id="${messageId}-content">
                                ${message || (isUser ? '' : '<div class="w-2 h-2 bg-gray-400 rounded-full animate-pulse"></div>')}
                            </p>
                        </div>
                    </div>
                `;
                
                container.appendChild(messageDiv);
                this.scrollChatToBottom();
                return messageId;
            },

            updateChatMessage(message, sender) {
                const containers = document.querySelectorAll('#chat-messages-container [id^="msg-"]');
                if (containers.length > 0) {
                    const lastMessage = containers[containers.length - 1];
                    const contentElement = lastMessage.querySelector('[id$="-content"]');
                    if (contentElement) {
                        contentElement.innerHTML = `<span class="text-sm text-gray-800 dark:text-gray-200">${this.escapeHtml(message)}</span>`;
                    }
                }
                this.scrollChatToBottom();
            },

            scrollChatToBottom() {
                const chatMessages = this.$refs.chatMessages;
                if (chatMessages) {
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }
            },

            escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }
        };
    }

    document.addEventListener('alpine:init', () => {
        Alpine.data('itineraryPage', itineraryPage);
    });
}

// GeneralPOICard component for displaying city highlights
templ GeneralPOICard(poi models.POIDetailedInfo) {
	<div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden hover:shadow-lg transition-all duration-300 group">
		<div class="relative">
			<!-- POI Image -->
			if len(poi.Images) > 0 && poi.Images[0] != "" {
				<img
					class="h-48 w-full object-cover group-hover:scale-105 transition-transform duration-300"
					src={ poi.Images[0] }
					alt={ poi.Name }
					loading="lazy"
				/>
			} else {
				<div class="h-48 w-full bg-gradient-to-br from-green-400 to-blue-500 flex items-center justify-center">
					<svg class="w-12 h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
					</svg>
				</div>
			}
			<!-- Category Badge -->
			if poi.Category != "" {
				<div class="absolute top-3 left-3">
					<span class="bg-white/90 backdrop-blur-sm text-gray-800 px-3 py-1 rounded-full text-sm font-medium shadow-sm">
						{ poi.Category }
					</span>
				</div>
			}
		</div>
		<div class="p-4">
			<div class="flex items-start justify-between mb-3">
				<h4 class="font-semibold text-gray-900 dark:text-white text-lg group-hover:text-green-600 dark:group-hover:text-green-400 transition-colors">
					{ poi.Name }
				</h4>
				if poi.Rating > 0 {
					<div class="flex items-center gap-1 flex-shrink-0">
						<svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
							<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
						</svg>
						<span class="text-sm font-medium text-gray-700 dark:text-gray-300">
							{ formatRating(poi.Rating) }
						</span>
					</div>
				}
			</div>
			<!-- Description -->
			if poi.Description != "" {
				<p class="text-gray-600 dark:text-gray-300 text-sm leading-relaxed mb-4 line-clamp-2">
					{ poi.Description }
				</p>
			}
			<!-- Address -->
			if poi.Address != "" {
				<div class="flex items-center gap-2 text-xs text-gray-500 dark:text-gray-400 mb-3">
					<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
					</svg>
					<span class="truncate">{ poi.Address }</span>
				</div>
			}
			<!-- Tags -->
			if len(poi.Tags) > 0 {
				<div class="flex flex-wrap gap-1 mb-4">
					for _, tag := range poi.Tags[:minInt(3, len(poi.Tags))] {
						<span class="bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 px-2 py-1 rounded-full text-xs">
							{ tag }
						</span>
					}
					if len(poi.Tags) > 3 {
						<span class="bg-gray-100 dark:bg-gray-700 text-gray-500 dark:text-gray-400 px-2 py-1 rounded-full text-xs">
							+{ fmt.Sprintf("%d", len(poi.Tags)-3) }
						</span>
					}
				</div>
			}
			<!-- Action Buttons -->
			<div class="flex items-center justify-between">
				<button class="text-green-600 hover:text-green-700 text-sm font-medium hover:bg-green-50 dark:hover:bg-green-900/20 px-3 py-2 rounded-lg transition-colors">
					View Details
				</button>
				<div class="flex gap-2">
					<button class="p-2 text-gray-400 hover:text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-full transition-colors" title="Add to favorites">
						<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
						</svg>
					</button>
					<button class="p-2 text-gray-400 hover:text-blue-500 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-full transition-colors" title="Share">
						<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
						</svg>
					</button>
				</div>
			</div>
		</div>
	</div>
}

func formatRating(rating float64) string {
	if rating == float64(int(rating)) {
		return fmt.Sprintf("%.0f", rating)
	}
	return fmt.Sprintf("%.1f", rating)
}

func minInt(a, b int) int {
	if a < b {
		return a
	}
	return b
}

// CuratedItineraryCard for the "Your Curated Itinerary" section (split view)
templ CuratedItineraryCard(poi models.POIDetailedInfo, order int) {
	<div class="border border-gray-200 dark:border-gray-700 rounded-lg p-3 hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors">
		<div class="flex items-start gap-3">
			<div class="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white font-bold text-sm flex-shrink-0">
				{ fmt.Sprintf("%d", order) }
			</div>
			<div class="flex-1 min-w-0">
				<h4 class="font-medium text-gray-900 dark:text-white line-clamp-1 mb-1">{ poi.Name }</h4>
				<div class="flex items-center gap-2 mb-2 flex-wrap">
					if poi.Category != "" {
						<span class="text-xs text-gray-600 dark:text-gray-400">{ poi.Category }</span>
					}
					if poi.Rating > 0 {
						<div class="flex items-center gap-1">
							for i := 0; i < int(poi.Rating); i++ {
								<svg class="w-3 h-3 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
									<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
								</svg>
							}
							<span class="text-xs text-gray-600 dark:text-gray-400">{ fmt.Sprintf("%.1f", poi.Rating) }</span>
						</div>
					}
					if poi.Distance > 0 {
						<div class="flex items-center gap-1 text-blue-600 dark:text-blue-400">
							<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
							</svg>
							<span>{ fmt.Sprintf("%.1f km", poi.Distance) }</span>
						</div>
					}
				</div>
				<p class="text-xs text-gray-600 dark:text-gray-300 line-clamp-2 mb-2">{ poi.Description }</p>
				// Tags display
				if len(poi.Tags) > 0 {
					<div class="flex items-center gap-1 mb-2 flex-wrap">
						for _, tag := range poi.Tags {
							<span class="px-2 py-0.5 text-xs bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-400 rounded-full">{ tag }</span>
						}
					</div>
				}
				// Opening hours display
				if len(poi.OpeningHours) > 0 {
					<div class="flex items-center gap-1 mb-2 text-xs text-gray-600 dark:text-gray-400">
						<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
						</svg>
						<span>{ getTodayOpeningHours(poi.OpeningHours) }</span>
					</div>
				}
				<div class="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
					<div class="flex items-center gap-3">
						if poi.TimeToSpend != "" {
							<div class="flex items-center gap-1">
								<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
								</svg>
								<span>{ poi.TimeToSpend }</span>
							</div>
						}
						if poi.Budget != "" || poi.PriceLevel != "" {
							<div class="flex items-center gap-1">
								if poi.PriceLevel != "" {
									<span class="text-green-600 dark:text-green-400 font-semibold">{ poi.PriceLevel }</span>
								} else {
									<span class={ getBudgetColor(poi.Budget) }>{ poi.Budget }</span>
								}
							</div>
						}
					</div>
					<div class="flex items-center gap-2">
						if poi.PhoneNumber != "" {
							<a href={ templ.URL("tel:" + poi.PhoneNumber) } class="text-blue-600 hover:text-blue-700 dark:text-blue-400" title="Call">
								<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
								</svg>
							</a>
						}
						if poi.Website != "" {
							<a href={ templ.URL(poi.Website) } target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:text-blue-700 dark:text-blue-400" title="Website">
								<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"></path>
								</svg>
							</a>
						}
					</div>
				</div>
			</div>
		</div>
	</div>
}

// AllPOICard for the "All Points of Interest" section (list view)
templ AllPOICard(poi models.POIDetailedInfo) {
	<div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4 hover:shadow-md transition-shadow">
		<div class="flex items-start justify-between mb-3">
			<h4 class="font-semibold text-gray-900 dark:text-white line-clamp-1">{ poi.Name }</h4>
			if poi.Rating > 0 {
				<div class="flex items-center gap-1 flex-shrink-0">
					<svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
						<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
					</svg>
					<span class="text-sm font-medium text-gray-700 dark:text-gray-300">{ formatRating(poi.Rating) }</span>
				</div>
			}
		</div>
		if poi.Category != "" {
			<span class="inline-block px-2 py-1 text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300 rounded-full mb-2">
				{ poi.Category }
			</span>
		}
		<p class="text-sm text-gray-600 dark:text-gray-300 line-clamp-3 mb-3">{ poi.Description }</p>
		<div class="flex items-center justify-between">
			<div class="flex items-center gap-4 text-xs text-gray-500 dark:text-gray-400">
				if poi.TimeToSpend != "" {
					<span>{ poi.TimeToSpend }</span>
				}
				if poi.Budget != "" {
					<span class={ getBudgetColor(poi.Budget) }>{ poi.Budget }</span>
				}
			</div>
			<button class="text-blue-600 hover:text-blue-700 text-sm font-medium">
				View Details
			</button>
		</div>
	</div>
}
