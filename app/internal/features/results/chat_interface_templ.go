// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package results

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

// ChatInterface provides the floating chat panel for continued planning
func ChatInterface(sessionId string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!-- Chat Panel Overlay --><div x-show=\"showChat\" x-transition:enter=\"transition ease-out duration-300\" x-transition:enter-start=\"opacity-0\" x-transition:enter-end=\"opacity-100\" x-transition:leave=\"transition ease-in duration-200\" x-transition:leave-start=\"opacity-100\" x-transition:leave-end=\"opacity-0\" class=\"fixed inset-0 bg-black bg-opacity-50 z-40\" @click=\"showChat = false\"></div><!-- Chat Panel --><div x-show=\"showChat\" x-transition:enter=\"transition ease-out duration-300\" x-transition:enter-start=\"opacity-0 transform translate-x-full\" x-transition:enter-end=\"opacity-100 transform translate-x-0\" x-transition:leave=\"transition ease-in duration-200\" x-transition:leave-start=\"opacity-100 transform translate-x-0\" x-transition:leave-end=\"opacity-0 transform translate-x-full\" class=\"fixed right-0 top-0 h-full w-full sm:w-96 bg-white dark:bg-gray-800 shadow-xl z-50 flex flex-col\" @click.stop><!-- Chat Header --><div class=\"flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700 bg-gradient-to-r from-blue-600 to-blue-700\"><div class=\"flex items-center gap-3\"><div class=\"w-8 h-8 bg-white bg-opacity-20 rounded-lg flex items-center justify-center\"><svg class=\"w-4 h-4 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-3.582 8-8 8a8.013 8.013 0 01-7.93-6.94c-.42-.51-.92-.92-1.43-1.25-.63-.41-.63-1.33 0-1.74.51-.33 1.01-.74 1.43-1.25A8.013 8.013 0 0113 4c4.418 0 8 3.582 8 8z\"></path></svg></div><div><h2 class=\"text-lg font-semibold text-white\">Continue Planning</h2><p class=\"text-xs text-blue-100\">Refine your itinerary with AI</p></div></div><button @click=\"showChat = false\" class=\"p-2 text-white hover:bg-white hover:bg-opacity-20 rounded-lg transition-colors\"><svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path></svg></button></div><!-- Chat Messages Area --><div class=\"flex-1 overflow-y-auto p-4 space-y-4\" x-ref=\"chatMessages\"><!-- Welcome Message --><div class=\"flex gap-3\"><div class=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0\"><svg class=\"w-4 h-4 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09z\"></path></svg></div><div class=\"flex-1\"><div class=\"bg-gray-100 dark:bg-gray-700 rounded-lg p-3\"><p class=\"text-sm text-gray-800 dark:text-gray-200\">Hi! I'm here to help you refine your itinerary. You can ask me to:</p><ul class=\"text-xs text-gray-600 dark:text-gray-300 mt-2 space-y-1\"><li>‚Ä¢ Add more places to visit</li><li>‚Ä¢ Remove or replace locations</li><li>‚Ä¢ Get recommendations for specific activities</li><li>‚Ä¢ Optimize your route</li><li>‚Ä¢ Find places to eat nearby</li></ul></div></div></div><!-- Chat Messages Container --><div id=\"chat-messages-container\" class=\"space-y-4\"><!-- Messages will be dynamically added here --></div><!-- Loading Message --><div x-show=\"chatLoading\" class=\"flex gap-3\"><div class=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0\"><div class=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div></div><div class=\"flex-1\"><div class=\"bg-gray-100 dark:bg-gray-700 rounded-lg p-3\"><div class=\"flex items-center gap-2\"><div class=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div><div class=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style=\"animation-delay: 0.1s\"></div><div class=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style=\"animation-delay: 0.2s\"></div></div></div></div></div></div><!-- Chat Input --><div class=\"border-t border-gray-200 dark:border-gray-700 p-4 bg-gray-50 dark:bg-gray-900\"><form @submit.prevent=\"sendChatMessage()\" class=\"flex gap-2\"><div class=\"flex-1 relative\"><textarea x-model=\"chatMessage\" x-ref=\"chatInput\" @keydown.enter.prevent=\"if(!$event.shiftKey) sendChatMessage()\" placeholder=\"Ask me to refine your itinerary...\" rows=\"2\" class=\"block w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500 text-sm resize-none dark:bg-gray-800 dark:border-gray-600 dark:text-white dark:placeholder-gray-400\" :disabled=\"chatLoading\"></textarea><div class=\"absolute bottom-2 right-2 text-xs text-gray-400\">Press Enter to send</div></div><button type=\"submit\" :disabled=\"!chatMessage.trim() || chatLoading\" class=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex-shrink-0\"><svg x-show=\"!chatLoading\" class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 19l9 2-9-18-9 18 9-2zm0 0v-8\"></path></svg><div x-show=\"chatLoading\" class=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div></button></form><!-- Quick Actions --><div class=\"flex flex-wrap gap-2 mt-3\"><button @click=\"setChatMessage('Add more restaurants to my itinerary')\" class=\"px-3 py-1 text-xs bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-full hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\">üçΩÔ∏è Add restaurants</button> <button @click=\"setChatMessage('Find activities for the evening')\" class=\"px-3 py-1 text-xs bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-full hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\">üåô Evening activities</button> <button @click=\"setChatMessage('Optimize the route between places')\" class=\"px-3 py-1 text-xs bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-full hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\">üó∫Ô∏è Optimize route</button> <button @click=\"setChatMessage('Remove expensive activities')\" class=\"px-3 py-1 text-xs bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-full hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\">üí∞ Budget-friendly</button></div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// Chat JavaScript for handling chat functionality
func ChatScript(sessionId string) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_ChatScript_bc0b`,
		Function: `function __templ_ChatScript_bc0b(sessionId){// Initialize chat functionality
    document.addEventListener('DOMContentLoaded', function() {
        // Chat message handling
        window.sendChatMessage = function() {
            const store = Alpine.store('itinerary');
            const message = store.chatMessage.trim();
            if (!message || store.chatLoading) return;

            // Add user message to chat
            addChatMessage(message, 'user');
            
            // Clear input and set loading state
            store.chatMessage = '';
            store.chatLoading = true;

            // Send message to server
            const sessionId = { templ.JSONString(sessionId) };
            fetch('/api/chat/unified', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: message,
                    session_id: sessionId,
                    context: 'itinerary_refinement'
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                
                // Handle streaming response
                const reader = response.body.getReader();
                const decoder = new TextDecoder();
                let assistantMessage = '';

                function readStream() {
                    return reader.read().then(({ done, value }) => {
                        if (done) {
                            store.chatLoading = false;
                            return;
                        }

                        const chunk = decoder.decode(value);
                        const lines = chunk.split('\n');

                        for (const line of lines) {
                            if (line.startsWith('data: ')) {
                                try {
                                    const data = JSON.parse(line.slice(6));
                                    if (data.content) {
                                        assistantMessage += data.content;
                                        updateChatMessage(assistantMessage, 'assistant');
                                    }
                                    if (data.done) {
                                        store.chatLoading = false;
                                        return;
                                    }
                                } catch (e) {
                                    console.log('Non-JSON line:', line);
                                }
                            }
                        }

                        return readStream();
                    });
                }

                // Start reading the stream
                addChatMessage('', 'assistant');
                return readStream();
            })
            .catch(error => {
                console.error('Chat error:', error);
                addChatMessage('Sorry, I encountered an error. Please try again.', 'assistant');
                store.chatLoading = false;
            });
        };

        // Set chat message helper
        window.setChatMessage = function(message) {
            Alpine.store('itinerary').chatMessage = message;
            const input = document.querySelector('[x-ref="chatInput"]');
            if (input) input.focus();
        };

        // Add message to chat
        function addChatMessage(message, sender) {
            const container = document.getElementById('chat-messages-container');
            if (!container) return;
            
            const messageId = 'msg-' + Date.now();
            const messageDiv = document.createElement('div');
            messageDiv.id = messageId;
            messageDiv.className = 'flex gap-3';
            
            const isUser = sender === 'user';
            messageDiv.innerHTML = ` + "`" + `
                <div class="w-8 h-8 ${isUser ? 'bg-gray-600' : 'bg-blue-600'} rounded-full flex items-center justify-center flex-shrink-0">
                    ${isUser ? 
                        '<svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path></svg>' :
                        '<svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09z"></path></svg>'
                    }
                </div>
                <div class="flex-1">
                    <div class="bg-${isUser ? 'blue-600 text-white' : 'gray-100 dark:bg-gray-700'} rounded-lg p-3">
                        <p class="text-sm ${isUser ? 'text-white' : 'text-gray-800 dark:text-gray-200'}" id="${messageId}-content">
                            ${message || (isUser ? '' : '<div class="w-2 h-2 bg-gray-400 rounded-full animate-pulse"></div>')}
                        </p>
                    </div>
                </div>
            ` + "`" + `;
            
            container.appendChild(messageDiv);
            scrollChatToBottom();
            return messageId;
        }

        // Update existing message content
        function updateChatMessage(message, sender) {
            const containers = document.querySelectorAll('#chat-messages-container [id^="msg-"]');
            if (containers.length > 0) {
                const lastMessage = containers[containers.length - 1];
                const contentElement = lastMessage.querySelector('[id$="-content"]');
                if (contentElement) {
                    contentElement.innerHTML = ` + "`" + `<span class="text-sm text-gray-800 dark:text-gray-200">${escapeHtml(message)}</span>` + "`" + `;
                }
            }
            scrollChatToBottom();
        }

        // Scroll chat to bottom
        function scrollChatToBottom() {
            const chatMessages = document.querySelector('[x-ref="chatMessages"]');
            if (chatMessages) {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
        }

        // HTML escape function
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
    });
}`,
		Call:       templ.SafeScript(`__templ_ChatScript_bc0b`, sessionId),
		CallInline: templ.SafeScriptInline(`__templ_ChatScript_bc0b`, sessionId),
	}
}

var _ = templruntime.GeneratedTemplate
