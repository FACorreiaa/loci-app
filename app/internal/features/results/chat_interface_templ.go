// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package results

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/FACorreiaa/go-templui/app/internal/models"
)

// ChatInterfaceProps represents the properties for the chat interface
type ChatInterfaceProps struct {
	SessionID           string
	Title               string
	Placeholder         string
	EmptyStateTitle     string
	EmptyStateSubtitle  string
	LoadingMessage      string
	HeaderColor         string
	UserMessageColor    string
	FloatingButtonColor string
	FocusRingColor      string
	ShowChat            bool
	ChatHistory         []models.ChatMessage
	IsLoading           bool
}

// ChatInterface renders a chat interface with floating button for continuing itinerary planning
func ChatInterface(props ChatInterfaceProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!-- Chat Interface Modal -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 = []any{"fixed inset-0 z-50", templ.KV("hidden", !props.ShowChat)}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<div id=\"chat-interface\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/internal/features/results/chat_interface.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\"><!-- Backdrop --><div class=\"fixed inset-0 bg-black bg-opacity-50\" onclick=\"toggleChat(false)\"></div><!-- Chat Container --><div class=\"fixed bottom-6 right-6 w-96 h-[500px] bg-white rounded-lg shadow-2xl border border-gray-200 flex flex-col z-50\"><!-- Chat Header -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 = []any{"flex items-center justify-between p-4 border-b border-gray-200 text-white rounded-t-lg", getHeaderColorClass(props.HeaderColor)}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var4...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<div class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 string
		templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var4).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/internal/features/results/chat_interface.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "\"><div class=\"flex items-center gap-2\"><svg class=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\"></path></svg> <span class=\"font-medium\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var6 string
		templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(getChatTitle(props.Title))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/internal/features/results/chat_interface.templ`, Line: 39, Col: 58}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "</span></div><button onclick=\"toggleChat(false)\" class=\"p-1 hover:bg-black hover:bg-opacity-20 rounded\"><svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path></svg></button></div><!-- Chat Messages --><div id=\"chat-messages\" class=\"flex-1 overflow-y-auto p-4 space-y-4\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if len(props.ChatHistory) == 0 {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "<div class=\"text-center text-gray-500 py-8\"><svg class=\"w-12 h-12 mx-auto mb-4 text-gray-300\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\"></path></svg><p class=\"text-sm\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string
			templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(getChatEmptyTitle(props.EmptyStateTitle))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/internal/features/results/chat_interface.templ`, Line: 58, Col: 67}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "</p><p class=\"text-xs mt-2 text-gray-400\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var8 string
			templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(getChatEmptySubtitle(props.EmptyStateSubtitle))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/internal/features/results/chat_interface.templ`, Line: 60, Col: 55}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</p></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		for _, message := range props.ChatHistory {
			templ_7745c5c3_Err = ChatMessageBubble(message, props.UserMessageColor).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if props.IsLoading {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "<div class=\"flex justify-start\"><div class=\"bg-gray-100 p-3 rounded-lg flex items-center gap-2 text-sm text-gray-600\"><div class=\"w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full animate-spin\"></div><span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var9 string
			templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(getChatLoadingMessage(props.LoadingMessage))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/internal/features/results/chat_interface.templ`, Line: 73, Col: 58}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "</span></div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "</div><!-- Chat Input --><div class=\"p-4 border-t border-gray-200\"><form id=\"chat-form\" hx-post=\"/htmx/chat/message\" hx-target=\"#chat-messages\" hx-swap=\"beforeend\" hx-trigger=\"submit\"><input type=\"hidden\" name=\"session_id\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var10 string
		templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(props.SessionID)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/internal/features/results/chat_interface.templ`, Line: 82, Col: 67}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "\"><div class=\"flex items-end gap-2\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var11 = []any{"flex-1 resize-none border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:border-transparent", getFocusRingClass(props.FocusRingColor)}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var11...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "<textarea id=\"chat-message\" name=\"message\" placeholder=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var12 string
		templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(getChatPlaceholder(props.Placeholder))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/internal/features/results/chat_interface.templ`, Line: 87, Col: 58}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var13 string
		templ_7745c5c3_Var13, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var11).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/internal/features/results/chat_interface.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var13))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "\" rows=\"2\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if props.IsLoading {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, " disabled")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, " onkeydown=\"handleChatKeyPress(event)\"></textarea> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var14 = []any{"p-2 text-white rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed", getUserMessageColorClass(props.UserMessageColor)}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var14...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "<button type=\"submit\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if props.IsLoading {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, " disabled")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, " class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var15 string
		templ_7745c5c3_Var15, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var14).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/internal/features/results/chat_interface.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var15))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "\"><svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 19l9 2-9-18-9 18 9-2zm0 0v-8\"></path></svg></button></div></form></div></div></div><!-- Floating Chat Button -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var16 = []any{"fixed bottom-4 right-4 w-12 h-12 text-white rounded-full shadow-lg transition-all hover:scale-105 flex items-center justify-center z-40 sm:bottom-6 sm:right-6 sm:w-14 sm:h-14", getFloatingButtonClass(props.FloatingButtonColor), templ.KV("hidden", props.ShowChat)}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var16...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, "<button id=\"chat-button\" onclick=\"toggleChat(true)\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var17 string
		templ_7745c5c3_Var17, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var16).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/internal/features/results/chat_interface.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var17))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, "\"><svg class=\"w-5 h-5 sm:w-6 sm:h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\"></path></svg></button><!-- Chat JavaScript --><script>\n\t\tlet chatVisible = false;\n\t\tlet isLoading = false;\n\t\tlet eventSource = null;\n\n\t\tfunction toggleChat(show) {\n\t\t\tchatVisible = show;\n\t\t\tconst chatInterface = document.getElementById('chat-interface');\n\t\t\tconst chatButton = document.getElementById('chat-button');\n\t\t\t\n\t\t\tif (show) {\n\t\t\t\tchatInterface.classList.remove('hidden');\n\t\t\t\tchatButton.classList.add('hidden');\n\t\t\t\tdocument.getElementById('chat-message').focus();\n\t\t\t} else {\n\t\t\t\tchatInterface.classList.add('hidden');\n\t\t\t\tchatButton.classList.remove('hidden');\n\t\t\t\t\n\t\t\t\t// Close any active SSE connection\n\t\t\t\tif (eventSource) {\n\t\t\t\t\teventSource.close();\n\t\t\t\t\teventSource = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction handleChatKeyPress(event) {\n\t\t\tif (event.key === 'Enter' && !event.shiftKey) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tif (!isLoading) {\n\t\t\t\t\tdocument.getElementById('chat-form').dispatchEvent(new Event('submit'));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Handle form submission\n\t\tdocument.getElementById('chat-form').addEventListener('submit', function(e) {\n\t\t\tconst messageInput = document.getElementById('chat-message');\n\t\t\tconst message = messageInput.value.trim();\n\t\t\t\n\t\t\tif (!message || isLoading) {\n\t\t\t\te.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Add user message immediately\n\t\t\tconst messagesContainer = document.getElementById('chat-messages');\n\t\t\tconst userMessage = document.createElement('div');\n\t\t\tuserMessage.className = 'flex justify-end mb-4';\n\t\t\tuserMessage.innerHTML = `\n\t\t\t\t<div class=\"max-w-[80%] p-3 rounded-lg text-sm bg-blue-600 text-white\">\n\t\t\t\t\t<p class=\"whitespace-pre-wrap\">${message}</p>\n\t\t\t\t\t<p class=\"text-xs mt-1 opacity-70 text-white text-opacity-70\">\n\t\t\t\t\t\t${new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t`;\n\t\t\tmessagesContainer.appendChild(userMessage);\n\t\t\t\n\t\t\t// Clear input and show loading\n\t\t\tmessageInput.value = '';\n\t\t\tisLoading = true;\n\t\t\tmessageInput.disabled = true;\n\t\t\t\n\t\t\t// Scroll to bottom\n\t\t\tmessagesContainer.scrollTop = messagesContainer.scrollHeight;\n\n\t\t\t// Start SSE connection for real-time updates\n\t\t\tstartChatSSE(message);\n\t\t});\n\n\t\tfunction startChatSSE(message) {\n\t\t\t// Close existing connection if any\n\t\t\tif (eventSource) {\n\t\t\t\teventSource.close();\n\t\t\t}\n\n\t\t\tconst sessionId = document.querySelector('input[name=\"session_id\"]').value;\n\t\t\tconst sseUrl = `/chat/stream?message=${encodeURIComponent(message)}&session_id=${encodeURIComponent(sessionId)}`;\n\t\t\t\n\t\t\teventSource = new EventSource(sseUrl);\n\t\t\t\n\t\t\teventSource.onmessage = function(event) {\n\t\t\t\ttry {\n\t\t\t\t\tconst eventData = JSON.parse(event.data);\n\t\t\t\t\tconsole.log('Chat SSE Event:', eventData);\n\t\t\t\t\t\n\t\t\t\t\thandleChatSSEEvent(eventData);\n\t\t\t\t\t\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error parsing chat SSE event:', error);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\teventSource.onerror = function(error) {\n\t\t\t\tconsole.error('Chat SSE error:', error);\n\t\t\t\tisLoading = false;\n\t\t\t\tdocument.getElementById('chat-message').disabled = false;\n\t\t\t\t\n\t\t\t\t// Add error message\n\t\t\t\taddAIMessage('Sorry, there was an error processing your request. Please try again.');\n\t\t\t\t\n\t\t\t\tif (eventSource) {\n\t\t\t\t\teventSource.close();\n\t\t\t\t\teventSource = null;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\teventSource.onopen = function(event) {\n\t\t\t\tconsole.log('Chat SSE connection opened');\n\t\t\t};\n\t\t}\n\n\t\tfunction handleChatSSEEvent(eventData) {\n\t\t\tconst messagesContainer = document.getElementById('chat-messages');\n\n\t\t\tswitch (eventData.type) {\n\t\t\t\tcase 'poi_detail_chunk':\n\t\t\t\tcase 'chunk':\n\t\t\t\t\t// Handle streaming chunks for POI details\n\t\t\t\t\tupdateStreamingMessage(eventData.message || eventData.data?.chunk || '');\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase 'itinerary':\n\t\t\t\t\t// Itinerary update complete\n\t\t\t\t\taddAIMessage('I\\'ve updated your itinerary based on your request!');\n\t\t\t\t\t\n\t\t\t\t\t// Update the main itinerary display\n\t\t\t\t\tif (eventData.data && eventData.data.itinerary_response) {\n\t\t\t\t\t\tupdateItineraryDisplay(eventData.data.itinerary_response);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tisLoading = false;\n\t\t\t\t\tdocument.getElementById('chat-message').disabled = false;\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase 'complete':\n\t\t\t\t\t// Processing complete\n\t\t\t\t\tif (!eventData.message || eventData.message === '') {\n\t\t\t\t\t\taddAIMessage('Done! Your itinerary has been updated.');\n\t\t\t\t\t} else {\n\t\t\t\t\t\taddAIMessage(eventData.message);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tisLoading = false;\n\t\t\t\t\tdocument.getElementById('chat-message').disabled = false;\n\t\t\t\t\t\n\t\t\t\t\t// Close the connection\n\t\t\t\t\tif (eventSource) {\n\t\t\t\t\t\teventSource.close();\n\t\t\t\t\t\teventSource = null;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase 'error':\n\t\t\t\t\taddAIMessage('Sorry, I encountered an error: ' + (eventData.message || 'Unknown error'));\n\t\t\t\t\tisLoading = false;\n\t\t\t\t\tdocument.getElementById('chat-message').disabled = false;\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase 'sse-close':\n\t\t\t\t\tif (eventSource) {\n\t\t\t\t\t\teventSource.close();\n\t\t\t\t\t\teventSource = null;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t// Scroll to bottom after each update\n\t\t\tmessagesContainer.scrollTop = messagesContainer.scrollHeight;\n\t\t}\n\n\t\tlet streamingMessageElement = null;\n\n\t\tfunction updateStreamingMessage(chunk) {\n\t\t\tconst messagesContainer = document.getElementById('chat-messages');\n\t\t\t\n\t\t\tif (!streamingMessageElement) {\n\t\t\t\t// Create new streaming message bubble\n\t\t\t\tstreamingMessageElement = document.createElement('div');\n\t\t\t\tstreamingMessageElement.className = 'flex justify-start mb-4';\n\t\t\t\tstreamingMessageElement.innerHTML = `\n\t\t\t\t\t<div class=\"max-w-[80%] p-3 rounded-lg text-sm bg-gray-100 text-gray-800\">\n\t\t\t\t\t\t<p class=\"whitespace-pre-wrap streaming-content\"></p>\n\t\t\t\t\t\t<p class=\"text-xs mt-1 opacity-70 text-gray-500\">\n\t\t\t\t\t\t\tLoci AI • ${new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t`;\n\t\t\t\tmessagesContainer.appendChild(streamingMessageElement);\n\t\t\t}\n\t\t\t\n\t\t\t// Update the content\n\t\t\tconst contentElement = streamingMessageElement.querySelector('.streaming-content');\n\t\t\tcontentElement.textContent += chunk;\n\t\t\t\n\t\t\t// Scroll to bottom\n\t\t\tmessagesContainer.scrollTop = messagesContainer.scrollHeight;\n\t\t}\n\n\t\tfunction addAIMessage(message) {\n\t\t\tconst messagesContainer = document.getElementById('chat-messages');\n\t\t\t\n\t\t\t// Clear any streaming message\n\t\t\tstreamingMessageElement = null;\n\t\t\t\n\t\t\tconst aiMessage = document.createElement('div');\n\t\t\taiMessage.className = 'flex justify-start mb-4';\n\t\t\taiMessage.innerHTML = `\n\t\t\t\t<div class=\"max-w-[80%] p-3 rounded-lg text-sm bg-gray-100 text-gray-800\">\n\t\t\t\t\t<p class=\"whitespace-pre-wrap\">${message}</p>\n\t\t\t\t\t<p class=\"text-xs mt-1 opacity-70 text-gray-500\">\n\t\t\t\t\t\tLoci AI • ${new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t`;\n\t\t\tmessagesContainer.appendChild(aiMessage);\n\t\t\tmessagesContainer.scrollTop = messagesContainer.scrollHeight;\n\t\t}\n\n\t\tfunction updateItineraryDisplay(itineraryData) {\n\t\t\t// Find the main itinerary container and update it\n\t\t\tconst itineraryContainer = document.getElementById('itinerary-container');\n\t\t\tif (itineraryContainer && itineraryData) {\n\t\t\t\t// This would trigger a page refresh or HTMX update to show the new itinerary\n\t\t\t\t// For now, we'll just reload the page to show updates\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\twindow.location.reload();\n\t\t\t\t}, 2000);\n\t\t\t}\n\t\t}\n\n\t\t// Handle HTMX response (fallback for non-SSE)\n\t\tdocument.body.addEventListener('htmx:afterRequest', function(event) {\n\t\t\tif (event.detail.elt.id === 'chat-form') {\n\t\t\t\tisLoading = false;\n\t\t\t\tdocument.getElementById('chat-message').disabled = false;\n\t\t\t}\n\t\t});\n\n\t\t// Clean up on page unload\n\t\twindow.addEventListener('beforeunload', function() {\n\t\t\tif (eventSource) {\n\t\t\t\teventSource.close();\n\t\t\t}\n\t\t});\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ChatMessageBubble(message models.ChatMessage, userMessageColor string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var18 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var18 == nil {
			templ_7745c5c3_Var18 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var templ_7745c5c3_Var19 = []any{"flex", templ.KV("justify-end", message.Role == "user"), templ.KV("justify-start", message.Role != "user")}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var19...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 25, "<div class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var20 string
		templ_7745c5c3_Var20, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var19).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/internal/features/results/chat_interface.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var20))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 26, "\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var21 = []any{"max-w-[80%] p-3 rounded-lg text-sm",
			templ.KV("bg-blue-600 text-white", message.Role == "user"),
			templ.KV("bg-gray-100 text-gray-800", message.Role == "assistant"),
			templ.KV("bg-red-100 text-red-800 border border-red-200", message.Role == "error")}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var21...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 27, "<div class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var22 string
		templ_7745c5c3_Var22, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var21).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/internal/features/results/chat_interface.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var22))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 28, "\"><p class=\"whitespace-pre-wrap\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var23 string
		templ_7745c5c3_Var23, templ_7745c5c3_Err = templ.JoinStringErrs(message.Content)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/internal/features/results/chat_interface.templ`, Line: 375, Col: 51}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var23))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 29, "</p>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var24 = []any{"text-xs mt-1 opacity-70",
			templ.KV("text-white text-opacity-70", message.Role == "user"),
			templ.KV("text-gray-500", message.Role != "user")}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var24...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 30, "<p class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var25 string
		templ_7745c5c3_Var25, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var24).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/internal/features/results/chat_interface.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var25))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 31, "\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var26 string
		templ_7745c5c3_Var26, templ_7745c5c3_Err = templ.JoinStringErrs(message.Timestamp)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/internal/features/results/chat_interface.templ`, Line: 379, Col: 23}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var26))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 32, "</p></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// Utility functions for chat interface
func getChatTitle(title string) string {
	if title == "" {
		return "Continue Planning"
	}
	return title
}

func getChatPlaceholder(placeholder string) string {
	if placeholder == "" {
		return "Ask me to modify your itinerary..."
	}
	return placeholder
}

func getChatEmptyTitle(title string) string {
	if title == "" {
		return "Ask me to modify your itinerary!"
	}
	return title
}

func getChatEmptySubtitle(subtitle string) string {
	if subtitle == "" {
		return `Try: "Add the Eiffel Tower" or "Remove expensive activities"`
	}
	return subtitle
}

func getChatLoadingMessage(message string) string {
	if message == "" {
		return "Updating your itinerary..."
	}
	return message
}

func getHeaderColorClass(color string) string {
	if color == "" {
		return "bg-blue-600"
	}
	return color
}

func getUserMessageColorClass(color string) string {
	if color == "" {
		return "bg-blue-600 hover:bg-blue-700"
	}
	return color
}

func getFloatingButtonClass(color string) string {
	if color == "" {
		return "bg-blue-600 hover:bg-blue-700"
	}
	return color
}

func getFocusRingClass(color string) string {
	if color == "" {
		return "focus:ring-blue-500"
	}
	return color
}

var _ = templruntime.GeneratedTemplate
