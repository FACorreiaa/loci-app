package results

// ItineraryStateScript provides Alpine.js state management for the itinerary page
script ItineraryStateScript() {
    // Initialize Alpine.js data and state
    function itineraryPage() {
        return {
            // View state
            viewMode: 'split', // 'map', 'list', 'split'
            showChat: false,
            mapLoaded: false,
            selectedPOI: null,
            isBookmarked: false,

            // Filter and search state
            selectedCategory: '',
            sortBy: 'name',
            searchQuery: '',

            // Chat state
            chatMessage: '',
            chatLoading: false,

            // Computed properties and methods
            init() {
                // Initialize the component
                this.loadBookmarkStatus();
                this.setupKeyboardShortcuts();
            },

            // View mode methods
            setViewMode(mode) {
                this.viewMode = mode;
                // Trigger map resize if switching to map view
                if (mode === 'map' || mode === 'split') {
                    this.$nextTick(() => {
                        if (window.map && window.map.resize) {
                            window.map.resize();
                        }
                    });
                }
            },

            // POI filtering logic
            shouldShowPOI(poi) {
                // Category filter
                if (this.selectedCategory && poi.category !== this.selectedCategory) {
                    return false;
                }

                // Search filter
                if (this.searchQuery) {
                    const query = this.searchQuery.toLowerCase();
                    const searchableText = [
                        poi.name,
                        poi.description,
                        poi.category,
                        ...(poi.tags || [])
                    ].join(' ').toLowerCase();
                    
                    if (!searchableText.includes(query)) {
                        return false;
                    }
                }

                return true;
            },

            // Get filtered POI count
            get filteredPOICount() {
                if (!window.poisData) return 0;
                return window.poisData.filter(poi => this.shouldShowPOI(poi)).length;
            },

            // Sort POIs
            getSortedPOIs(pois) {
                if (!pois) return [];
                
                const sortedPOIs = [...pois];
                
                switch (this.sortBy) {
                    case 'name':
                        return sortedPOIs.sort((a, b) => a.name.localeCompare(b.name));
                    case 'category':
                        return sortedPOIs.sort((a, b) => (a.category || '').localeCompare(b.category || ''));
                    case 'rating':
                        return sortedPOIs.sort((a, b) => (b.rating || 0) - (a.rating || 0));
                    default:
                        return sortedPOIs;
                }
            },

            // POI selection
            selectPOI(index) {
                if (window.poisData && window.poisData[index]) {
                    this.selectedPOI = window.poisData[index];
                    
                    // Update map marker if available
                    if (window.map && window.updateSelectedMarker) {
                        window.updateSelectedMarker(index);
                    }
                }
            },

            closePOIModal() {
                this.selectedPOI = null;
                
                // Clear map marker selection
                if (window.map && window.clearSelectedMarker) {
                    window.clearSelectedMarker();
                }
            },

            // Bookmark functionality
            toggleBookmark() {
                this.isBookmarked = !this.isBookmarked;
                this.saveBookmarkStatus();
                
                // Show feedback
                this.showNotification(
                    this.isBookmarked ? 'Itinerary saved!' : 'Itinerary removed from saved',
                    this.isBookmarked ? 'success' : 'info'
                );
            },

            loadBookmarkStatus() {
                // Load from localStorage
                const sessionId = window.location.pathname.split('/').pop();
                const bookmarks = JSON.parse(localStorage.getItem('itinerary-bookmarks') || '[]');
                this.isBookmarked = bookmarks.includes(sessionId);
            },

            saveBookmarkStatus() {
                const sessionId = window.location.pathname.split('/').pop();
                let bookmarks = JSON.parse(localStorage.getItem('itinerary-bookmarks') || '[]');
                
                if (this.isBookmarked) {
                    if (!bookmarks.includes(sessionId)) {
                        bookmarks.push(sessionId);
                    }
                } else {
                    bookmarks = bookmarks.filter(id => id !== sessionId);
                }
                
                localStorage.setItem('itinerary-bookmarks', JSON.stringify(bookmarks));
            },

            // Chat functionality
            openChat() {
                this.showChat = true;
                this.$nextTick(() => {
                    const input = this.$refs.chatInput;
                    if (input) input.focus();
                });
            },

            closeChat() {
                this.showChat = false;
            },

            // Utility methods
            showNotification(message, type = 'info') {
                // Create and show notification
                const notification = document.createElement('div');
                notification.className = `fixed top-4 right-4 z-50 px-4 py-3 rounded-lg shadow-lg text-white text-sm font-medium transition-all duration-300 transform translate-x-full ${
                    type === 'success' ? 'bg-green-500' : 
                    type === 'error' ? 'bg-red-500' : 
                    'bg-blue-500'
                }`;
                notification.textContent = message;
                
                document.body.appendChild(notification);
                
                // Slide in
                setTimeout(() => {
                    notification.classList.remove('translate-x-full');
                }, 100);
                
                // Auto remove
                setTimeout(() => {
                    notification.classList.add('translate-x-full');
                    setTimeout(() => {
                        if (document.body.contains(notification)) {
                            document.body.removeChild(notification);
                        }
                    }, 300);
                }, 3000);
            },

            setupKeyboardShortcuts() {
                document.addEventListener('keydown', (e) => {
                    // ESC to close modals
                    if (e.key === 'Escape') {
                        if (this.selectedPOI) {
                            this.closePOIModal();
                        } else if (this.showChat) {
                            this.closeChat();
                        }
                    }
                    
                    // Cmd/Ctrl + K to open search
                    if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
                        e.preventDefault();
                        const searchInput = document.querySelector('input[type="text"][placeholder*="Search"]');
                        if (searchInput) {
                            searchInput.focus();
                        }
                    }
                    
                    // View mode shortcuts (1, 2, 3)
                    if (e.key >= '1' && e.key <= '3' && !e.target.matches('input, textarea')) {
                        const modes = ['map', 'split', 'list'];
                        this.setViewMode(modes[parseInt(e.key) - 1]);
                    }
                });
            },

            // Export functionality
            exportItinerary() {
                const sessionId = window.location.pathname.split('/').pop();
                
                // Create exportable data
                const exportData = {
                    session_id: sessionId,
                    itinerary_name: document.querySelector('h1').textContent || 'My Itinerary',
                    export_date: new Date().toISOString(),
                    points_of_interest: window.poisData || []
                };
                
                // Download as JSON
                const blob = new Blob([JSON.stringify(exportData, null, 2)], { 
                    type: 'application/json' 
                });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `itinerary-${sessionId}.json`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                this.showNotification('Itinerary exported successfully!', 'success');
            },

            // Share functionality
            shareItinerary() {
                const url = window.location.href;
                const title = document.querySelector('h1').textContent || 'My Itinerary';
                
                if (navigator.share) {
                    // Use native sharing if available
                    navigator.share({
                        title: title,
                        text: 'Check out my personalized itinerary!',
                        url: url
                    }).catch(() => {
                        this.copyToClipboard(url);
                    });
                } else {
                    // Fallback to clipboard
                    this.copyToClipboard(url);
                }
            },

            copyToClipboard(text) {
                if (navigator.clipboard) {
                    navigator.clipboard.writeText(text).then(() => {
                        this.showNotification('Link copied to clipboard!', 'success');
                    });
                } else {
                    // Fallback for older browsers
                    const textarea = document.createElement('textarea');
                    textarea.value = text;
                    document.body.appendChild(textarea);
                    textarea.select();
                    document.execCommand('copy');
                    document.body.removeChild(textarea);
                    this.showNotification('Link copied to clipboard!', 'success');
                }
            }
        }
    }

    // Make function available globally
    window.itineraryPage = itineraryPage;
}