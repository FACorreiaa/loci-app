// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package results

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

// ItineraryStateScript provides Alpine.js state management for the itinerary page
func ItineraryStateScript() templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_ItineraryStateScript_8ca2`,
		Function: `function __templ_ItineraryStateScript_8ca2(){// Initialize Alpine.js data and state
    function itineraryPage() {
        return {
            // View state (Mobile-First)
            viewMode: window.innerWidth < 768 ? 'list' : 'split', // Start with list on mobile
            showChat: false,
            showMobileMenu: false,
            mapLoaded: false,
            selectedPOI: null,
            isBookmarked: false,

            // Filter and search state
            selectedCategory: '',
            sortBy: 'name',
            searchQuery: '',

            // Chat state
            chatMessage: '',
            chatLoading: false,

            // Computed properties and methods
            init() {
                // Initialize the component
                this.loadBookmarkStatus();
                this.setupKeyboardShortcuts();
                this.setupMobileOptimizations();
                this.handleViewportChanges();
            },

            // View mode methods
            setViewMode(mode) {
                this.viewMode = mode;
                // Trigger map resize if switching to map view
                if (mode === 'map' || mode === 'split') {
                    this.$nextTick(() => {
                        if (window.map && window.map.resize) {
                            window.map.resize();
                        }
                    });
                }
            },

            // POI filtering logic
            shouldShowPOI(poi) {
                // Category filter
                if (this.selectedCategory && poi.category !== this.selectedCategory) {
                    return false;
                }

                // Search filter
                if (this.searchQuery) {
                    const query = this.searchQuery.toLowerCase();
                    const searchableText = [
                        poi.name,
                        poi.description,
                        poi.category,
                        ...(poi.tags || [])
                    ].join(' ').toLowerCase();
                    
                    if (!searchableText.includes(query)) {
                        return false;
                    }
                }

                return true;
            },

            // Get filtered POI count
            get filteredPOICount() {
                if (!window.poisData) return 0;
                return window.poisData.filter(poi => this.shouldShowPOI(poi)).length;
            },

            // Sort POIs
            getSortedPOIs(pois) {
                if (!pois) return [];
                
                const sortedPOIs = [...pois];
                
                switch (this.sortBy) {
                    case 'name':
                        return sortedPOIs.sort((a, b) => a.name.localeCompare(b.name));
                    case 'category':
                        return sortedPOIs.sort((a, b) => (a.category || '').localeCompare(b.category || ''));
                    case 'rating':
                        return sortedPOIs.sort((a, b) => (b.rating || 0) - (a.rating || 0));
                    default:
                        return sortedPOIs;
                }
            },

            // POI selection
            selectPOI(index) {
                if (window.poisData && window.poisData[index]) {
                    this.selectedPOI = window.poisData[index];
                    
                    // Update map marker if available
                    if (window.map && window.updateSelectedMarker) {
                        window.updateSelectedMarker(index);
                    }
                }
            },

            closePOIModal() {
                this.selectedPOI = null;
                
                // Clear map marker selection
                if (window.map && window.clearSelectedMarker) {
                    window.clearSelectedMarker();
                }
            },

            // Bookmark functionality
            toggleBookmark() {
                this.isBookmarked = !this.isBookmarked;
                this.saveBookmarkStatus();
                
                // Show feedback
                this.showNotification(
                    this.isBookmarked ? 'Itinerary saved!' : 'Itinerary removed from saved',
                    this.isBookmarked ? 'success' : 'info'
                );
            },

            loadBookmarkStatus() {
                // Load from localStorage
                const sessionId = window.location.pathname.split('/').pop();
                const bookmarks = JSON.parse(localStorage.getItem('itinerary-bookmarks') || '[]');
                this.isBookmarked = bookmarks.includes(sessionId);
            },

            saveBookmarkStatus() {
                const sessionId = window.location.pathname.split('/').pop();
                let bookmarks = JSON.parse(localStorage.getItem('itinerary-bookmarks') || '[]');
                
                if (this.isBookmarked) {
                    if (!bookmarks.includes(sessionId)) {
                        bookmarks.push(sessionId);
                    }
                } else {
                    bookmarks = bookmarks.filter(id => id !== sessionId);
                }
                
                localStorage.setItem('itinerary-bookmarks', JSON.stringify(bookmarks));
            },

            // Chat functionality
            openChat() {
                this.showChat = true;
                this.$nextTick(() => {
                    const input = this.$refs.chatInput;
                    if (input) input.focus();
                });
            },

            closeChat() {
                this.showChat = false;
            },

            // Utility methods
            showNotification(message, type = 'info') {
                // Create and show notification
                const notification = document.createElement('div');
                notification.className = ` + "`" + `fixed top-4 right-4 z-50 px-4 py-3 rounded-lg shadow-lg text-white text-sm font-medium transition-all duration-300 transform translate-x-full ${
                    type === 'success' ? 'bg-green-500' : 
                    type === 'error' ? 'bg-red-500' : 
                    'bg-blue-500'
                }` + "`" + `;
                notification.textContent = message;
                
                document.body.appendChild(notification);
                
                // Slide in
                setTimeout(() => {
                    notification.classList.remove('translate-x-full');
                }, 100);
                
                // Auto remove
                setTimeout(() => {
                    notification.classList.add('translate-x-full');
                    setTimeout(() => {
                        if (document.body.contains(notification)) {
                            document.body.removeChild(notification);
                        }
                    }, 300);
                }, 3000);
            },

            setupKeyboardShortcuts() {
                document.addEventListener('keydown', (e) => {
                    // ESC to close modals
                    if (e.key === 'Escape') {
                        if (this.selectedPOI) {
                            this.closePOIModal();
                        } else if (this.showChat) {
                            this.closeChat();
                        }
                    }
                    
                    // Cmd/Ctrl + K to open search
                    if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
                        e.preventDefault();
                        const searchInput = document.querySelector('input[type="text"][placeholder*="Search"]');
                        if (searchInput) {
                            searchInput.focus();
                        }
                    }
                    
                    // View mode shortcuts (1, 2, 3)
                    if (e.key >= '1' && e.key <= '3' && !e.target.matches('input, textarea')) {
                        const modes = ['map', 'split', 'list'];
                        this.setViewMode(modes[parseInt(e.key) - 1]);
                    }
                });
            },

            // Export functionality
            exportItinerary() {
                const sessionId = window.location.pathname.split('/').pop();
                
                // Create exportable data
                const exportData = {
                    session_id: sessionId,
                    itinerary_name: document.querySelector('h1').textContent || 'My Itinerary',
                    export_date: new Date().toISOString(),
                    points_of_interest: window.poisData || []
                };
                
                // Download as JSON
                const blob = new Blob([JSON.stringify(exportData, null, 2)], { 
                    type: 'application/json' 
                });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = ` + "`" + `itinerary-${sessionId}.json` + "`" + `;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                this.showNotification('Itinerary exported successfully!', 'success');
            },

            // Share functionality
            shareItinerary() {
                const url = window.location.href;
                const title = document.querySelector('h1').textContent || 'My Itinerary';
                
                if (navigator.share) {
                    // Use native sharing if available
                    navigator.share({
                        title: title,
                        text: 'Check out my personalized itinerary!',
                        url: url
                    }).catch(() => {
                        this.copyToClipboard(url);
                    });
                } else {
                    // Fallback to clipboard
                    this.copyToClipboard(url);
                }
            },

            copyToClipboard(text) {
                if (navigator.clipboard) {
                    navigator.clipboard.writeText(text).then(() => {
                        this.showNotification('Link copied to clipboard!', 'success');
                    });
                } else {
                    // Fallback for older browsers
                    const textarea = document.createElement('textarea');
                    textarea.value = text;
                    document.body.appendChild(textarea);
                    textarea.select();
                    document.execCommand('copy');
                    document.body.removeChild(textarea);
                    this.showNotification('Link copied to clipboard!', 'success');
                }
            },

            // Mobile-specific optimizations
            setupMobileOptimizations() {
                // Close mobile menu when clicking outside
                document.addEventListener('click', (e) => {
                    if (!e.target.closest('[x-data]')) {
                        this.showMobileMenu = false;
                    }
                });

                // Optimize touch interactions
                document.addEventListener('touchstart', () => {}, { passive: true });

                // Handle iOS viewport issues
                if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
                    const viewport = document.querySelector('meta[name=viewport]');
                    if (viewport) {
                        viewport.setAttribute('content', 
                            'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover');
                    }
                }
            },

            handleViewportChanges() {
                // Responsive view mode adjustments
                window.addEventListener('resize', () => {
                    const isMobile = window.innerWidth < 768;
                    
                    // Auto-adjust view mode based on screen size
                    if (isMobile && this.viewMode === 'split') {
                        this.viewMode = 'list';
                    }
                    
                    // Close mobile menu on resize to larger screen
                    if (!isMobile) {
                        this.showMobileMenu = false;
                    }

                    // Adjust chat interface for mobile
                    if (isMobile && this.showChat) {
                        document.body.style.overflow = 'hidden';
                    } else {
                        document.body.style.overflow = '';
                    }
                });

                // Handle orientation change
                window.addEventListener('orientationchange', () => {
                    setTimeout(() => {
                        if (window.map && window.map.resize) {
                            window.map.resize();
                        }
                    }, 100);
                });
            },

            // Enhanced filtering for mobile
            shouldShowPOI(poi) {
                // Category filter
                if (this.selectedCategory && poi.category !== this.selectedCategory) {
                    return false;
                }

                // Search filter - more comprehensive for mobile
                if (this.searchQuery) {
                    const query = this.searchQuery.toLowerCase();
                    const searchableText = [
                        poi.name || '',
                        poi.description || '',
                        poi.category || '',
                        poi.address || ''
                    ].join(' ').toLowerCase();
                    
                    if (!searchableText.includes(query)) {
                        return false;
                    }
                }

                return true;
            },

            // Mobile-optimized chat methods
            openMobileChat() {
                this.showChat = true;
                this.showMobileMenu = false;
                document.body.style.overflow = 'hidden'; // Prevent background scroll
            },

            closeMobileChat() {
                this.showChat = false;
                document.body.style.overflow = ''; // Restore scroll
            },

            // Touch-friendly POI selection
            selectPOIWithTouch(poiData) {
                // Add haptic feedback if available
                if (navigator.vibrate) {
                    navigator.vibrate(10);
                }
                
                this.selectedPOI = poiData;
                
                // Close mobile menu if open
                this.showMobileMenu = false;
            },

            // Mobile-optimized notifications
            showMobileNotification(message, type = 'info') {
                // Create mobile-optimized notification
                const notification = document.createElement('div');
                notification.className = ` + "`" + `fixed top-16 left-4 right-4 z-50 px-4 py-3 rounded-lg shadow-lg text-white text-sm font-medium transition-all duration-300 transform -translate-y-16 ${
                    type === 'success' ? 'bg-green-500' : 
                    type === 'error' ? 'bg-red-500' : 
                    'bg-blue-500'
                }` + "`" + `;
                notification.textContent = message;
                
                document.body.appendChild(notification);
                
                // Slide in
                setTimeout(() => {
                    notification.classList.remove('-translate-y-16');
                    notification.classList.add('translate-y-0');
                }, 100);
                
                // Auto remove
                setTimeout(() => {
                    notification.classList.add('-translate-y-16');
                    setTimeout(() => {
                        if (document.body.contains(notification)) {
                            document.body.removeChild(notification);
                        }
                    }, 300);
                }, 3000);
            },

            // Enhanced keyboard shortcuts for mobile
            setupKeyboardShortcuts() {
                document.addEventListener('keydown', (e) => {
                    // ESC to close modals and menus
                    if (e.key === 'Escape') {
                        if (this.selectedPOI) {
                            this.closePOIModal();
                        } else if (this.showChat) {
                            this.closeMobileChat();
                        } else if (this.showMobileMenu) {
                            this.showMobileMenu = false;
                        }
                    }
                    
                    // Cmd/Ctrl + K to open search (if not mobile)
                    if ((e.metaKey || e.ctrlKey) && e.key === 'k' && window.innerWidth >= 768) {
                        e.preventDefault();
                        const searchInput = document.querySelector('input[type="text"][placeholder*="Search"]');
                        if (searchInput) {
                            searchInput.focus();
                        }
                    }
                    
                    // View mode shortcuts (1, 2, 3) for desktop only
                    if (e.key >= '1' && e.key <= '3' && !e.target.matches('input, textarea') && window.innerWidth >= 768) {
                        const modes = ['list', 'map', 'split'];
                        this.setViewMode(modes[parseInt(e.key) - 1]);
                    }
                });
            }
        }
    }

    // Make function available globally
    window.itineraryPage = itineraryPage;
}`,
		Call:       templ.SafeScript(`__templ_ItineraryStateScript_8ca2`),
		CallInline: templ.SafeScriptInline(`__templ_ItineraryStateScript_8ca2`),
	}
}

var _ = templruntime.GeneratedTemplate
