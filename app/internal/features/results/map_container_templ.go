// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package results

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"encoding/json"
	"github.com/FACorreiaa/go-templui/app/internal/models"
)

// MapContainer displays the interactive Mapbox map with POI markers
func MapContainer(pois []models.POIDetailedInfo, cityData *models.GeneralCityData, sessionId string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"relative w-full h-full bg-gray-100 dark:bg-gray-800 rounded-lg overflow-hidden\"><!-- Map Element --><div id=\"map\" class=\"w-full h-full\"></div><!-- Map Controls --><div class=\"absolute top-4 right-4 z-10 flex flex-col gap-2\"><button @click=\"map.zoomIn()\" class=\"w-10 h-10 bg-white dark:bg-gray-800 rounded-lg shadow-md flex items-center justify-center text-gray-600 hover:text-gray-900 hover:bg-gray-50 transition-colors\"><svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"></path></svg></button> <button @click=\"map.zoomOut()\" class=\"w-10 h-10 bg-white dark:bg-gray-800 rounded-lg shadow-md flex items-center justify-center text-gray-600 hover:text-gray-900 hover:bg-gray-50 transition-colors\"><svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M20 12H4\"></path></svg></button> <button @click=\"resetMapView()\" class=\"w-10 h-10 bg-white dark:bg-gray-800 rounded-lg shadow-md flex items-center justify-center text-gray-600 hover:text-gray-900 hover:bg-gray-50 transition-colors\"><svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"></path></svg></button></div><!-- Loading State --><div x-show=\"!mapLoaded\" class=\"absolute inset-0 flex items-center justify-center bg-gray-100 dark:bg-gray-800\"><div class=\"flex flex-col items-center gap-3\"><div class=\"w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin\"></div><p class=\"text-sm text-gray-600 dark:text-gray-300\">Loading map...</p></div></div><!-- Map Legend --><div class=\"absolute bottom-4 left-4 bg-white dark:bg-gray-800 rounded-lg shadow-md p-3 max-w-xs\"><h4 class=\"text-sm font-medium text-gray-900 dark:text-white mb-2\">Legend</h4><div class=\"space-y-1\"><div class=\"flex items-center gap-2\"><div class=\"w-3 h-3 bg-blue-600 rounded-full\"></div><span class=\"text-xs text-gray-600 dark:text-gray-300\">Points of Interest</span></div><div class=\"flex items-center gap-2\"><div class=\"w-3 h-3 bg-red-600 rounded-full\"></div><span class=\"text-xs text-gray-600 dark:text-gray-300\">Selected POI</span></div></div></div></div><!-- Map Initialization Script --><script>\n        document.addEventListener('DOMContentLoaded', function() {\n            if (!window.mapboxgl) {\n                console.error('Mapbox GL JS not loaded');\n                return;\n            }\n\n            // POI data from server\n            const poisData = { templ.Raw(poisToJSON(pois)) };\n            const cityCenter = getCityCenter({ templ.Raw(cityDataToJSON(cityData)) });\n            \n            // Initialize map\n            window.map = new mapboxgl.Map({\n                container: 'map',\n                style: 'mapbox://styles/mapbox/streets-v11',\n                center: cityCenter,\n                zoom: 12\n            });\n\n            // Map load event\n            window.map.on('load', function() {\n                // Set map loaded state\n                if (window.Alpine && Alpine.store('itinerary')) {\n                    Alpine.store('itinerary').mapLoaded = true;\n                }\n\n                // Add POI markers\n                poisData.forEach(function(poi, index) {\n                    if (poi.latitude && poi.longitude) {\n                        // Create marker element\n                        const markerEl = document.createElement('div');\n                        markerEl.className = 'poi-marker';\n                        markerEl.style.cssText = `\n                            width: 24px;\n                            height: 24px;\n                            background-color: #2563eb;\n                            border: 2px solid white;\n                            border-radius: 50%;\n                            cursor: pointer;\n                            box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n                        `;\n\n                        // Create popup\n                        const popup = new mapboxgl.Popup({\n                            offset: 25,\n                            closeButton: true,\n                            closeOnClick: false\n                        }).setHTML(`\n                            <div class=\"p-2 max-w-xs\">\n                                <h3 class=\"font-medium text-gray-900 mb-1\">${poi.name}</h3>\n                                <p class=\"text-sm text-gray-600 mb-2\">${poi.description || ''}</p>\n                                <div class=\"flex items-center gap-1 text-xs text-gray-500\">\n                                    <svg class=\"w-3 h-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                        <path fill-rule=\"evenodd\" d=\"M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z\" clip-rule=\"evenodd\"></path>\n                                    </svg>\n                                    ${poi.category || 'Point of Interest'}\n                                </div>\n                                <button onclick=\"selectPOI(${index})\" class=\"mt-2 px-3 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700 transition-colors\">\n                                    View Details\n                                </button>\n                            </div>\n                        `);\n\n                        // Add marker to map\n                        const marker = new mapboxgl.Marker(markerEl)\n                            .setLngLat([poi.longitude, poi.latitude])\n                            .setPopup(popup)\n                            .addTo(window.map);\n\n                        // Click handler\n                        markerEl.addEventListener('click', function() {\n                            selectPOI(index);\n                        });\n                    }\n                });\n            });\n\n            // Reset map view function\n            window.resetMapView = function() {\n                if (window.map) {\n                    window.map.flyTo({\n                        center: cityCenter,\n                        zoom: 12,\n                        duration: 1000\n                    });\n                }\n            };\n\n            // Select POI function\n            window.selectPOI = function(index) {\n                if (window.Alpine && Alpine.store('itinerary')) {\n                    Alpine.store('itinerary').selectedPOI = poisData[index];\n                }\n            };\n        });\n\n        // Helper function to get city center\n        function getCityCenter(cityData) {\n            if (cityData && cityData.center_latitude && cityData.center_longitude) {\n                return [cityData.center_longitude, cityData.center_latitude];\n            }\n            // Default to a reasonable center if no city data\n            return [0, 0];\n        }\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// Helper function to convert POIs to JSON
func poisToJSON(pois []models.POIDetailedInfo) string {
	type simplifiedPOI struct {
		Name        string   `json:"name"`
		Description string   `json:"description"`
		Category    string   `json:"category"`
		Latitude    float64  `json:"latitude"`
		Longitude   float64  `json:"longitude"`
		Images      []string `json:"images"`
	}

	var simplified []simplifiedPOI
	for _, poi := range pois {
		simplified = append(simplified, simplifiedPOI{
			Name:        poi.Name,
			Description: poi.Description,
			Category:    poi.Category,
			Latitude:    poi.Latitude,
			Longitude:   poi.Longitude,
			Images:      poi.Images,
		})
	}

	jsonData, _ := json.Marshal(simplified)
	return string(jsonData)
}

// Helper function to convert city data to JSON
func cityDataToJSON(cityData *models.GeneralCityData) string {
	if cityData == nil {
		return "null"
	}

	type simplifiedCity struct {
		Latitude  float64 `json:"center_latitude"`
		Longitude float64 `json:"center_longitude"`
	}

	simplified := simplifiedCity{
		Latitude:  cityData.CenterLatitude,
		Longitude: cityData.CenterLongitude,
	}

	jsonData, _ := json.Marshal(simplified)
	return string(jsonData)
}

var _ = templruntime.GeneratedTemplate
