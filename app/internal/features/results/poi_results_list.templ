package results

import (
	"fmt"
	"github.com/FACorreiaa/go-templui/app/internal/models"
)

// POIResultsList displays the list of points of interest with filtering and sorting
templ POIResultsList(pois []models.POIDetailedInfo) {
	<div class="space-y-4">
		<!-- Filter and Sort Controls -->
		<div class="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700">
			<div class="flex flex-col gap-2 sm:flex-row sm:items-center sm:gap-4">
				<!-- Category Filter -->
				<div class="flex items-center gap-2">
					<label for="categoryFilter" class="text-sm font-medium text-gray-700 dark:text-gray-300">Category:</label>
					<select
						x-model="selectedCategory"
						class="text-sm border-gray-300 rounded-md focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
					>
						<option value="">All Categories</option>
						for _, category := range getUniqueCategories(pois) {
							<option value={ category }>{ category }</option>
						}
					</select>
				</div>
				<!-- Sort Options -->
				<div class="flex items-center gap-2">
					<label for="sortBy" class="text-sm font-medium text-gray-700 dark:text-gray-300">Sort by:</label>
					<select
						x-model="sortBy"
						class="text-sm border-gray-300 rounded-md focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
					>
						<option value="name">Name</option>
						<option value="category">Category</option>
						<option value="rating">Rating</option>
					</select>
				</div>
			</div>
			<!-- Search -->
			<div class="relative">
				<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
					<svg class="h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
					</svg>
				</div>
				<input
					x-model="searchQuery"
					type="text"
					placeholder="Search places..."
					class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md text-sm placeholder-gray-400 focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:placeholder-gray-400"
				/>
			</div>
		</div>
		<!-- POI Cards -->
		<div class="grid gap-4">
			for i, poi := range pois {
				<div
					x-show="shouldShowPOI({templ.Raw(poiToAlpineData(poi, i))})"
					x-transition:enter="transition ease-out duration-200"
					x-transition:enter-start="opacity-0 transform translate-y-1"
					x-transition:enter-end="opacity-100 transform translate-y-0"
					class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 hover:shadow-md transition-shadow cursor-pointer"
					@click={ fmt.Sprintf("selectPOI(%d)", i) }
				>
					<div class="flex flex-col sm:flex-row">
						<!-- POI Image -->
						<div class="flex-shrink-0">
							if len(poi.Images) > 0 && poi.Images[0] != "" {
								<img
									class="h-48 w-full sm:h-32 sm:w-48 object-cover rounded-t-lg sm:rounded-l-lg sm:rounded-t-none"
									src={ poi.Images[0] }
									alt={ poi.Name }
									loading="lazy"
								/>
							} else {
								<div class="h-48 w-full sm:h-32 sm:w-48 bg-gradient-to-br from-blue-500 to-purple-600 rounded-t-lg sm:rounded-l-lg sm:rounded-t-none flex items-center justify-center">
									<svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
									</svg>
								</div>
							}
						</div>
						<!-- POI Content -->
						<div class="flex-1 p-4">
							<div class="flex items-start justify-between mb-2">
								<div class="flex-1">
									<h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-1">
										{ poi.Name }
									</h3>
									if poi.Category != "" {
										<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300">
											{ poi.Category }
										</span>
									}
								</div>
								<!-- Rating -->
								if poi.Rating > 0 {
									<div class="flex items-center gap-1 ml-3">
										<svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
											<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
										</svg>
										<span class="text-sm font-medium text-gray-700 dark:text-gray-300">
											{ formatRating(poi.Rating) }
										</span>
									</div>
								}
							</div>
							<!-- Description -->
							if poi.Description != "" {
								<p class="text-sm text-gray-600 dark:text-gray-300 mb-3 line-clamp-2">
									{ poi.Description }
								</p>
							}
							<!-- Tags/Features -->
							if len(poi.Tags) > 0 {
								<div class="flex flex-wrap gap-1 mb-3">
									for _, tag := range poi.Tags[:min(3, len(poi.Tags))] {
										<span class="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300">
											{ tag }
										</span>
									}
									if len(poi.Tags) > 3 {
										<span class="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-gray-100 text-gray-500 dark:bg-gray-700 dark:text-gray-400">
											+{ fmt.Sprintf("%d", len(poi.Tags)-3) } more
										</span>
									}
								</div>
							}
							<!-- Footer Info -->
							<div class="flex items-center justify-between">
								<div class="flex items-center gap-4 text-xs text-gray-500 dark:text-gray-400">
									if poi.Address != "" {
										<div class="flex items-center gap-1">
											<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
											</svg>
											<span class="truncate max-w-48">{ poi.Address }</span>
										</div>
									}
									if poi.PhoneNumber != "" {
										<div class="flex items-center gap-1">
											<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
											</svg>
											<span>{ poi.PhoneNumber }</span>
										</div>
									}
								</div>
								<!-- Action Button -->
								<button
									@click.stop={ fmt.Sprintf("selectPOI(%d)", i) }
									class="flex items-center gap-1 px-3 py-1.5 text-xs font-medium text-blue-600 hover:text-blue-700 hover:bg-blue-50 rounded-md transition-colors dark:text-blue-400 dark:hover:text-blue-300 dark:hover:bg-blue-900/20"
								>
									View Details
									<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
									</svg>
								</button>
							</div>
						</div>
					</div>
				</div>
			}
		</div>
		<!-- Empty State -->
		<div
			x-show="filteredPOICount === 0"
			class="text-center py-12"
		>
			<svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
			</svg>
			<h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-white">No places found</h3>
			<p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
				Try adjusting your search or filter criteria.
			</p>
		</div>
	</div>
}

// Helper function to get unique categories
func getUniqueCategories(pois []models.POIDetailedInfo) []string {
	categories := make(map[string]bool)
	for _, poi := range pois {
		if poi.Category != "" {
			categories[poi.Category] = true
		}
	}

	var result []string
	for category := range categories {
		result = append(result, category)
	}
	return result
}


// Helper function to convert POI to Alpine.js data
func poiToAlpineData(poi models.POIDetailedInfo, index int) string {
	return fmt.Sprintf(`{
        index: %d,
        name: %q,
        category: %q,
        description: %q,
        rating: %f
    }`, index, poi.Name, poi.Category, poi.Description, poi.Rating)
}

