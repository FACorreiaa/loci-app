package results

import (
	"fmt"
	"github.com/FACorreiaa/go-templui/app/internal/models"
)

// HotelsResultsSSE renders the complete hotels interface with SSE zones for dynamic content
templ HotelsResultsSSE(sessionID string, cityData models.GeneralCityData, hotels []models.HotelDetailedInfo, hasData bool) {
	<div class="min-h-screen bg-gray-50 dark:bg-gray-900 hotels-results" id="hotels-container" 
		 x-data="hotelsPage()" 
		 hx-ext="sse"
		 if !hasData {
		 	sse-connect={ fmt.Sprintf("/hotels/sse?sessionId=%s", sessionID) }
		 }
		>
		<!-- Mobile-First Enhanced Header -->
		<div class="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 sticky top-0 z-30">
			<div class="px-4 py-3 sm:px-6">
				<!-- SSE Zone for Header Updates -->
				<div id="hotels-header" 
					 if !hasData {
					 	sse-swap="hotels-header"
					 }
					>
					if hasData {
						@HotelsHeaderComplete(cityData, hotels)
					} else {
						@HotelsHeaderLoading()
					}
				</div>
				
				<!-- View Mode Toggle - Always visible -->
				<div class="mt-3 pt-3 border-t border-gray-200 dark:border-gray-700">
					<div class="flex bg-gray-100 dark:bg-gray-700 rounded-lg p-1">
						<button
							@click="viewMode = 'list'"
							:class="viewMode === 'list' ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm' : 'text-gray-600 dark:text-gray-300'"
							class="flex-1 px-3 py-2 rounded text-sm font-medium transition-colors"
						>
							<div class="flex items-center justify-center gap-1">
								<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
								</svg>
								<span class="hidden sm:inline">List</span>
							</div>
						</button>
						<button
							@click="viewMode = 'map'"
							:class="viewMode === 'map' ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm' : 'text-gray-600 dark:text-gray-300'"
							class="flex-1 px-3 py-2 rounded text-sm font-medium transition-colors"
						>
							<div class="flex items-center justify-center gap-1">
								<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7"></path>
								</svg>
								<span class="hidden sm:inline">Map</span>
							</div>
						</button>
						<button
							@click="viewMode = 'split'"
							:class="viewMode === 'split' ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm' : 'text-gray-600 dark:text-gray-300'"
							class="flex-1 px-3 py-2 rounded text-sm font-medium transition-colors"
						>
							<div class="flex items-center justify-center gap-1">
								<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2h-2a2 2 0 00-2 2"></path>
								</svg>
								<span class="hidden sm:inline">Split</span>
							</div>
						</button>
					</div>
				</div>
			</div>
		</div>

		<!-- Main Content Area -->
		<div class="flex flex-1 overflow-hidden">
			<!-- Content Area with SSE Zone -->
			<div id="hotels-content" 
				 x-show="viewMode !== 'map'" 
				 class="flex-1 overflow-auto"
				 if !hasData {
				 	sse-swap="hotels-content"
				 }
				>
				if hasData {
					@HotelsContentComplete(cityData, hotels)
				} else {
					@HotelsContentLoading()
				}
			</div>

			<!-- Map View (always available) -->
			<div x-show="viewMode === 'map' || viewMode === 'split'" 
				 :class="viewMode === 'split' ? 'w-1/2' : 'w-full'" 
				 class="bg-gray-200 relative">
				<div class="absolute inset-0 flex items-center justify-center">
					<div class="text-center">
						<div class="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-3">
							<svg class="w-8 h-8 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
							</svg>
						</div>
						<p class="text-gray-600 font-medium">Hotels Map</p>
						<p class="text-gray-500 text-sm">Coming soon</p>
					</div>
				</div>
			</div>
		</div>
		
		<!-- Loading Progress Indicator (SSE driven) -->
		<div id="loading-progress" 
			 if !hasData {
			 	sse-swap="loading-progress"
			 	class="fixed bottom-4 right-4 z-50"
			 } else {
			 	class="fixed bottom-4 right-4 z-50 hidden"
			 }
			>
			if !hasData {
				@LoadingProgressHotels()
			}
		</div>
	</div>
}

// HotelsHeaderComplete renders the complete header with hotels data
templ HotelsHeaderComplete(cityData models.GeneralCityData, hotels []models.HotelDetailedInfo) {
	<!-- Main Header Content -->
	<div class="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
		<div class="flex-1 min-w-0">
			<div class="flex items-center gap-3">
				<div class="w-10 h-10 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-lg flex items-center justify-center text-white text-xl flex-shrink-0">
					üè®
				</div>
				<div class="flex-1 min-w-0">
					<h1 class="text-lg font-bold text-gray-900 dark:text-white sm:text-xl truncate">
						if cityData.City != "" {
							{ fmt.Sprintf("Hotels in %s", cityData.City) }
						} else {
							Hotels
						}
					</h1>
					if cityData.City != "" {
						<div class="flex items-center gap-2 text-sm text-gray-700 dark:text-gray-300 mt-1">
							<svg class="w-4 h-4 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
							</svg>
							<span class="font-medium">{ cityData.City }, { cityData.Country }</span>
						</div>
					}
					<div class="flex flex-wrap items-center gap-2 text-xs text-gray-600 dark:text-gray-300 mt-1">
						<div class="flex items-center gap-1">
							<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
							</svg>
							<span>{ fmt.Sprintf("%d", len(hotels)) } hotels found</span>
						</div>
					</div>
				</div>
			</div>
		</div>
		<!-- Mobile Action Button -->
		<div class="flex sm:hidden">
			<button
				@click="showMobileMenu = !showMobileMenu"
				class="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors"
			>
				<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"></path>
				</svg>
			</button>
		</div>
		<!-- Desktop Actions -->
		<div class="hidden sm:flex items-center gap-2">
			<button
				@click="shareHotels()"
				class="p-2 text-gray-700 hover:bg-gray-100 rounded-lg transition-colors"
			>
				<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
				</svg>
			</button>
		</div>
	</div>
}

// HotelsHeaderLoading renders the loading state for header
templ HotelsHeaderLoading() {
	<div class="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between animate-pulse">
		<div class="flex-1 min-w-0">
			<div class="flex items-center gap-3">
				<div class="w-10 h-10 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-lg flex items-center justify-center text-white text-xl flex-shrink-0">
					‚è≥
				</div>
				<div class="flex-1 min-w-0">
					<div class="h-6 bg-gray-200 rounded w-48 mb-2"></div>
					<div class="h-4 bg-gray-200 rounded w-32 mb-1"></div>
					<div class="h-3 bg-gray-200 rounded w-24"></div>
				</div>
			</div>
		</div>
		<div class="hidden sm:flex items-center gap-2">
			<div class="h-9 bg-gray-200 rounded w-9"></div>
		</div>
	</div>
}

// HotelsContentComplete renders the complete content area
templ HotelsContentComplete(cityData models.GeneralCityData, hotels []models.HotelDetailedInfo) {
	<div class="p-4">
		<!-- Use existing HotelsResults content components -->
		@HotelsResults(cityData, hotels, true, true, 15, []string{})
	</div>
}

// HotelsContentLoading renders the loading state for content
templ HotelsContentLoading() {
	<div class="p-4 space-y-4">
		<div class="animate-pulse">
			<div class="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
			<div class="h-4 bg-gray-200 rounded w-1/2 mb-4"></div>
			<div class="space-y-3">
				for i := 0; i < 5; i++ {
					<div class="flex space-x-4">
						<div class="w-16 h-16 bg-gray-200 rounded"></div>
						<div class="flex-1 space-y-2">
							<div class="h-4 bg-gray-200 rounded w-2/3"></div>
							<div class="h-3 bg-gray-200 rounded w-1/2"></div>
						</div>
					</div>
				}
			</div>
		</div>
	</div>
}

// LoadingProgressHotels renders the loading progress indicator for hotels
templ LoadingProgressHotels() {
	<div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-4 max-w-sm">
		<div class="flex items-center space-x-3">
			<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-purple-600"></div>
			<div class="flex-1">
				<p class="text-sm font-medium text-gray-900 dark:text-white">Finding hotels...</p>
				<p class="text-xs text-gray-500 dark:text-gray-400">This may take a few moments</p>
			</div>
		</div>
	</div>
}

script HotelsStateScript() {
    function hotelsPage() {
        return {
            viewMode: 'list',
            showMobileMenu: false,
            
            shareHotels() {
                if (navigator.share) {
                    navigator.share({
                        title: 'Hotel Recommendations',
                        text: 'Check out these hotel recommendations!',
                        url: window.location.href
                    });
                } else {
                    navigator.clipboard.writeText(window.location.href).then(() => {
                        alert('Link copied to clipboard!');
                    });
                }
            },
            
            setViewMode(mode) {
                this.viewMode = mode;
            }
        };
    }
}