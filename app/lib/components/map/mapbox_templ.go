// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package mapcomponents

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func MapboxScripts() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!-- Mapbox GL JS --><link href=\"https://api.mapbox.com/mapbox-gl-js/v3.0.1/mapbox-gl.css\" rel=\"stylesheet\"><script src=\"https://api.mapbox.com/mapbox-gl-js/v3.0.1/mapbox-gl.js\"></script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = MapboxConfigScript().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = getCategoryIconFunction().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func MapboxConfigScript() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<script>\n\t\t// Set Mapbox access token globally\n\t\twindow.MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoieW91cm11c2VybmFtZSIsImEiOiJjbHl6eHl6eHl6eHl6In0.your_access_token_here';\n\t\t\n\t\t// You can set this via server-side rendering with the actual token from environment variables\n\t\t// Example: window.MAPBOX_ACCESS_TOKEN = '{{ .MapboxToken }}';\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func MapboxContainer(mapId string, height string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<div id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(mapId)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/lib/components/map/mapbox.templ`, Line: 22, Col: 16}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "\" style=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 string
		templ_7745c5c3_Var5, templ_7745c5c3_Err = templruntime.SanitizeStyleAttributeValues(templ.SafeCSS("height: " + height))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app/lib/components/map/mapbox.templ`, Line: 22, Col: 61}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "\"></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func MapboxInit(mapId, accessToken string, center []float64, zoom float64) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_MapboxInit_2c2d`,
		Function: `function __templ_MapboxInit_2c2d(mapId, accessToken, center, zoom){// Initialize Mapbox map
	mapboxgl.accessToken = accessToken;
	
	const map = new mapboxgl.Map({
		container: mapId,
		style: 'mapbox://styles/mapbox/streets-v12',
		center: center,
		zoom: zoom,
		attributionControl: false
	});

	// Add navigation controls
	map.addControl(new mapboxgl.NavigationControl());
	
	// Add attribution control in bottom right
	map.addControl(new mapboxgl.AttributionControl({
		compact: true
	}), 'bottom-right');

	// Store map instance globally for access from other functions
	window[mapId + '_instance'] = map;
	
	return map;
}`,
		Call:       templ.SafeScript(`__templ_MapboxInit_2c2d`, mapId, accessToken, center, zoom),
		CallInline: templ.SafeScriptInline(`__templ_MapboxInit_2c2d`, mapId, accessToken, center, zoom),
	}
}

func AddMapMarkers(mapId string, markers []interface{}) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_AddMapMarkers_197f`,
		Function: `function __templ_AddMapMarkers_197f(mapId, markers){const map = window[mapId + '_instance'];
	if (!map) return;
	
	// Clear existing markers
	if (window[mapId + '_markers']) {
		window[mapId + '_markers'].forEach(marker => marker.remove());
	}
	window[mapId + '_markers'] = [];
	
	// Add new markers
	markers.forEach(markerData => {
		const el = document.createElement('div');
		el.className = 'map-marker';
		el.style.cssText = ` + "`" + `
			width: 30px;
			height: 30px;
			border-radius: 50%;
			background: #3b82f6;
			border: 3px solid white;
			box-shadow: 0 2px 4px rgba(0,0,0,0.3);
			cursor: pointer;
			display: flex;
			align-items: center;
			justify-content: center;
		` + "`" + `;
		
		// Add category icon
		const icon = document.createElement('i');
		icon.className = getCategoryIcon(markerData.category);
		icon.style.color = 'white';
		icon.style.fontSize = '12px';
		el.appendChild(icon);
		
		const marker = new mapboxgl.Marker(el)
			.setLngLat([markerData.lng, markerData.lat])
			.addTo(map);
		
		// Add popup
		const popup = new mapboxgl.Popup({
			offset: 25,
			closeButton: false
		}).setHTML(` + "`" + `
			<div class="p-3 min-w-[200px]">
				<h3 class="font-semibold text-gray-900 mb-1">${markerData.name}</h3>
				<p class="text-sm text-gray-600 mb-2">${markerData.category}</p>
				<div class="flex items-center mb-2">
					<div class="flex">
						${Array.from({length: Math.floor(markerData.rating)}, () => '<i class="fas fa-star text-yellow-400 text-xs"></i>').join('')}
					</div>
					<span class="ml-1 text-xs text-gray-500">(${markerData.rating})</span>
				</div>
				<p class="text-xs text-gray-500 mb-3">${markerData.address || ''}</p>
				<div class="flex space-x-2">
					<button onclick="addToFavorites('${markerData.id}')" 
							class="flex-1 bg-blue-600 text-white px-3 py-1 rounded text-xs hover:bg-blue-700">
						<i class="fas fa-heart mr-1"></i>
						Favorite
					</button>
					<button onclick="addToItinerary('${markerData.id}')" 
							class="flex-1 bg-gray-100 text-gray-700 px-3 py-1 rounded text-xs hover:bg-gray-200">
						<i class="fas fa-plus mr-1"></i>
						Add
					</button>
				</div>
			</div>
		` + "`" + `);
		
		marker.setPopup(popup);
		
		window[mapId + '_markers'].push(marker);
	});
	
	// Fit map to show all markers
	if (markers.length > 0) {
		const bounds = new mapboxgl.LngLatBounds();
		markers.forEach(marker => bounds.extend([marker.lng, marker.lat]));
		map.fitBounds(bounds, { padding: 50 });
	}
}`,
		Call:       templ.SafeScript(`__templ_AddMapMarkers_197f`, mapId, markers),
		CallInline: templ.SafeScriptInline(`__templ_AddMapMarkers_197f`, mapId, markers),
	}
}

func UpdateMapCenter(mapId string, lat, lng float64, zoom float64) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_UpdateMapCenter_343f`,
		Function: `function __templ_UpdateMapCenter_343f(mapId, lat, lng, zoom){const map = window[mapId + '_instance'];
	if (!map) return;
	
	map.flyTo({
		center: [lng, lat],
		zoom: zoom,
		speed: 1.2,
		curve: 1.42,
		easing(t) {
			return t;
		}
	});
}`,
		Call:       templ.SafeScript(`__templ_UpdateMapCenter_343f`, mapId, lat, lng, zoom),
		CallInline: templ.SafeScriptInline(`__templ_UpdateMapCenter_343f`, mapId, lat, lng, zoom),
	}
}

func AddRouteToMap(mapId string, coordinates [][]float64) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_AddRouteToMap_a454`,
		Function: `function __templ_AddRouteToMap_a454(mapId, coordinates){const map = window[mapId + '_instance'];
	if (!map) return;
	
	map.on('load', () => {
		// Add route source
		if (map.getSource('route')) {
			map.getSource('route').setData({
				type: 'Feature',
				properties: {},
				geometry: {
					type: 'LineString',
					coordinates: coordinates
				}
			});
		} else {
			map.addSource('route', {
				type: 'geojson',
				data: {
					type: 'Feature',
					properties: {},
					geometry: {
						type: 'LineString',
						coordinates: coordinates
					}
				}
			});
			
			// Add route layer with pattern
			map.addLayer({
				id: 'route',
				type: 'line',
				source: 'route',
				layout: {
					'line-join': 'round',
					'line-cap': 'round'
				},
				paint: {
					'line-color': '#3b82f6',
					'line-width': 4,
					'line-opacity': 0.8
				}
			});
		}
	});
}`,
		Call:       templ.SafeScript(`__templ_AddRouteToMap_a454`, mapId, coordinates),
		CallInline: templ.SafeScriptInline(`__templ_AddRouteToMap_a454`, mapId, coordinates),
	}
}

func getCategoryIconFunction() templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_getCategoryIconFunction_646d`,
		Function: `function __templ_getCategoryIconFunction_646d(){function getCategoryIcon(category) {
		const icons = {
			'restaurant': 'fas fa-utensils',
			'cafe': 'fas fa-coffee',
			'bar': 'fas fa-wine-glass',
			'hotel': 'fas fa-bed',
			'attraction': 'fas fa-camera',
			'museum': 'fas fa-landmark',
			'park': 'fas fa-tree',
			'shopping': 'fas fa-shopping-bag',
			'entertainment': 'fas fa-film',
			'default': 'fas fa-map-marker-alt'
		};
		
		const lowerCategory = category.toLowerCase();
		for (const key in icons) {
			if (lowerCategory.includes(key)) {
				return icons[key];
			}
		}
		return icons.default;
	}
	
	// Make function globally available
	window.getCategoryIcon = getCategoryIcon;
}`,
		Call:       templ.SafeScript(`__templ_getCategoryIconFunction_646d`),
		CallInline: templ.SafeScriptInline(`__templ_getCategoryIconFunction_646d`),
	}
}

var _ = templruntime.GeneratedTemplate
