package itinerary

import (
	"fmt"
	mapcomponents "github.com/FACorreiaa/go-templui/app/lib/components/map"
	"github.com/FACorreiaa/go-templui/app/lib/models"
)

templ ItineraryPage() {
	<div class="h-full flex">
		<!-- Left Panel - Chat/Text Content -->
		<div class="w-1/2 flex flex-col bg-white">
			<!-- Header -->
			<div class="p-6 border-b border-gray-200 bg-gray-50">
				<div class="flex items-center justify-between mb-4">
					<h1 class="text-2xl font-bold text-gray-900">Travel Planner</h1>
					<div class="flex items-center space-x-2">
						<button
							id="new-itinerary-btn"
							class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors text-sm"
						>
							<i class="fas fa-plus mr-2"></i>
							New Plan
						</button>
					</div>
				</div>
				<!-- Location Input -->
				<div class="relative mb-4">
					<input
						type="text"
						id="destination-input"
						placeholder="Where do you want to go? (e.g., Paris, France)"
						class="w-full px-4 py-3 pl-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
						hx-post="/itinerary/destination"
						hx-trigger="input changed delay:500ms, keyup[keyCode==13]"
						hx-target="#destination-suggestions"
						hx-include="this"
					/>
					<i class="fas fa-map-marker-alt absolute left-3 top-3.5 text-gray-400"></i>
				</div>
				<!-- Destination Suggestions -->
				<div id="destination-suggestions" class="mb-4"></div>
				<!-- Travel Preferences -->
				<div class="grid grid-cols-3 gap-4">
					<div>
						<label class="block text-sm font-medium text-gray-700 mb-1">Duration</label>
						<select
							id="trip-duration"
							name="duration"
							class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500"
						>
							<option value="1">1 Day</option>
							<option value="3">3 Days</option>
							<option value="5" selected>5 Days</option>
							<option value="7">1 Week</option>
							<option value="14">2 Weeks</option>
						</select>
					</div>
					<div>
						<label class="block text-sm font-medium text-gray-700 mb-1">Budget</label>
						<select
							id="trip-budget"
							name="budget"
							class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500"
						>
							<option value="budget">Budget</option>
							<option value="moderate" selected>Moderate</option>
							<option value="luxury">Luxury</option>
						</select>
					</div>
					<div>
						<label class="block text-sm font-medium text-gray-700 mb-1">Style</label>
						<select
							id="trip-style"
							name="style"
							class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500"
						>
							<option value="cultural">Cultural</option>
							<option value="adventure">Adventure</option>
							<option value="relaxation" selected>Relaxation</option>
							<option value="foodie">Foodie</option>
							<option value="nightlife">Nightlife</option>
						</select>
					</div>
				</div>
			</div>
			<!-- Chat Interface -->
			<div class="flex-1 flex flex-col">
				<!-- Chat Messages -->
				<div id="chat-messages" class="flex-1 overflow-y-auto p-6 space-y-4">
					@ItineraryWelcomeMessage()
				</div>
				<!-- Chat Input -->
				<div class="border-t border-gray-200 p-4 bg-gray-50">
					<form
						id="chat-form"
						hx-post="/itinerary/chat"
						hx-target="#chat-messages"
						hx-swap="beforeend"
						hx-include="#destination-input, #trip-duration, #trip-budget, #trip-style"
					>
						<div class="flex items-center space-x-3">
							<div class="flex-1 relative">
								<textarea
									name="message"
									id="chat-input"
									placeholder="Ask me anything about your trip... (e.g., 'Add a romantic restaurant for dinner')"
									class="w-full px-4 py-3 pr-12 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
									rows="1"
									style="min-height: 44px;"
								></textarea>
								<button
									type="submit"
									class="absolute right-2 top-1/2 transform -translate-y-1/2 bg-blue-600 text-white p-2 rounded-lg hover:bg-blue-700 transition-colors"
								>
									<i class="fas fa-paper-plane"></i>
								</button>
							</div>
						</div>
					</form>
					<!-- Quick Actions -->
					<div class="flex flex-wrap gap-2 mt-3">
						<button class="quick-action-btn" data-message="Create a 3-day itinerary">
							<i class="fas fa-route mr-1"></i>
							3-Day Plan
						</button>
						<button class="quick-action-btn" data-message="Find the best restaurants">
							<i class="fas fa-utensils mr-1"></i>
							Restaurants
						</button>
						<button class="quick-action-btn" data-message="Show me popular attractions">
							<i class="fas fa-camera mr-1"></i>
							Attractions
						</button>
						<button class="quick-action-btn" data-message="Recommend hotels">
							<i class="fas fa-bed mr-1"></i>
							Hotels
						</button>
					</div>
				</div>
			</div>
		</div>
		<!-- Right Panel - Map -->
		<div class="w-1/2 bg-gray-100">
			<div class="h-full flex flex-col">
				<!-- Map Header -->
				<div class="p-4 bg-white border-b border-gray-200">
					<div class="flex items-center justify-between">
						<h2 class="font-semibold text-gray-900">Map View</h2>
						<div class="flex items-center space-x-2">
							<button
								id="map-layer-toggle"
								class="bg-gray-100 text-gray-700 px-3 py-1 rounded-md text-sm hover:bg-gray-200 transition-colors"
							>
								<i class="fas fa-layer-group mr-1"></i>
								Layers
							</button>
							<button
								id="map-center-btn"
								class="bg-gray-100 text-gray-700 px-3 py-1 rounded-md text-sm hover:bg-gray-200 transition-colors"
							>
								<i class="fas fa-crosshairs mr-1"></i>
								Center
							</button>
						</div>
					</div>
				</div>
				<!-- Map Container -->
				<div class="flex-1 relative">
					@mapcomponents.MapboxContainer("itinerary-map", "100%")
					<!-- Map Controls -->
					<div class="absolute top-4 right-4 bg-white rounded-lg shadow-lg p-2 space-y-2">
						<button
							class="map-control-btn active"
							data-layer="attractions"
							title="Show Attractions"
						>
							<i class="fas fa-camera"></i>
						</button>
						<button
							class="map-control-btn"
							data-layer="restaurants"
							title="Show Restaurants"
						>
							<i class="fas fa-utensils"></i>
						</button>
						<button
							class="map-control-btn"
							data-layer="hotels"
							title="Show Hotels"
						>
							<i class="fas fa-bed"></i>
						</button>
						<button
							class="map-control-btn"
							data-layer="transport"
							title="Show Transport"
						>
							<i class="fas fa-subway"></i>
						</button>
					</div>
				</div>
				<!-- Current Itinerary Summary -->
				<div class="bg-white border-t border-gray-200 p-4">
					<h3 class="font-semibold text-gray-900 mb-3">Current Itinerary</h3>
					<div id="itinerary-summary" class="space-y-2">
						@ItineraryEmptyState()
					</div>
				</div>
			</div>
		</div>
	</div>
	<style>
		.quick-action-btn {
			background: white;
			border: 1px solid #d1d5db;
			padding: 6px 12px;
			border-radius: 6px;
			font-size: 14px;
			color: #374151;
			cursor: pointer;
			transition: all 0.2s;
		}
		
		.quick-action-btn:hover {
			background: #f3f4f6;
			border-color: #9ca3af;
		}
		
		.map-control-btn {
			width: 36px;
			height: 36px;
			background: white;
			border: 1px solid #d1d5db;
			border-radius: 6px;
			display: flex;
			align-items: center;
			justify-content: center;
			cursor: pointer;
			transition: all 0.2s;
		}
		
		.map-control-btn:hover {
			background: #f3f4f6;
		}
		
		.map-control-btn.active {
			background: #3b82f6;
			color: white;
			border-color: #3b82f6;
		}
		
		#chat-messages {
			scrollbar-width: thin;
			scrollbar-color: #cbd5e1 #f1f5f9;
		}
		
		#chat-messages::-webkit-scrollbar {
			width: 6px;
		}
		
		#chat-messages::-webkit-scrollbar-track {
			background: #f1f5f9;
		}
		
		#chat-messages::-webkit-scrollbar-thumb {
			background: #cbd5e1;
			border-radius: 3px;
		}
	</style>
	<script>
		document.addEventListener('DOMContentLoaded', function() {
			// Quick action buttons
			const quickActionBtns = document.querySelectorAll('.quick-action-btn');
			const chatInput = document.getElementById('chat-input');
			const chatForm = document.getElementById('chat-form');
			
			quickActionBtns.forEach(btn => {
				btn.addEventListener('click', function() {
					const message = this.dataset.message;
					chatInput.value = message;
					chatForm.dispatchEvent(new Event('submit'));
				});
			});
			
			// Auto-resize chat input
			chatInput.addEventListener('input', function() {
				this.style.height = 'auto';
				this.style.height = Math.min(this.scrollHeight, 120) + 'px';
			});
			
			// Map layer controls
			const mapControlBtns = document.querySelectorAll('.map-control-btn');
			mapControlBtns.forEach(btn => {
				btn.addEventListener('click', function() {
					mapControlBtns.forEach(b => b.classList.remove('active'));
					this.classList.add('active');
					
					const layer = this.dataset.layer;
					updateMapLayer(layer);
				});
			});
			
			// Initialize map when page loads
			initializeItineraryMap();
		});
		
		function updateMapLayer(layer) {
			console.log('Updating map layer:', layer);
			// Map layer update logic will be implemented
		}
		
		function initializeItineraryMap() {
			// Get access token from server endpoint
			const accessToken = window.MAPBOX_ACCESS_TOKEN || 'pk.eyJ1IjoieW91cm11c2VybmFtZSIsImEiOiJjbHl6eHl6eHl6eHl6In0.your_access_token_here';
			
			// Default to New York if no location set
			const defaultLat = 40.7128;
			const defaultLng = -74.0060;
			
			// Initialize map
			const map = mapcomponents.MapboxInit('itinerary-map', accessToken, [defaultLng, defaultLat], 12);
			
			// Load initial itinerary markers if any
			loadItineraryMarkers();
		}
		
		function loadItineraryMarkers() {
			// Fetch current itinerary data and display markers
			fetch('/itinerary/summary')
				.then(response => response.json())
				.then(data => {
					if (data.markers) {
						mapcomponents.AddMapMarkers('itinerary-map', data.markers);
						
						// Add route if multiple markers
						if (data.markers.length > 1) {
							const coordinates = data.markers.map(m => [m.lng, m.lat]);
							mapcomponents.AddRouteToMap('itinerary-map', coordinates);
						}
					}
				})
				.catch(error => {
					console.error('Error loading itinerary markers:', error);
				});
		}
		
		function addToItinerary(poi) {
			console.log('Adding POI to itinerary:', poi);
			
			// Add to backend
			htmx.ajax('POST', `/itinerary/add/${poi}`, {
				target: 'body',
				swap: 'none'
			});
			
			// Refresh map markers
			setTimeout(() => {
				loadItineraryMarkers();
			}, 500);
			
			// Show success notification
			showNotification('Added to itinerary!', 'success');
		}
		
		function updateMapForDestination(destination) {
			// Geocode destination and update map center
			// This would typically use a geocoding service
			console.log('Updating map for destination:', destination);
			
			// Mock coordinates for common destinations
			const destinations = {
				'paris, france': [2.3522, 48.8566],
				'new york, usa': [-74.0060, 40.7128],
				'london, england': [-0.1276, 51.5074],
				'tokyo, japan': [139.6917, 35.6895]
			};
			
			const coords = destinations[destination.toLowerCase()];
			if (coords) {
				mapcomponents.UpdateMapCenter('itinerary-map', coords[1], coords[0], 12);
				
				// Load nearby attractions for the destination
				fetch(`/nearby/map?lat=${coords[1]}&lng=${coords[0]}&category=attractions`)
					.then(response => response.json())
					.then(data => {
						if (data.markers) {
							mapcomponents.AddMapMarkers('itinerary-map', data.markers);
						}
					});
			}
		}
		
		// Auto-scroll chat messages to bottom
		function scrollChatToBottom() {
			const chatMessages = document.getElementById('chat-messages');
			chatMessages.scrollTop = chatMessages.scrollHeight;
		}
		
		// Handle HTMX events
		document.body.addEventListener('htmx:afterSwap', function(evt) {
			if (evt.detail.target.id === 'chat-messages') {
				scrollChatToBottom();
			}
		});
	</script>
}

templ ItineraryWelcomeMessage() {
	<div class="flex items-start space-x-3">
		<div class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0">
			<i class="fas fa-robot text-white text-sm"></i>
		</div>
		<div class="bg-gray-100 rounded-lg p-4 max-w-md">
			<p class="text-gray-800">
				Hi! I'm your travel planning assistant. I can help you create amazing itineraries, 
				find the best places to visit, restaurants to try, and hotels to stay at.
			</p>
			<p class="text-gray-800 mt-2">
				To get started, tell me where you'd like to go and I'll create a personalized itinerary for you!
			</p>
		</div>
	</div>
}

templ ItineraryChatMessage(message models.ChatMessage, isUser bool) {
	<div class={ fmt.Sprintf("flex items-start space-x-3 %s", templ.KV("flex-row-reverse space-x-reverse", isUser)) }>
		<div
			class={ fmt.Sprintf("w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 %s", 
			templ.KV("bg-blue-600", !isUser), templ.KV("bg-gray-600", isUser)) }
		>
			if isUser {
				<i class="fas fa-user text-white text-sm"></i>
			} else {
				<i class="fas fa-robot text-white text-sm"></i>
			}
		</div>
		<div
			class={ fmt.Sprintf("rounded-lg p-4 max-w-md %s", 
			templ.KV("bg-gray-100", !isUser), templ.KV("bg-blue-600 text-white", isUser)) }
		>
			<p class={ fmt.Sprintf("%s", templ.KV("text-gray-800", !isUser)) }>
				{ message.Content }
			</p>
			if message.Timestamp != "" {
				<p
					class={ fmt.Sprintf("text-xs mt-2 %s", 
					templ.KV("text-gray-500", !isUser), templ.KV("text-blue-100", isUser)) }
				>
					{ message.Timestamp }
				</p>
			}
		</div>
	</div>
}

templ ItineraryPOICard(poi models.NearbyPOI) {
	<div
		class="bg-white rounded-lg p-3 border border-gray-200 hover:border-blue-300 transition-colors cursor-pointer"
		onclick="addToItinerary('{poi.ID}')"
	>
		<div class="flex items-center space-x-3">
			<div class="w-12 h-12 bg-gray-200 rounded-lg flex-shrink-0">
				if poi.ImageURL != "" {
					<img src={ poi.ImageURL } alt={ poi.Name } class="w-full h-full object-cover rounded-lg"/>
				} else {
					<div class="w-full h-full bg-gradient-to-br from-blue-400 to-purple-500 rounded-lg flex items-center justify-center">
						<i class="fas fa-map-marker-alt text-white text-sm"></i>
					</div>
				}
			</div>
			<div class="flex-1 min-w-0">
				<h4 class="font-medium text-gray-900 truncate">{ poi.Name }</h4>
				<p class="text-sm text-gray-600">{ poi.Category }</p>
				<div class="flex items-center mt-1">
					<div class="flex items-center">
						for i := 0; i < int(poi.Rating); i++ {
							<i class="fas fa-star text-yellow-400 text-xs"></i>
						}
					</div>
					<span class="ml-1 text-xs text-gray-500">({ poi.Rating })</span>
				</div>
			</div>
			<button class="bg-blue-600 text-white px-3 py-1 rounded-md text-sm hover:bg-blue-700 transition-colors">
				<i class="fas fa-plus mr-1"></i>
				Add
			</button>
		</div>
	</div>
}

templ ItineraryEmptyState() {
	<div class="text-center py-6 text-gray-500">
		<i class="fas fa-map-marked-alt text-2xl mb-2"></i>
		<p class="text-sm">Your itinerary will appear here</p>
		<p class="text-xs">Start chatting to build your trip!</p>
	</div>
}

templ ItinerarySummaryItem(day int, items []models.NearbyPOI) {
	<div class="mb-3">
		<h4 class="font-medium text-gray-900 mb-2">Day { fmt.Sprintf("%d", day) }</h4>
		<div class="space-y-2">
			for _, item := range items {
				<div class="flex items-center justify-between text-sm">
					<div class="flex items-center space-x-2">
						<div class="w-2 h-2 bg-blue-600 rounded-full"></div>
						<span class="text-gray-700">{ item.Name }</span>
					</div>
					<button class="text-red-500 hover:text-red-700" onclick="removeFromItinerary('{item.ID}')">
						<i class="fas fa-times text-xs"></i>
					</button>
				</div>
			}
		</div>
	</div>
}

templ ItineraryDestinationSuggestions(suggestions []string) {
	if len(suggestions) > 0 {
		<div class="bg-white border border-gray-200 rounded-lg shadow-sm">
			for _, suggestion := range suggestions {
				<div
					class="p-3 hover:bg-gray-50 cursor-pointer border-b border-gray-100 last:border-b-0"
					onclick="selectDestination('{suggestion}')"
				>
					<div class="flex items-center space-x-2">
						<i class="fas fa-map-marker-alt text-gray-400"></i>
						<span class="text-gray-700">{ suggestion }</span>
					</div>
				</div>
			}
		</div>
		<script>
			function selectDestination(destination) {
				document.getElementById('destination-input').value = destination;
				document.getElementById('destination-suggestions').innerHTML = '';
			}
		</script>
	}
}
