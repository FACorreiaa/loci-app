package nearby

import (
	"fmt"
	mapcomponents "github.com/FACorreiaa/go-templui/app/lib/components/map"
	"github.com/FACorreiaa/go-templui/app/lib/models"
)

templ NearbyPage() {
	<div class="container mx-auto px-4 py-6">
		<div class="bg-white rounded-lg shadow-lg">
			<!-- Header -->
			<div class="p-6 border-b border-gray-200">
				<div class="flex items-center justify-between mb-4">
					<h1 class="text-2xl font-bold text-gray-900">Discover Nearby</h1>
					<div class="flex items-center space-x-2">
						<button id="location-btn" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
							<i class="fas fa-location-arrow mr-2"></i>
							Use My Location
						</button>
					</div>
				</div>
				<!-- Location Display -->
				<div id="current-location" class="text-gray-600 text-sm mb-4">
					<i class="fas fa-map-marker-alt mr-1"></i>
					<span id="location-text">Click "Use My Location" to get nearby recommendations</span>
				</div>
				<!-- Search Bar -->
				<div class="relative">
					<input
						type="text"
						id="search-input"
						placeholder="Search for places, restaurants, activities..."
						class="w-full px-4 py-3 pl-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
						hx-post="/nearby/search"
						hx-trigger="input changed delay:500ms"
						hx-target="#search-results"
						hx-include="#filters-form"
					/>
					<i class="fas fa-search absolute left-3 top-3.5 text-gray-400"></i>
				</div>
			</div>
			<!-- Tabs -->
			<div class="border-b border-gray-200">
				<nav class="flex space-x-8 px-6" id="category-tabs">
					<button
						class="py-4 px-1 border-b-2 border-blue-600 text-blue-600 font-medium text-sm tab-active"
						data-category="general"
						hx-post="/nearby/category/general"
						hx-target="#poi-results"
						hx-include="#filters-form"
					>
						General
					</button>
					<button
						class="py-4 px-1 border-b-2 border-transparent text-gray-500 hover:text-gray-700 font-medium text-sm"
						data-category="restaurants"
						hx-post="/nearby/category/restaurants"
						hx-target="#poi-results"
						hx-include="#filters-form"
					>
						Restaurants
					</button>
					<button
						class="py-4 px-1 border-b-2 border-transparent text-gray-500 hover:text-gray-700 font-medium text-sm"
						data-category="activities"
						hx-post="/nearby/category/activities"
						hx-target="#poi-results"
						hx-include="#filters-form"
					>
						Activities
					</button>
					<button
						class="py-4 px-1 border-b-2 border-transparent text-gray-500 hover:text-gray-700 font-medium text-sm"
						data-category="hotels"
						hx-post="/nearby/category/hotels"
						hx-target="#poi-results"
						hx-include="#filters-form"
					>
						Hotels
					</button>
					<button
						class="py-4 px-1 border-b-2 border-transparent text-gray-500 hover:text-gray-700 font-medium text-sm"
						data-category="attractions"
						hx-post="/nearby/category/attractions"
						hx-target="#poi-results"
						hx-include="#filters-form"
					>
						Attractions
					</button>
				</nav>
			</div>
			<!-- Filters -->
			<div class="p-6 bg-gray-50 border-b border-gray-200">
				<form id="filters-form" class="flex flex-wrap items-center gap-4">
					<input type="hidden" name="latitude" id="latitude" value=""/>
					<input type="hidden" name="longitude" id="longitude" value=""/>
					<input type="hidden" name="category" id="current-category" value="general"/>
					<!-- Distance Filter -->
					<div class="flex items-center space-x-2">
						<label class="text-sm font-medium text-gray-700">Distance:</label>
						<select
							name="distance"
							class="border border-gray-300 rounded-md px-3 py-1 text-sm focus:ring-2 focus:ring-blue-500"
							hx-post="/nearby/filter"
							hx-target="#poi-results"
							hx-include="#filters-form"
							hx-trigger="change"
						>
							<option value="1">1 km</option>
							<option value="5" selected>5 km</option>
							<option value="10">10 km</option>
							<option value="25">25 km</option>
						</select>
					</div>
					<!-- Rating Filter -->
					<div class="flex items-center space-x-2">
						<label class="text-sm font-medium text-gray-700">Min Rating:</label>
						<select
							name="rating"
							class="border border-gray-300 rounded-md px-3 py-1 text-sm focus:ring-2 focus:ring-blue-500"
							hx-post="/nearby/filter"
							hx-target="#poi-results"
							hx-include="#filters-form"
							hx-trigger="change"
						>
							<option value="0">Any</option>
							<option value="3">3+ Stars</option>
							<option value="4" selected>4+ Stars</option>
							<option value="4.5">4.5+ Stars</option>
						</select>
					</div>
					<!-- Price Filter -->
					<div class="flex items-center space-x-2">
						<label class="text-sm font-medium text-gray-700">Price:</label>
						<select
							name="price"
							class="border border-gray-300 rounded-md px-3 py-1 text-sm focus:ring-2 focus:ring-blue-500"
							hx-post="/nearby/filter"
							hx-target="#poi-results"
							hx-include="#filters-form"
							hx-trigger="change"
						>
							<option value="">Any</option>
							<option value="1">$ - Budget</option>
							<option value="2">$$ - Moderate</option>
							<option value="3">$$$ - Expensive</option>
							<option value="4">$$$$ - Very Expensive</option>
						</select>
					</div>
					<!-- View Toggle -->
					<div class="ml-auto flex items-center space-x-2">
						<label class="text-sm font-medium text-gray-700">View:</label>
						<div class="flex border border-gray-300 rounded-md overflow-hidden">
							<button
								type="button"
								id="view-cards"
								class="px-3 py-1 text-sm bg-blue-600 text-white hover:bg-blue-700 view-toggle active"
								data-view="cards"
							>
								<i class="fas fa-th-large"></i>
							</button>
							<button
								type="button"
								id="view-map"
								class="px-3 py-1 text-sm bg-white text-gray-700 hover:bg-gray-100 border-l view-toggle"
								data-view="map"
							>
								<i class="fas fa-map"></i>
							</button>
							<button
								type="button"
								id="view-split"
								class="px-3 py-1 text-sm bg-white text-gray-700 hover:bg-gray-100 border-l view-toggle"
								data-view="split"
							>
								<i class="fas fa-columns"></i>
							</button>
						</div>
					</div>
				</form>
			</div>
			<!-- Content Area -->
			<div class="relative">
				<!-- Cards View -->
				<div id="cards-view" class="p-6">
					<div id="poi-results" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
						@NearbyLoadingState()
					</div>
				</div>
				<!-- Map View -->
				<div id="map-view" class="hidden" style="height: 600px;">
					@mapcomponents.MapboxContainer("nearby-map", "100%")
				</div>
				<!-- Split View -->
				<div id="split-view" class="hidden flex h-[600px]">
					<div class="w-1/2 p-6 overflow-y-auto border-r border-gray-200">
						<div id="poi-results-split" class="space-y-4">
							@NearbyLoadingState()
						</div>
					</div>
					<div class="w-1/2">
						@mapcomponents.MapboxContainer("nearby-map-split", "100%")
					</div>
				</div>
				<!-- Search Results Overlay -->
				<div id="search-results" class="absolute top-0 left-0 right-0 bg-white shadow-lg border-b z-10 hidden">
					<!-- Search results will be loaded here -->
				</div>
			</div>
		</div>
	</div>
	<script>
		document.addEventListener('DOMContentLoaded', function() {
			// Tab switching
			const tabs = document.querySelectorAll('#category-tabs button');
			tabs.forEach(tab => {
				tab.addEventListener('click', function() {
					// Update active tab
					tabs.forEach(t => {
						t.classList.remove('tab-active', 'border-blue-600', 'text-blue-600');
						t.classList.add('border-transparent', 'text-gray-500');
					});
					this.classList.add('tab-active', 'border-blue-600', 'text-blue-600');
					this.classList.remove('border-transparent', 'text-gray-500');
					
					// Update current category
					document.getElementById('current-category').value = this.dataset.category;
				});
			});

			// View toggle
			const viewToggles = document.querySelectorAll('.view-toggle');
			const cardsView = document.getElementById('cards-view');
			const mapView = document.getElementById('map-view');
			const splitView = document.getElementById('split-view');

			viewToggles.forEach(toggle => {
				toggle.addEventListener('click', function() {
					const view = this.dataset.view;
					
					// Update active toggle
					viewToggles.forEach(t => {
						t.classList.remove('active', 'bg-blue-600', 'text-white');
						t.classList.add('bg-white', 'text-gray-700');
					});
					this.classList.add('active', 'bg-blue-600', 'text-white');
					this.classList.remove('bg-white', 'text-gray-700');
					
					// Show/hide views
					cardsView.classList.toggle('hidden', view !== 'cards');
					mapView.classList.toggle('hidden', view !== 'map');
					splitView.classList.toggle('hidden', view !== 'split');

					// Initialize map if needed
					if (view === 'map' || view === 'split') {
						initializeMap(view);
					}
				});
			});

			// Location button
			document.getElementById('location-btn').addEventListener('click', function() {
				if (navigator.geolocation) {
					this.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Getting Location...';
					this.disabled = true;
					
					navigator.geolocation.getCurrentPosition(
						function(position) {
							const lat = position.coords.latitude;
							const lng = position.coords.longitude;
							
							document.getElementById('latitude').value = lat;
							document.getElementById('longitude').value = lng;
							document.getElementById('location-text').textContent = `Using current location (${lat.toFixed(4)}, ${lng.toFixed(4)})`;
							
							// Trigger initial load
							htmx.trigger('#category-tabs button.tab-active', 'click');
							
							const btn = document.getElementById('location-btn');
							btn.innerHTML = '<i class="fas fa-check mr-2"></i>Location Set';
							btn.disabled = false;
							btn.classList.remove('bg-blue-600', 'hover:bg-blue-700');
							btn.classList.add('bg-green-600', 'hover:bg-green-700');
						},
						function(error) {
							document.getElementById('location-text').textContent = 'Unable to get location. Please enter a location manually.';
							const btn = document.getElementById('location-btn');
							btn.innerHTML = '<i class="fas fa-exclamation-triangle mr-2"></i>Location Failed';
							btn.disabled = false;
							btn.classList.remove('bg-blue-600', 'hover:bg-blue-700');
							btn.classList.add('bg-red-600', 'hover:bg-red-700');
						}
					);
				} else {
					alert('Geolocation is not supported by this browser.');
				}
			});

			// Search input focus/blur
			const searchInput = document.getElementById('search-input');
			const searchResults = document.getElementById('search-results');
			
			searchInput.addEventListener('focus', function() {
				if (searchResults.children.length > 0) {
					searchResults.classList.remove('hidden');
				}
			});

			document.addEventListener('click', function(e) {
				if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
					searchResults.classList.add('hidden');
				}
			});
		});

		function initializeMap(view) {
			// Get access token from server endpoint
			const accessToken = window.MAPBOX_ACCESS_TOKEN || 'pk.eyJ1IjoieW91cm11c2VybmFtZSIsImEiOiJjbHl6eHl6eHl6eHl6In0.your_access_token_here';
			
			if (view === 'map') {
				const lat = parseFloat(document.getElementById('latitude').value) || 40.7128;
				const lng = parseFloat(document.getElementById('longitude').value) || -74.0060;
				
				// Initialize map
				const map = mapcomponents.MapboxInit('nearby-map', accessToken, [lng, lat], 12);
				
				// Load POI markers
				loadMapMarkers('nearby-map');
			} else if (view === 'split') {
				const lat = parseFloat(document.getElementById('latitude').value) || 40.7128;
				const lng = parseFloat(document.getElementById('longitude').value) || -74.0060;
				
				// Initialize split view map
				const map = mapcomponents.MapboxInit('nearby-map-split', accessToken, [lng, lat], 12);
				
				// Load POI markers
				loadMapMarkers('nearby-map-split');
			}
		}
		
		function loadMapMarkers(mapId) {
			const latitude = document.getElementById('latitude').value;
			const longitude = document.getElementById('longitude').value;
			const category = document.getElementById('current-category').value;
			
			if (!latitude || !longitude) return;
			
			// Fetch map data from server
			fetch(`/nearby/map?lat=${latitude}&lng=${longitude}&category=${category}`)
				.then(response => response.json())
				.then(data => {
					if (data.markers) {
						mapcomponents.AddMapMarkers(mapId, data.markers);
					}
				})
				.catch(error => {
					console.error('Error loading map markers:', error);
				});
		}
		
		// Global functions for map interactions
		function addToFavorites(poiId) {
			htmx.ajax('POST', `/favorites/add/${poiId}`, {
				target: 'body',
				swap: 'none'
			});
			
			// Show success notification
			showNotification('Added to favorites!', 'success');
		}
		
		function addToItinerary(poiId) {
			htmx.ajax('POST', `/itinerary/add/${poiId}`, {
				target: 'body', 
				swap: 'none'
			});
			
			// Show success notification
			showNotification('Added to itinerary!', 'success');
		}
		
		function showNotification(message, type) {
			// Simple notification - could be enhanced with a proper notification system
			const notification = document.createElement('div');
			notification.className = `fixed top-4 right-4 px-4 py-2 rounded-lg text-white z-50 ${
				type === 'success' ? 'bg-green-600' : 'bg-red-600'
			}`;
			notification.textContent = message;
			document.body.appendChild(notification);
			
			setTimeout(() => {
				notification.remove();
			}, 3000);
		}
	</script>
}

templ NearbySearchResults(pois []models.NearbyPOI) {
	if len(pois) == 0 {
		<div class="p-4 text-center text-gray-500">
			<i class="fas fa-search text-2xl mb-2"></i>
			<p>No results found. Try a different search term.</p>
		</div>
	} else {
		<div class="max-h-64 overflow-y-auto">
			for _, poi := range pois {
				<div
					class="p-3 hover:bg-gray-100 cursor-pointer border-b border-gray-100 last:border-b-0"
					onclick="selectSearchResult('{poi.ID}', '{poi.Name}', {poi.Latitude}, {poi.Longitude})"
				>
					<div class="flex items-center space-x-3">
						<div class="w-12 h-12 bg-gray-200 rounded-lg flex-shrink-0">
							if poi.ImageURL != "" {
								<img src={ poi.ImageURL } alt={ poi.Name } class="w-full h-full object-cover rounded-lg"/>
							} else {
								<div class="w-full h-full bg-gradient-to-br from-blue-400 to-purple-500 rounded-lg flex items-center justify-center">
									<i class="fas fa-map-marker-alt text-white text-sm"></i>
								</div>
							}
						</div>
						<div class="flex-1">
							<h4 class="font-medium text-gray-900">{ poi.Name }</h4>
							<p class="text-sm text-gray-600">{ poi.Category }</p>
							<div class="flex items-center mt-1">
								<div class="flex items-center">
									for i := 0; i < int(poi.Rating); i++ {
										<i class="fas fa-star text-yellow-400 text-xs"></i>
									}
								</div>
								<span class="ml-1 text-xs text-gray-500">({ poi.Rating })</span>
							</div>
						</div>
						<div class="text-right">
							<p class="text-sm text-gray-600">{ fmt.Sprintf("%.1f km", poi.Distance) }</p>
						</div>
					</div>
				</div>
			}
		</div>
	}
}

templ NearbyPOIResults(pois []models.NearbyPOI) {
	if len(pois) == 0 {
		@NearbyNoLocation()
	} else {
		for _, poi := range pois {
			@NearbyPOICard(poi)
		}
	}
}

templ NearbyNoLocation() {
	<div class="col-span-full text-center py-12">
		<i class="fas fa-location-arrow text-4xl text-gray-400 mb-4"></i>
		<h3 class="text-lg font-medium text-gray-900 mb-2">Location Required</h3>
		<p class="text-gray-600 mb-4">Click "Use My Location" to discover amazing places nearby.</p>
		<button
			class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"
			onclick="document.getElementById('location-btn').click()"
		>
			<i class="fas fa-location-arrow mr-2"></i>
			Get My Location
		</button>
	</div>
}

templ NearbyLoadingState() {
	for i := 0; i < 6; i++ {
		<div class="bg-gray-200 rounded-lg p-4 animate-pulse">
			<div class="h-48 bg-gray-300 rounded-lg mb-4"></div>
			<div class="h-4 bg-gray-300 rounded mb-2"></div>
			<div class="h-4 bg-gray-300 rounded w-3/4 mb-2"></div>
			<div class="h-3 bg-gray-300 rounded w-1/2"></div>
		</div>
	}
}

templ NearbyPOICard(poi models.NearbyPOI) {
	<div class="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow duration-200 overflow-hidden">
		<div class="relative">
			if poi.ImageURL != "" {
				<img src={ poi.ImageURL } alt={ poi.Name } class="w-full h-48 object-cover"/>
			} else {
				<div class="w-full h-48 bg-gradient-to-br from-blue-400 to-purple-500 flex items-center justify-center">
					<i class="fas fa-map-marker-alt text-white text-3xl"></i>
				</div>
			}
			<button
				class="absolute top-3 right-3 bg-white rounded-full p-2 shadow-md hover:bg-gray-100 transition-colors"
				hx-post={ "/favorites/add/" + poi.ID }
				hx-target="this"
				hx-swap="outerHTML"
			>
				<i class="far fa-heart text-gray-600"></i>
			</button>
		</div>
		<div class="p-4">
			<h3 class="font-semibold text-lg text-gray-900 mb-1">{ poi.Name }</h3>
			<p class="text-gray-600 text-sm mb-2">{ poi.Category }</p>
			<div class="flex items-center mb-2">
				<div class="flex items-center">
					for i := 0; i < 5; i++ {
						if float64(i) < poi.Rating {
							<i class="fas fa-star text-yellow-400 text-sm"></i>
						} else {
							<i class="far fa-star text-gray-300 text-sm"></i>
						}
					}
				</div>
				<span class="ml-2 text-sm text-gray-600">({ poi.Rating })</span>
			</div>
			if poi.Address != "" {
				<p class="text-gray-600 text-sm mb-2">
					<i class="fas fa-map-marker-alt mr-1"></i>
					{ poi.Address }
				</p>
			}
			if poi.Distance > 0 {
				<p class="text-gray-600 text-sm mb-3">
					<i class="fas fa-walking mr-1"></i>
					{ fmt.Sprintf("%.1f km away", poi.Distance) }
				</p>
			}
			if poi.PriceLevel > 0 {
				<div class="flex items-center mb-3">
					<span class="text-gray-600 text-sm mr-2">Price:</span>
					for i := 0; i < poi.PriceLevel; i++ {
						<span class="text-green-600">$</span>
					}
					for i := poi.PriceLevel; i < 4; i++ {
						<span class="text-gray-300">$</span>
					}
				</div>
			}
			<div class="flex space-x-2">
				<button class="flex-1 bg-blue-600 text-white px-4 py-2 rounded-md text-sm hover:bg-blue-700 transition-colors">
					View Details
				</button>
				<button
					class="bg-gray-100 text-gray-700 px-4 py-2 rounded-md text-sm hover:bg-gray-200 transition-colors"
					hx-post={ "/bookmarks/add/" + poi.ID }
					hx-target="this"
					hx-swap="outerHTML"
				>
					<i class="fas fa-bookmark"></i>
				</button>
			</div>
		</div>
	</div>
}
